!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var e=0,n=0,r=function(t){var r=Date.now();r===e?++n:(e=r,n=0);var o=""+String(r)+String(n);return t&&(o=t+"_"+o),o},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},s=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},c=Object.freeze,f=Object.setPrototypeOf,l=Object.getPrototypeOf,p=Object.hasOwnProperty,h=r("_wrappedMixin"),d=r("_appliedMixin"),y=r("_cachedApplication"),v=function(t){return function(t){return b(t,function(e){return function(t,e){for(;null!==t;){if(O(t,e))return!0;t=l(t)}return!1}(e.prototype,t)?e:t(e)})}(function(t){return b(t,function(e){var n=e[y];n||(n=e[y]=new Map);var r=n.get(t);return r||(r=t(e),n.set(t,r)),r})}(function(t){return b(t,function(e){return function(t,e){var n=e(t);return n.prototype[d]=m(e),n}(e,t)})}(t)))},g=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return function t(){i(this,t)}}();return c({with:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.map(function(t){return v(t)}).reduce(function(t,e){return e(t)},t)}})};function b(t,e){return f(e,t),t[h]||(t[h]=t),e}function m(t){return t[h]||t}function O(t,e){return p.call(t,d)&&t[d]===m(e)}var w=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),e=new WeakMap;return function(n){var r=e.get(n);return r||e.set(n,r=t(n)),r}},P=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.some(e)},E=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.every(e)},j=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return E(n,t)}},A=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return P(n,t)}},C=Object.prototype.toString,_=["Map","Set","Symbol","Array","Object","String","Date","RegExp","Function","Boolean","Number","Null","Undefined","Arguments","Error","Request","Response","Headers","Blob"],S=_.length,z={},T=/\s([a-zA-Z]+)/,N=function(){for(var t={},e=function(e){var n=_[e].toLowerCase();t[n]=function(t){return x(t)===n},t[n].all=j(t[n]),t[n].any=A(t[n])},n=S;n--;)e(n);return t}(),k=function(t){return x(t)};function x(t){var e=C.call(t);if(!z[e]){var n=e.match(T);Array.isArray(n)&&n.length>1&&(z[e]=n[1].toLowerCase())}return z[e]}var R=function(t){return M(t,[],[])};function M(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return N.undefined(t)||N.null(t)||function(t){return N.boolean(t)||N.number(t)||N.string(t)}(t)||N.function(t)?t:function(t,e){var n={date:function(){return new Date(this.getTime())},regexp:function(){return new RegExp(this)},array:function(){return this.map(M)},map:function(){return new Map(Array.from(this.entries()))},set:function(){return new Set(Array.from(this.values()))},request:function(){return this.clone()},response:function(){return this.clone()},headers:function(){for(var t=new Headers,e=this.entries,n=Array.isArray(e),r=0,e=n?e:e[Symbol.iterator]();;){var o;if(n){if(r>=e.length)break;o=e[r++]}else{if((r=e.next()).done)break;o=r.value}var i=o,u=i[0],a=i[1];t.append(u,a)}return t},blob:function(){return new Blob([this],{type:this.type})},object:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];e.push(this);var r=Object.create(this);n.push(r);var o=function(o){var i=e.findIndex(function(e){return e===t[o]});r[o]=i>-1?n[i]:M(t[o],e,n)};for(var i in this)o(i);return r}};if(t in n){for(var r=n[t],o=arguments.length,i=Array(o>2?o-2:0),u=2;u<o;u++)i[u-2]=arguments[u];return r.apply(e,i)}return e}(k(t),t,e,n)}var D=function(t,e){return R(e)},L=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{arrayMerge:D};return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];for(var o=void 0,i=n.length;i>0;--i)o=B(n.pop(),o,t);return o}}();function B(t,e,n){if(N.undefined(e))return R(t);var r=k(t);return r===k(e)?function(t,e,n,r){var o={object:function(){var t={},o={source:Object.keys(e),target:Object.keys(n)};return o.source.concat(o.target).forEach(function(o){t[o]=B(e[o],n[o],r)}),t},array:function(){return r.arrayMerge.apply(null,[e,n])}};if(t in o)return o[t]();return R(n)}(r,t,e,n):R(e)}var U=Object.freeze({Get:"GET",Post:"POST",Put:"PUT",Patch:"PATCH",Delete:"DELETE"}),V=w(),H=function(t){function e(n){i(this,e);var r=s(this,t.call(this,n.status+" for "+n.url));return r.name="HttpError",r.response=n,r}return a(e,t),e}(Error),I=function(){function t(e){i(this,t),V(this).config=e}return t.prototype.catcher=function(e,n){var r=R(V(this).config);return r.catchers.set(e,n),new t(r)},t.prototype.middleware=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=R(V(this).config);return r.middleware=n?e:r.middleware.concat(e),new t(r)},t.prototype.url=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=R(V(this).config);return r.url=n?e:r.url+e,new t(r)},t.prototype.options=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=R(V(this).config);return r.options=n?L(r.options,e):Object.assign({},e),new t(r)},t.prototype.headers=function(e){var n=R(V(this).config);return n.options.headers=L(n.options.headers,e),new t(n)},t.prototype.accept=function(t){return this.headers({Accept:t})},t.prototype.content=function(t){return this.headers({"Content-Type":t})},t.prototype.mode=function(t){return this.options({mode:t})},t.prototype.credentials=function(t){return this.options({credentials:t})},t.prototype.cache=function(t){return this.options({cache:t})},t.prototype.integrity=function(t){return this.options({integrity:t})},t.prototype.keepalive=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.options({keepalive:t})},t.prototype.redirect=function(t){return this.options({redirect:t})},t.prototype.body=function(e){var n=R(V(this).config);return n.options.body=e,new t(n)},t.prototype.auth=function(t){return this.headers({Authorization:t})},t.prototype.json=function(t){return this.content("application/json").body(JSON.stringify(t))},t.prototype.form=function(t){return this.body((e=t,Object.keys(e).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent("object"===o(e[t])?JSON.stringify(e[t]):e[t])}).join("&"))).content("application/x-www-form-urlencoded");var e},t.prototype.method=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U.Get;return this.options({method:t})},t.prototype.get=function(){return this.method(U.Get).send()},t.prototype.post=function(){return this.method(U.Post).send()},t.prototype.insert=function(){return this.method(U.Put).send()},t.prototype.update=function(){return this.method(U.Patch).send()},t.prototype.delete=function(){return this.method(U.Delete).send()},t.prototype.send=function(){var t,e=this,n=V(this).config,r=n.url,o=n.options,i=n.middleware,u=n.resolvers,a=n.catchers,s=(t=i,function(e){return 0===t.length?e:1===t.length?t[0](e):t.reduceRight(function(n,r,o){return o===t.length-2?r(n(e)):r(n)})})(fetch)(r,o).then(function(t){if(!t.ok)throw new H(t);return t}),c=function(t){return t.catch(function(t){if(a.has(t.status))return a.get(t.status)(t,e);if(a.has(t.name))return a.get(t.name)(t,e);throw t})},f=function(t){return function(e){return c(t?s.then(function(e){return e&&e[t]()}).then(function(t){return t&&e&&e(t)||t}):s.then(function(t){return t&&e&&e(t)||t}))}},l={res:f(null),json:f("json")};return u.reduce(function(t,e){return e(t,o)},l)},t}();var J=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.unshift(u),t.apply(this,n)},writable:!0})},a=0;a<o;a++)u(a);return e}},W=0,G=0,F=[],q=0,Z=document.createTextNode("");new MutationObserver(function(){for(var t=F.length,e=0;e<t;e++){var n=F[e];if(n&&"function"==typeof n)try{n()}catch(t){setTimeout(function(){throw t})}}F.splice(0,t),G+=t}).observe(Z,{characterData:!0});var $=function(t){return Z.textContent=String(q++),F.push(t),W++};var K=Object.freeze({run:$,cancel:function(t){var e=t-G;if(e>=0){if(!F[e])throw new Error("invalid async handle: "+t);F[e]=null}}}),Q=document.defaultView;if("function"!=typeof Q.HTMLElement){var X=function(){};X.prototype=Q.HTMLElement.prototype,Q.HTMLElement=X}var Y=function(t){var e=["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"],n=Object.defineProperty,r=Object.hasOwnProperty,o=w();return t||(t=function(t){function e(){return i(this,e),s(this,t.apply(this,arguments))}return a(e,t),e}(Q.HTMLElement)),function(t){function c(){i(this,c);for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=s(this,t.call.apply(t,[this].concat(n)));return o.construct(),o}return a(c,t),c.finalizeClass=function(){},c.define=function(t){var i=customElements;if(!i.get(t)){var u=this.prototype;e.forEach(function(t){r.call(u,t)||n(u,t,{value:function(){},configurable:!0});var e=t.substring(0,t.length-"callback".length),o=u[t];n(u,t,{value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];this[e].apply(this,n),o.apply(this,n)},configurable:!0})}),this.finalizeClass(),J(function(t){o(this).connected=!0,o(this).initialized||(o(this).initialized=!0,t.call(this),this.render())},"connected")(this),J(function(t){var e=this;o(e).connected=!1,$(function(){!o(e).connected&&o(e).initialized&&(o(e).initialized=!1,t.call(e))})},"disconnected")(this),J(function(t){var e=this;if(!o(e).rendering){var n=void 0===o(e).rendering;o(e).rendering=!0,$(function(){o(e).rendering&&(o(e).rendering=!1,e._onRender(n),t.call(e),e._postRender(n))})}},"render")(this),i.define(t,this)}},u(c,[{key:"initialized",get:function(){return!0===o(this).initialized}}],[{key:"observedAttributes",get:function(){return[]}}]),c.prototype.construct=function(){},c.prototype.attributeChanged=function(t,e,n){},c.prototype.connected=function(){},c.prototype.disconnected=function(){},c.prototype.adopted=function(){},c.prototype.render=function(){},c.prototype._onRender=function(){},c.prototype._postRender=function(){},c}(t)},tt=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=u.apply(this,n);return t.apply(this,n),o},writable:!0})},a=0;a<o;a++)u(a);return e}},et=!["undefined"==typeof window?"undefined":o(window),"undefined"==typeof document?"undefined":o(document)].includes("undefined"),nt=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.apply(this,n),u.apply(this,n)},writable:!0})},a=0;a<o;a++)u(a);return e}},rt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Node.ELEMENT_NODE,n=t.childNodes,r=[];if(n&&n.length>0)for(var o=n.length;o--;)n[o].nodeType===e&&r.unshift(n[o]);return r},ot=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return function(){if(et)return t.apply(void 0,arguments);if(e)throw new Error(t.name+" for browser use only")}}(function(t){return function(t){function e(){return i(this,e),s(this,t.apply(this,arguments))}return a(e,t),e.finalizeClass=function(){var e;t.finalizeClass.call(this),nt((e=/-([a-z])/g,function(t){var n=this;if(t){var r=rt(n);r.forEach(function(t){var r=t.getAttribute?t.getAttribute("slot"):null;if("string"==typeof r&&r.length>0){var o=r.replace(e,function(t){return t[1].toUpperCase()});n.slots[o]=t}else n.slots.default.push(t)}),n.slotsAssigned()}}),"_onRender")(this)},e.prototype.construct=function(){t.prototype.construct.call(this),this.slots={default:[]}},e.prototype.slotsAssigned=function(){},e}(t)}),it=function(t,e,n){return function(t,e,n,r){if(e.indexOf(",")>-1){var o=e.split(/\s*,\s*/),i=o.map(function(e){return ut(t,e,n,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=i.pop();)t.remove()}}}return ut(t,e,n,r)}(t,e,n,arguments.length>3&&void 0!==arguments[3]&&arguments[3])};function ut(t,e,n,r){if(t.addEventListener)return t.addEventListener(e,n,r),{remove:function(){this.remove=function(){},t.removeEventListener(e,n,r)}};throw new Error("target must be an event emitter")}var at=function(t){var e=Object.assign,n=w(function(){return{handlers:[]}}),r={bubbles:!1,cancelable:!1};return function(t){function o(){return i(this,o),s(this,t.apply(this,arguments))}return a(o,t),o.finalizeClass=function(){t.finalizeClass.call(this),tt(function(){this.off()},"disconnected")(this)},o.prototype.handleEvent=function(t){var e="on"+t.type;"function"==typeof this[e]&&this[e](t)},o.prototype.on=function(t,e,n){this.own(it(this,t,e,n))},o.prototype.dispatch=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.dispatchEvent(new CustomEvent(t,e(r,{detail:n})))},o.prototype.off=function(){n(this).handlers.forEach(function(t){t.remove()})},o.prototype.own=function(){for(var t=this,e=arguments.length,r=Array(e),o=0;o<e;o++)r[o]=arguments[o];r.forEach(function(e){n(t).handlers.push(e)})},o}(t)},st=function(t){var e=Object.defineProperty,n=Object.keys,r=Object.assign,c={},f={},l=w(),p=void 0,h={},d={};function y(t){var e,n={};for(var r in t)if(Object.hasOwnProperty.call(t,r)){var o=t[r];n[r]="function"==typeof o?{type:o}:o,(e=n[r]).hasObserver="observer"in e,e.isObserverString=e.hasObserver&&"string"==typeof e.observer,e.isString=e.type===String,e.isNumber=e.type===Number,e.isBoolean=e.type===Boolean,e.isObject=e.type===Object,e.isArray=e.type===Array,e.isDate=e.type===Date,e.notify="notify"in e,e.readOnly="readOnly"in e&&e.readOnly,e.reflectToAttribute="reflectToAttribute"in e?e.reflectToAttribute:e.isString||e.isNumber||e.isBoolean}return n}return function(t){function v(){return i(this,v),s(this,t.apply(this,arguments))}return a(v,t),v.finalizeClass=function(){t.finalizeClass.call(this),nt(function(){Object.keys(l(this).initializeProperties).length>0&&(r(this,l(this).initializeProperties),l(this).initializeProperties={}),this._flushProperties()},"connected")(this),nt(function(t,e,n){e!==n&&this._attributeToProperty(t,n)},"attributeChanged")(this),nt(function(t,e,n){var r=this,o=this;Object.keys(e).forEach(function(t){var i=o.constructor.classProperties[t],u=i.notify,a=i.hasObserver,s=i.reflectToAttribute,c=i.isObserverString,f=i.observer;s&&o._propertyToAttribute(t,e[t]),a&&c?r[f](e[t],n[t]):a&&"function"==typeof f&&f.apply(o,[e[t],n[t]]),u&&o.dispatchEvent(new CustomEvent(t+"-changed",{detail:{newValue:e[t],oldValue:n[t]}}))})},"propertiesChanged")(this),this.createProperties()},v.attributeToPropertyName=function(t){var e=c[t];if(!e){e=t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()}),c[t]=e}return e},v.propertyNameToAttribute=function(t){var e=f[t];if(!e){e=t.replace(/([A-Z])/g,"-$1").toLowerCase(),f[t]=e}return e},v.createProperties=function(){var t=this.prototype,e=this.classProperties;n(e).forEach(function(n){if(Object.hasOwnProperty.call(t,n))throw new Error("Unable to setup property '"+n+"', property already exists");var r=e[n].value;void 0!==r&&(d[n]=r),t._createPropertyAccessor(n,e[n].readOnly)})},v.prototype.construct=function(){t.prototype.construct.call(this),l(this).data={},l(this).serializing=!1,l(this).initializeProperties={},l(this).dataPending=null,l(this).dataOld=null,l(this).dataInvalid=!1,this._initializeProtoProperties(),this._initializeProperties()},v.prototype.propertiesChanged=function(t,e,n){},v.prototype._createPropertyAccessor=function(t,n){h[t]||(h[t]=!0,e(this,t,{enumerable:!0,configurable:!0,get:function(){return this._getProperty(t)},set:n?function(){}:function(e){this._setProperty(t,e)}}))},v.prototype._getProperty=function(t){return l(this).data[t]},v.prototype._setProperty=function(t,e){this._isValidPropertyValue(t,e)?this._setPendingProperty(t,e)&&this._invalidateProperties():console.log("invalid value "+e+" for property "+t+" of\n\t\t\t\t\ttype "+this.constructor.classProperties[t].type.name)},v.prototype._initializeProtoProperties=function(){var t=this;Object.keys(d).forEach(function(e){var n="function"==typeof d[e]?d[e].call(t):d[e];t._setProperty(e,n)})},v.prototype._initializeProperties=function(){var t=this;Object.keys(h).forEach(function(e){Object.hasOwnProperty.call(t,e)&&(l(t).initializeProperties[e]=t[e],delete t[e])})},v.prototype._attributeToProperty=function(t,e){if(!l(this).serializing){var n=this.constructor.attributeToPropertyName(t);this[n]=this._deserializeValue(n,e)}},v.prototype._isValidPropertyValue=function(t,e){var n=this.constructor.classProperties[t].type;return"object"===(void 0===e?"undefined":o(e))?e instanceof n:""+(void 0===e?"undefined":o(e))===n.name.toLowerCase()},v.prototype._propertyToAttribute=function(t,e){l(this).serializing=!0;var n=this.constructor.propertyNameToAttribute(t);void 0===(e=this._serializeValue(t,e))?this.removeAttribute(n):this.getAttribute(n)!==e&&this.setAttribute(n,e),l(this).serializing=!1},v.prototype._deserializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isNumber,o=n.isArray,i=n.isBoolean,u=n.isDate,a=n.isString,s=n.isObject;return i?e=null!==e&&void 0!==e:r?e=null===e||void 0===e?0:Number(e):a?e=null===e||void 0===e?"":String(e):s||o?e=null===e||void 0===e?o?null:{}:JSON.parse(e):u&&(e=null===e||void 0===e?"":new Date(e)),e},v.prototype._serializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isBoolean,o=n.isObject,i=n.isArray;return r?e?"":void 0:o||i?JSON.stringify(e):e=e?e.toString():void 0},v.prototype._setPendingProperty=function(t,e){var n=l(this).data[t],r=this._shouldPropertyChange(t,e,n);return r&&(l(this).dataPending||(l(this).dataPending={},l(this).dataOld={}),!l(this).dataOld||t in l(this).dataOld||(l(this).dataOld[t]=n),l(this).data[t]=e,l(this).dataPending[t]=e),r},v.prototype._invalidateProperties=function(){var t=this;l(this).dataInvalid||(l(this).dataInvalid=!0,$(function(){l(t).dataInvalid&&(l(t).dataInvalid=!1,t._flushProperties())}))},v.prototype._flushProperties=function(){var t=l(this).data,e=l(this).dataPending,n=l(this).dataOld;this._shouldPropertiesChange(t,e,n)&&(l(this).dataPending=null,l(this).dataOld=null,this.propertiesChanged(t,e,n))},v.prototype._shouldPropertiesChange=function(t,e,n){return Boolean(e)},v.prototype._shouldPropertyChange=function(t,e,n){return n!==e&&(n==n||e==e)},u(v,null,[{key:"observedAttributes",get:function(){var t=this;return Object.keys(this.classProperties).map(function(e){return t.propertyNameToAttribute(e)})||[]}},{key:"classProperties",get:function(){if(!p){for(var t=function(){return p||{}},e=null,n=!0;n;)(e=Object.getPrototypeOf(null===e?this:e))&&e.constructor&&e.constructor!==HTMLElement&&e.constructor!==Function&&e.constructor!==Object&&e.constructor!==e.constructor.constructor||(n=!1),Object.hasOwnProperty.call(e,"properties")&&(p=r(t(),y(e.properties)));this.properties&&(p=r(t(),y(this.properties)))}return p}}]),v}(t)},ct=function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var e=document.createDocumentFragment(),n=t.childNodes,r=0;r<n.length;r++)e.appendChild(n[r].cloneNode(!0));return e},ft=function(t){t.parentElement&&t.parentElement.removeChild(t)};t.classBuilder=g,t.createStorage=w,t.http=function(){return new I(Object.assign({},{url:"",options:{},catchers:new Map,resolvers:[],middleware:[]}))},t.is=N,t.customElement=Y,t.customElementState=function(t){var e=w(),n=L();return function(t){function r(){return i(this,r),s(this,t.apply(this,arguments))}return a(r,t),r.finalizeClass=function(){t.finalizeClass.call(this),tt(function(t){t?this.componentWillRender(this.state):this.componentWillUpdate(this.state,R(e(this).renderedState))},"_onRender")(this),tt(function(t){var n=e(this).renderedState;e(this).renderedState=e(this).state,t?this.componentDidRender(n):this.componentDidUpdate(n)},"_postRender")(this)},r.prototype.construct=function(){t.prototype.construct.call(this),this.setState(this.defaultState)},r.prototype.shouldComponentUpdate=function(t){for(var n in t)if(t[n]!==e(this).state[n])return!0;return!1},r.prototype.setState=function(t){var r=n(e(this).state,t);(void 0===e(this).state||this.shouldComponentUpdate(r))&&(e(this).state=r,this.initialized&&this.render())},r.prototype.componentWillRender=function(t){},r.prototype.componentDidRender=function(t){},r.prototype.componentWillUpdate=function(t,e){},r.prototype.componentDidUpdate=function(t){},u(r,[{key:"defaultState",get:function(){return{}}},{key:"state",get:function(){return R(e(this).state)}}]),r}(t)},t.customElementSlots=ot,t.customElementEvents=at,t.customElementProperties=st,t.customElementComponent=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Y();return function(t){function e(){return i(this,e),s(this,t.apply(this,arguments))}return a(e,t),e.prototype.propertiesChanged=function(t,e,n){this.initialized&&this.render()},e}(g(t).with(at,st))},t.microTask=K,t.documentReady=function(t){return"loading"===document.readyState?new Promise(function(e){document.addEventListener("DOMContentLoaded",function(){return e(t)})}):Promise.resolve(t)},t.createElement=function(t){var e=document.createElement("template");e.innerHTML=t.trim();var n=ct(e);if(n&&n.firstChild)return n.firstChild;throw new Error("Unable to createElement for "+t)},t.elementSiblings=function(t){var e=[];if(t.parentNode&&t.parentNode.firstChild){var n=t.parentNode.firstChild;do{1===n.nodeType&&n!==t&&e.push(n)}while(n.nextSibling&&null!==n.nextSibling&&(n=n.nextSibling))}return e},t.removeElement=ft,t.isDescendantElement=function(t,e){for(;t.parentNode&&(t=t.parentNode)&&t!==e;);return Boolean(t)},t.elementChildren=rt,t.templateContent=ct,t.createRouter=function(t){var e=t.cloneNode(!0),n={},r=null,o=null,i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";window.location.hash=t},u=function(){return s()},a=function(t){n["*"]=t},s=function(){var r=location.hash.slice(1),i=function(t,e){var n=t.split("/"),r=n[0];return e.filter(function(t){var e=t.split("/"),o=0===e.map(function(t,e){return-1!==t.indexOf(":",0)||t===n[e]}).reduce(function(t,e){return!1===e&&++t,t},0);return-1!==t.indexOf(r,0)&&o&&n.length===e.length})[0]}(r,Object.keys(n)),u={};i&&(u=function(t,e){var n=e.split("/");return t.split("/").map(function(t,e){if(-1===t.indexOf(":",0))return null;var r={},o=t.substr(1,t.length-1);return r[o]=n[e],r}).filter(function(t){return null!==t}).reduce(function(t,e){return e&&Object.keys(e).forEach(function(n){var r;t[n]=(r=e[n],isNaN(r)?"true"===r||"false"===r?JSON.parse(r):r:parseInt(r,10))}),t},{})}(i,r));var a=Object.keys(n).indexOf(i)>-1?n[i]:n["*"];a&&(o&&!N.undefined(o.dispose)&&o.dispose(t),o=a,function(){if(t.parentElement){var n=e.cloneNode(!0);t&&t.parentElement&&t.parentElement.insertBefore(n,t),ft(t),t=n}}(),a(t,u,a.data))},c=function(){r=it(window,"hashchange",s)};return r&&r.remove(),{start:c,addRoute:function t(e,r,o){return n[e]=r,n[e].data=o,{start:c,reload:u,addRoute:t,otherwise:a,navigate:i}},otherwise:a,navigate:i,reload:u}},t.listenEvent=it,t.listenEventOnce=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=it(t,e,function(){o.remove(),n.apply(void 0,arguments)},r);return o},t.pausableEvent=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=!1,i=it(t,e,function(){o||n.apply(void 0,arguments)},r);return{remove:function(){i.remove()},pause:function(){o=!0},resume:function(){o=!1}}},t.adviceBefore=nt,t.adviceAround=J,t.adviceAfter=tt,t.adviceAfterThrow=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){try{for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return u.apply(this,n)}catch(e){t.call(this,e)}},writable:!0})},a=0;a<o;a++)u(a);return e}},t.any=P,t.all=E,t.dget=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===e.indexOf("."))return void 0!==t[e]?t[e]:n;for(var r=e.split("."),o=r.length,i=t,u=0;u<o;u++)if(void 0===(i=i[r[u]]))return void(i=n);return i},t.dset=function(t,e,n){if(-1!==e.indexOf(".")){for(var r=e.split("."),o=r.length-1,i=t,u=0;u<o;u++)void 0===i[r[u]]&&(i[r[u]]={}),i=i[r[u]];i[r[o]]=n}else t[e]=n},t.clone=R,t.merge=L,t.jsonClone=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t,e){return e};return JSON.parse(JSON.stringify(t),e)},t.objectToMap=function(t){return Object.keys(t).reduce(function(e,n){return e.set(n,t[n])},new Map)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

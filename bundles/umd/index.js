!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var e=0,n=0,r=function(t){var r=Date.now();r===e?++n:(e=r,n=0);var i=""+String(r)+String(n);return t&&(i=t+"_"+i),i},i=r("_wrappedMixin"),o=r("_appliedMixin"),a=function(t){return t[i]||t},u=Object.setPrototypeOf,s=function(t,e){return u(e,t),t[i]||(t[i]=t),e},c=function(t){return s(t,function(e){return function(t,e){var n=e(t);return n.prototype[o]=a(e),n}(e,t)})},l=Object.hasOwnProperty,f=function(t,e){return l.call(t,o)&&t[o]===a(e)},p=Object.getPrototypeOf,d=function(t){return s(t,function(e){return function(t,e){for(;null!==t;){if(f(t,e))return!0;t=p(t)}return!1}(e.prototype,t)?e:t(e)})},h=r("_cachedApplication"),y=function(t){return d(function(t){return s(t,function(e){var n=e[h];n||(n=e[h]=new Map);var r=n.get(t);return r||(r=t(e),n.set(t,r)),r})}(c(t)))},v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),m=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},O=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},P=Object.freeze,w=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return function t(){g(this,t)}}();return P({with:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.map(function(t){return y(t)}).reduce(function(t,e){return e(t)},t)}})},E=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),e=new WeakMap;return function(n){var r=e.get(n);return r||e.set(n,r=t(n)),r}},_=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.some(e)},A=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.every(e)},j=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return A(n,t)}},C=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return _(n,t)}},z=Object.prototype.toString,S="Map Set Symbol Array Object String Date RegExp Function Boolean Number Null Undefined Arguments Error".split(" "),T=S.length,N={},k=/\s([a-zA-Z]+)/,x=function(){for(var t={},e=function(e){var n=S[e].toLowerCase();t[n]=function(t){return function(t){var e=z.call(t);if(!N[e]){var n=e.match(k);Array.isArray(n)&&n.length>1&&(N[e]=n[1].toLowerCase())}return N[e]}(t)===n},t[n].all=j(t[n]),t[n].any=C(t[n])},n=T;n--;)e(n);return t}();var M=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.apply(this,n),a.apply(this,n)},writable:!0})},u=0;u<i;u++)a(u);return e}},D=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.unshift(a),t.apply(this,n)},writable:!0})},u=0;u<i;u++)a(u);return e}},L=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=a.apply(this,n);return t.apply(this,n),i},writable:!0})},u=0;u<i;u++)a(u);return e}},R=function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var e=document.createDocumentFragment(),n=t.childNodes,r=0;r<n.length;r++)e.appendChild(n[r].cloneNode(!0));return e},U=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return function(){if(!["undefined"==typeof window?"undefined":v(window),"undefined"==typeof document?"undefined":v(document)].includes("undefined"))return t.apply(void 0,arguments);if(e)throw new Error(t.name+" is not running in browser")}}(function(t){var e=document.createElement("template");e.innerHTML=t.trim();var n=R(e);if(n&&n.firstChild)return n.firstChild;throw new Error("Unable to createElement for "+t)}),V=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Node.ELEMENT_NODE,n=t.childNodes,r=[];if(n&&n.length>0)for(var i=n.length;i--;)n[i].nodeType===e&&r.unshift(n[i]);return r},B=0,H=0,I=[],W=0,F=document.createTextNode("");new MutationObserver(function(){for(var t=I.length,e=0;e<t;e++){var n=I[e];if(n&&"function"==typeof n)try{n()}catch(t){setTimeout(function(){throw t})}}I.splice(0,t),H+=t}).observe(F,{characterData:!0});var J={run:function(t){return F.textContent=String(W++),I.push(t),B++},cancel:function(t){var e=t-H;if(e>=0){if(!I[e])throw new Error("invalid async handle: "+t);I[e]=null}}};var Z=function(t,e,n){return function(t,e,n,r){if(e.indexOf(",")>-1){var i=e.split(/\s*,\s*/),o=i.map(function(e){return $(t,e,n,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=o.pop();)t.remove()}}}return $(t,e,n,r)}(t,e,n,arguments.length>3&&void 0!==arguments[3]&&arguments[3])};function $(t,e,n,r){if(t.addEventListener)return t.addEventListener(e,n,r),{remove:function(){this.remove=function(){},t.removeEventListener(e,n,r)}};throw new Error("target must be an event emitter")}var q=document.defaultView;if("function"!=typeof q.HTMLElement){var G=function(){};G.prototype=q.HTMLElement.prototype,q.HTMLElement=G}var K=function(t){var e=["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"],n=Object.defineProperty,r=Object.hasOwnProperty,i=E();return t||(t=function(t){function e(){return g(this,e),O(this,t.apply(this,arguments))}return m(e,t),e}(q.HTMLElement)),function(t){function o(){g(this,o);for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=O(this,t.call.apply(t,[this].concat(n)));return i.construct(),i}return m(o,t),o.finalizeClass=function(){},o.define=function(t){var o=customElements;if(!o.get(t)){var a=this.prototype;e.forEach(function(t){r.call(a,t)||n(a,t,{value:function(){},configurable:!0});var e=t.substring(0,t.length-"callback".length),i=a[t];n(a,t,{value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];this[e].apply(this,n),i.apply(this,n)},configurable:!0})}),this.finalizeClass(),D(function(t){i(this).connected=!0,i(this).initialized||(i(this).initialized=!0,t.call(this),this.render())},"connected")(this),D(function(t){var e=this;i(e).connected=!1,J.run(function(){!i(e).connected&&i(e).initialized&&(i(e).initialized=!1,t.call(e))})},"disconnected")(this),D(function(t){var e=this;if(!i(e).rendering){var n=void 0===i(e).rendering;i(e).rendering=!0,J.run(function(){i(e).rendering&&(i(e).rendering=!1,e._onRender(n),t.call(e),e._postRender(n))})}},"render")(this),o.define(t,this)}},b(o,[{key:"initialized",get:function(){return!0===i(this).initialized}}],[{key:"observedAttributes",get:function(){return[]}}]),o.prototype.construct=function(){},o.prototype.attributeChanged=function(t,e,n){},o.prototype.connected=function(){},o.prototype.disconnected=function(){},o.prototype.adopted=function(){},o.prototype.render=function(){},o.prototype._onRender=function(){},o.prototype._postRender=function(){},o}(t)},Q=function(t){var e=Object.assign,n=E(function(){return{handlers:[]}}),r={bubbles:!1,cancelable:!1};return function(t){function i(){return g(this,i),O(this,t.apply(this,arguments))}return m(i,t),i.finalizeClass=function(){t.finalizeClass.call(this),L(function(){this.off()},"disconnected")(this)},i.prototype.handleEvent=function(t){var e="on"+t.type;"function"==typeof this[e]&&this[e](t)},i.prototype.on=function(t,e,n){this.own(Z(this,t,e,n))},i.prototype.dispatch=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.dispatchEvent(new CustomEvent(t,e(r,{detail:n})))},i.prototype.off=function(){n(this).handlers.forEach(function(t){t.remove()})},i.prototype.own=function(){for(var t=this,e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];r.forEach(function(e){n(t).handlers.push(e)})},i}(t)},X=function(t){var e=Object.defineProperty,n=Object.keys,r=Object.assign,i={},o={},a=E(),u=void 0,s={},c={};function l(t){var e,n={};for(var r in t)if(Object.hasOwnProperty.call(t,r)){var i=t[r];n[r]="function"==typeof i?{type:i}:i,(e=n[r]).hasObserver="observer"in e,e.isObserverString=e.hasObserver&&"string"==typeof e.observer,e.isString=e.type===String,e.isNumber=e.type===Number,e.isBoolean=e.type===Boolean,e.isObject=e.type===Object,e.isArray=e.type===Array,e.isDate=e.type===Date,e.notify="notify"in e,e.readOnly="readOnly"in e&&e.readOnly,e.reflectToAttribute="reflectToAttribute"in e?e.reflectToAttribute:e.isString||e.isNumber||e.isBoolean}return n}return function(t){function f(){return g(this,f),O(this,t.apply(this,arguments))}return m(f,t),f.finalizeClass=function(){t.finalizeClass.call(this),M(function(){Object.keys(a(this).initializeProperties).length>0&&(r(this,a(this).initializeProperties),a(this).initializeProperties={}),this._flushProperties()},"connected")(this),M(function(t,e,n){e!==n&&this._attributeToProperty(t,n)},"attributeChanged")(this),M(function(t,e,n){var r=this,i=this;Object.keys(e).forEach(function(t){var o=i.constructor.classProperties[t],a=o.notify,u=o.hasObserver,s=o.reflectToAttribute,c=o.isObserverString,l=o.observer;s&&i._propertyToAttribute(t,e[t]),u&&c?r[l](e[t],n[t]):u&&"function"==typeof l&&l.apply(i,[e[t],n[t]]),a&&i.dispatchEvent(new CustomEvent(t+"-changed",{detail:{newValue:e[t],oldValue:n[t]}}))})},"propertiesChanged")(this),this.createProperties()},f.attributeToPropertyName=function(t){var e=i[t];if(!e){e=t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()}),i[t]=e}return e},f.propertyNameToAttribute=function(t){var e=o[t];if(!e){e=t.replace(/([A-Z])/g,"-$1").toLowerCase(),o[t]=e}return e},f.createProperties=function(){var t=this.prototype,e=this.classProperties;n(e).forEach(function(n){if(Object.hasOwnProperty.call(t,n))throw new Error("Unable to setup property '"+n+"', property already exists");var r=e[n].value;void 0!==r&&(c[n]=r),t._createPropertyAccessor(n,e[n].readOnly)})},f.prototype.construct=function(){t.prototype.construct.call(this),a(this).data={},a(this).serializing=!1,a(this).initializeProperties={},a(this).dataPending=null,a(this).dataOld=null,a(this).dataInvalid=!1,this._initializeProtoProperties(),this._initializeProperties()},f.prototype.propertiesChanged=function(t,e,n){},f.prototype._createPropertyAccessor=function(t,n){s[t]||(s[t]=!0,e(this,t,{enumerable:!0,configurable:!0,get:function(){return this._getProperty(t)},set:n?function(){}:function(e){this._setProperty(t,e)}}))},f.prototype._getProperty=function(t){return a(this).data[t]},f.prototype._setProperty=function(t,e){this._isValidPropertyValue(t,e)?this._setPendingProperty(t,e)&&this._invalidateProperties():console.log("invalid value "+e+" for property "+t+" of\n\t\t\t\t\ttype "+this.constructor.classProperties[t].type.name)},f.prototype._initializeProtoProperties=function(){var t=this;Object.keys(c).forEach(function(e){var n="function"==typeof c[e]?c[e].call(t):c[e];t._setProperty(e,n)})},f.prototype._initializeProperties=function(){var t=this;Object.keys(s).forEach(function(e){Object.hasOwnProperty.call(t,e)&&(a(t).initializeProperties[e]=t[e],delete t[e])})},f.prototype._attributeToProperty=function(t,e){if(!a(this).serializing){var n=this.constructor.attributeToPropertyName(t);this[n]=this._deserializeValue(n,e)}},f.prototype._isValidPropertyValue=function(t,e){var n=this.constructor.classProperties[t].type;return"object"===(void 0===e?"undefined":v(e))?e instanceof n:""+(void 0===e?"undefined":v(e))===n.name.toLowerCase()},f.prototype._propertyToAttribute=function(t,e){a(this).serializing=!0;var n=this.constructor.propertyNameToAttribute(t);void 0===(e=this._serializeValue(t,e))?this.removeAttribute(n):this.getAttribute(n)!==e&&this.setAttribute(n,e),a(this).serializing=!1},f.prototype._deserializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isNumber,i=n.isArray,o=n.isBoolean,a=n.isDate,u=n.isString,s=n.isObject;return o?e=null!==e&&void 0!==e:r?e=null===e||void 0===e?0:Number(e):u?e=null===e||void 0===e?"":String(e):s||i?e=null===e||void 0===e?i?null:{}:JSON.parse(e):a&&(e=null===e||void 0===e?"":new Date(e)),e},f.prototype._serializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isBoolean,i=n.isObject,o=n.isArray;return r?e?"":void 0:i||o?JSON.stringify(e):e=e?e.toString():void 0},f.prototype._setPendingProperty=function(t,e){var n=a(this).data[t],r=this._shouldPropertyChange(t,e,n);return r&&(a(this).dataPending||(a(this).dataPending={},a(this).dataOld={}),!a(this).dataOld||t in a(this).dataOld||(a(this).dataOld[t]=n),a(this).data[t]=e,a(this).dataPending[t]=e),r},f.prototype._invalidateProperties=function(){var t=this;a(this).dataInvalid||(a(this).dataInvalid=!0,J.run(function(){a(t).dataInvalid&&(a(t).dataInvalid=!1,t._flushProperties())}))},f.prototype._flushProperties=function(){var t=a(this).data,e=a(this).dataPending,n=a(this).dataOld;this._shouldPropertiesChange(t,e,n)&&(a(this).dataPending=null,a(this).dataOld=null,this.propertiesChanged(t,e,n))},f.prototype._shouldPropertiesChange=function(t,e,n){return Boolean(e)},f.prototype._shouldPropertyChange=function(t,e,n){return n!==e&&(n==n||e==e)},b(f,null,[{key:"observedAttributes",get:function(){var t=this;return Object.keys(this.classProperties).map(function(e){return t.propertyNameToAttribute(e)})||[]}},{key:"classProperties",get:function(){if(!u){for(var t=function(){return u||{}},e=null,n=!0;n;)(e=Object.getPrototypeOf(null===e?this:e))&&e.constructor&&e.constructor!==HTMLElement&&e.constructor!==Function&&e.constructor!==Object&&e.constructor!==e.constructor.constructor||(n=!1),Object.hasOwnProperty.call(e,"properties")&&(u=r(t(),l(e.properties)));this.properties&&(u=r(t(),l(this.properties)))}return u}}]),f}(t)};function Y(t,e,n){if(!t||!x.object(t)||x.function(t))return t;if(x.date(t))return new Date(t.getTime());if(x.regexp(t))return new RegExp(t);if(x.array(t))return t.map(Y);if(x.map(t))return new Map(Array.from(t.entries()));if(x.set(t))return new Set(Array.from(t.values()));if(x.object(t)){e.push(t);var r=Object.create(t);n.push(r);var i=function(i){var o=e.findIndex(function(e){return e===t[i]});r[i]=o>-1?n[o]:Y(t[i],e,n)};for(var o in t)i(o);return r}return t}t.classBuilder=w,t.createStorage=E,t.type=x,t.before=M,t.around=D,t.after=L,t.afterThrow=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){try{for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return a.apply(this,n)}catch(e){t.call(this,e)}},writable:!0})},u=0;u<i;u++)a(u);return e}},t.any=_,t.all=A,t.documentReady=function(t){return"loading"===document.readyState?new Promise(function(e){document.addEventListener("DOMContentLoaded",function(){return e(t)})}):Promise.resolve(t)},t.createElement=U,t.elementSiblings=function(t){var e=[];if(t.parentNode&&t.parentNode.firstChild){var n=t.parentNode.firstChild;do{1===n.nodeType&&n!==t&&e.push(n)}while(n.nextSibling&&null!==n.nextSibling&&(n=n.nextSibling))}return e},t.removeElement=function(t){t.parentElement&&t.parentElement.removeChild(t)},t.isDescendantElement=function(t,e){for(;t.parentNode&&(t=t.parentNode)&&t!==e;);return Boolean(t)},t.elementChildren=V,t.templateContent=R,t.microTask=J,t.listenEvent=Z,t.listenEventOnce=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=Z(t,e,function(){i.remove(),n.apply(void 0,arguments)},r);return i},t.pausableEvent=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=!1,o=Z(t,e,function(){i||n.apply(void 0,arguments)},r);return{remove:function(){o.remove()},pause:function(){i=!0},resume:function(){i=!1}}},t.stopEvent=function(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault()},t.customElement=K,t.state=function(t){var e=Object.assign,n=E();return function(t){function r(){return g(this,r),O(this,t.apply(this,arguments))}return m(r,t),r.finalizeClass=function(){t.finalizeClass.call(this),L(function(t){t?this.componentWillRender(this.state):this.componentWillUpdate(this.state,e({},n(this).renderedState))},"_onRender")(this),L(function(t){var e=n(this).renderedState;n(this).renderedState=n(this).state,t?this.componentDidRender(e):this.componentDidUpdate(e)},"_postRender")(this)},r.prototype.construct=function(){t.prototype.construct.call(this),this.setState(this.defaultState)},r.prototype.shouldComponentUpdate=function(t){for(var e in t)if(t[e]!==n(this).state[e])return!0;return!1},r.prototype.setState=function(t){var r=e({},n(this).state,t);(void 0===n(this).state||this.shouldComponentUpdate(r))&&(n(this).state=r,this.initialized&&this.render())},r.prototype.componentWillRender=function(t){},r.prototype.componentDidRender=function(t){},r.prototype.componentWillUpdate=function(t,e){},r.prototype.componentDidUpdate=function(t){},b(r,[{key:"defaultState",get:function(){return{}}},{key:"state",get:function(){return e({},n(this).state)}}]),r}(t)},t.slots=function(t){return function(t){function e(){return g(this,e),O(this,t.apply(this,arguments))}return m(e,t),e.finalizeClass=function(){var e;t.finalizeClass.call(this),M((e=/-([a-z])/g,function(t){var n=this;if(t){var r=V(n);r.forEach(function(t){var r=t.getAttribute?t.getAttribute("slot"):null;if("string"==typeof r&&r.length>0){var i=r.replace(e,function(t){return t[1].toUpperCase()});n.slots[i]=t}else n.slots.default.push(t)}),n.slotsAssigned()}}),"_onRender")(this)},e.prototype.construct=function(){t.prototype.construct.call(this),this.slots={default:[]}},e.prototype.slotsAssigned=function(){},e}(t)},t.events=Q,t.properties=X,t.component=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K();return function(t){function e(){return g(this,e),O(this,t.apply(this,arguments))}return m(e,t),e.prototype.propertiesChanged=function(t,e,n){this.initialized&&this.render()},e}(w(t).with(Q,X))},t.dget=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===e.indexOf("."))return t[e]?t[e]:n;for(var r=e.split("."),i=r.length,o=t,a=0;a<i;a++)if(void 0===(o=o[r[a]]))return void(o=n);return o},t.dset=function(t,e,n){if(-1!==e.indexOf(".")){for(var r=e.split("."),i=r.length-1,o=t,a=0;a<i;a++)void 0===o[r[a]]&&(o[r[a]]={}),o=o[r[a]];o[r[i]]=n}else t[e]=n},t.objectToMap=function(t){return Object.keys(t).reduce(function(e,n){return e.set(n,t[n])},new Map)},t.clone=function(t){return Y(t,[],[])},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

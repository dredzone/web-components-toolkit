!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var n=0,e=0,r=function(t){var r=Date.now();r===n?++e:(n=r,e=0);var o=""+String(r)+String(e);return t&&(o=t+"_"+o),o},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},u=function(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n},c=Object.freeze,a=Object.setPrototypeOf,f=Object.getPrototypeOf,s=Object.hasOwnProperty,l=r("_wrappedMixin"),p=r("_appliedMixin"),h=r("_cachedApplication"),d=function(t){return function(t){return v(t,function(n){return function(t,n){for(;null!==t;){if(g(t,n))return!0;t=f(t)}return!1}(n.prototype,t)?n:t(n)})}(function(t){return v(t,function(n){var e=n[h];e||(e=n[h]=new Map);var r=e.get(t);return r||(r=t(n),e.set(t,r)),r})}(function(t){return v(t,function(n){return function(t,n){var e=n(t);return e.prototype[p]=y(n),e}(n,t)})}(t)))};function v(t,n){return a(n,t),t[l]||(t[l]=t),n}function y(t){return t[l]||t}function g(t,n){return s.call(t,p)&&t[p]===y(n)}var m=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),n=new WeakMap;return function(e){var r=n.get(e);return r||n.set(e,r=t(e)),r}},b=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.some(n)},w=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.every(n)},O=function(t){return function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];return w(e,t)}},j=function(t){return function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];return b(e,t)}},E=Object.prototype.toString,A=["Map","Set","Symbol","Array","Object","String","Date","RegExp","Function","Boolean","Number","Null","Undefined","Arguments","Error","Request","Response","Headers","Blob"],S=A.length,P={},x=/\s([a-zA-Z]+)/,N=function(){for(var t={},n=function(n){var e=A[n].toLowerCase();t[e]=function(t){return C(t)===e},t[e].all=O(t[e]),t[e].any=j(t[e])},e=S;e--;)n(e);return t}(),T=function(t){return C(t)};function C(t){var n=E.call(t);if(!P[n]){var e=n.match(x);Array.isArray(e)&&e.length>1&&(P[n]=e[1].toLowerCase())}return P[n]}var M=function(t){return k(t,[],[])};function k(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return N.undefined(t)||N.null(t)||function(t){return N.boolean(t)||N.number(t)||N.string(t)}(t)||N.function(t)?t:function(t,n){var e={date:function(){return new Date(this.getTime())},regexp:function(){return new RegExp(this)},array:function(){return this.map(k)},map:function(){return new Map(Array.from(this.entries()))},set:function(){return new Set(Array.from(this.values()))},request:function(){return this.clone()},response:function(){return this.clone()},headers:function(){for(var t=new Headers,n=this.entries,e=Array.isArray(n),r=0,n=e?n:n[Symbol.iterator]();;){var o;if(e){if(r>=n.length)break;o=n[r++]}else{if((r=n.next()).done)break;o=r.value}var i=o,u=i[0],c=i[1];t.append(u,c)}return t},blob:function(){return new Blob([this],{type:this.type})},object:function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];n.push(this);var r=Object.create(this);e.push(r);var o=function(o){var i=n.findIndex(function(n){return n===t[o]});r[o]=i>-1?e[i]:k(t[o],n,e)};for(var i in this)o(i);return r}};if(t in e){for(var r=e[t],o=arguments.length,i=Array(o>2?o-2:0),u=2;u<o;u++)i[u-2]=arguments[u];return r.apply(n,i)}return n}(T(t),t,n,e)}var D=function(t,n){return M(n)},_=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{arrayMerge:D};return function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];for(var o=void 0,i=e.length;i>0;--i)o=L(e.pop(),o,t);return o}}();function L(t,n,e){if(N.undefined(n))return M(t);var r=T(t);return r===T(n)?function(t,n,e,r){var o={object:function(){var t={},o={source:Object.keys(n),target:Object.keys(e)};return o.source.concat(o.target).forEach(function(o){t[o]=L(n[o],e[o],r)}),t},array:function(){return r.arrayMerge.apply(null,[n,e])}};if(t in o)return o[t]();return M(e)}(r,t,n,e):M(n)}var R=Object.freeze({Get:"GET",Post:"POST",Put:"PUT",Patch:"PATCH",Delete:"DELETE"}),B=m(),U=function(t){function n(e){i(this,n);var r=u(this,t.call(this,e.status+" for "+e.url));return r.name="HttpError",r.response=e,r}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}(n,t),n}(Error),z=function(){function t(n){i(this,t),B(this).config=n}return t.prototype.catcher=function(n,e){var r=M(B(this).config);return r.catchers.set(n,e),new t(r)},t.prototype.middleware=function(n){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=M(B(this).config);return r.middleware=e?n:r.middleware.concat(n),new t(r)},t.prototype.url=function(n){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=M(B(this).config);return r.url=e?n:r.url+n,new t(r)},t.prototype.options=function(n){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=M(B(this).config);return r.options=e?_(r.options,n):Object.assign({},n),new t(r)},t.prototype.headers=function(n){var e=M(B(this).config);return e.options.headers=_(e.options.headers,n),new t(e)},t.prototype.accept=function(t){return this.headers({Accept:t})},t.prototype.content=function(t){return this.headers({"Content-Type":t})},t.prototype.mode=function(t){return this.options({mode:t})},t.prototype.credentials=function(t){return this.options({credentials:t})},t.prototype.cache=function(t){return this.options({cache:t})},t.prototype.integrity=function(t){return this.options({integrity:t})},t.prototype.keepalive=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.options({keepalive:t})},t.prototype.redirect=function(t){return this.options({redirect:t})},t.prototype.body=function(n){var e=M(B(this).config);return e.options.body=n,new t(e)},t.prototype.auth=function(t){return this.headers({Authorization:t})},t.prototype.json=function(t){return this.content("application/json").body(JSON.stringify(t))},t.prototype.form=function(t){return this.body((n=t,Object.keys(n).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent("object"===o(n[t])?JSON.stringify(n[t]):n[t])}).join("&"))).content("application/x-www-form-urlencoded");var n},t.prototype.method=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:R.Get;return this.options({method:t})},t.prototype.get=function(){return this.method(R.Get).send()},t.prototype.post=function(){return this.method(R.Post).send()},t.prototype.insert=function(){return this.method(R.Put).send()},t.prototype.update=function(){return this.method(R.Patch).send()},t.prototype.delete=function(){return this.method(R.Delete).send()},t.prototype.send=function(){var t,n=this,e=B(this).config,r=e.url,o=e.options,i=e.middleware,u=e.resolvers,c=e.catchers,a=(t=i,function(n){return 0===t.length?n:1===t.length?t[0](n):t.reduceRight(function(e,r,o){return o===t.length-2?r(e(n)):r(e)})})(fetch)(r,o).then(function(t){if(!t.ok)throw new U(t);return t}),f=function(t){return t.catch(function(t){if(c.has(t.status))return c.get(t.status)(t,n);if(c.has(t.name))return c.get(t.name)(t,n);throw t})},s=function(t){return function(n){return f(t?a.then(function(n){return n&&n[t]()}).then(function(t){return t&&n&&n(t)||t}):a.then(function(t){return t&&n&&n(t)||t}))}},l={res:s(null),json:s("json")};return u.reduce(function(t,n){return n(t,o)},l)},t}();var H=0,G=0,J=[],I=0,q=document.createTextNode("");new MutationObserver(function(){for(var t=J.length,n=0;n<t;n++){var e=J[n];if(e&&"function"==typeof e)try{e()}catch(t){setTimeout(function(){throw t})}}J.splice(0,t),G+=t}).observe(q,{characterData:!0});var F=Object.freeze({run:function(t){return q.textContent=String(I++),J.push(t),H++},cancel:function(t){var n=t-G;if(n>=0){if(!J[n])throw new Error("invalid async handle: "+t);J[n]=null}}}),V=function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var n=document.createDocumentFragment(),e=t.childNodes,r=0;r<e.length;r++)n.appendChild(e[r].cloneNode(!0));return n},W=function(t,n,e){return function(t,n,e,r){if(n.indexOf(",")>-1){var o=n.split(/\s*,\s*/),i=o.map(function(n){return Z(t,n,e,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=i.pop();)t.remove()}}}return Z(t,n,e,r)}(t,n,e,arguments.length>3&&void 0!==arguments[3]&&arguments[3])};function Z(t,n,e,r){if(t.addEventListener)return t.addEventListener(n,e,r),{remove:function(){this.remove=function(){},t.removeEventListener(n,e,r)}};throw new Error("target must be an event emitter")}t.classBuilder=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function t(){i(this,t)};return c({with:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];return e.map(function(t){return d(t)}).reduce(function(t,n){return n(t)},t)}})},t.createStorage=m,t.http=function(){return new z(Object.assign({},{url:"",options:{},catchers:new Map,resolvers:[],middleware:[]}))},t.is=N,t.microTask=F,t.documentReady=function(t){return"loading"===document.readyState?new Promise(function(n){document.addEventListener("DOMContentLoaded",function(){return n(t)})}):Promise.resolve(t)},t.createElement=function(t){var n=document.createElement("template");n.innerHTML=t.trim();var e=V(n);if(e&&e.firstChild)return e.firstChild;throw new Error("Unable to createElement for "+t)},t.elementSiblings=function(t){var n=[];if(t.parentNode&&t.parentNode.firstChild){var e=t.parentNode.firstChild;do{1===e.nodeType&&e!==t&&n.push(e)}while(e.nextSibling&&null!==e.nextSibling&&(e=e.nextSibling))}return n},t.removeElement=function(t){t.parentElement&&t.parentElement.removeChild(t)},t.isDescendantElement=function(t,n){for(;t.parentNode&&(t=t.parentNode)&&t!==n;);return Boolean(t)},t.elementChildren=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Node.ELEMENT_NODE,e=t.childNodes,r=[];if(e&&e.length>0)for(var o=e.length;o--;)e[o].nodeType===n&&r.unshift(e[o]);return r},t.templateContent=V,t.listenEvent=W,t.listenEventOnce=function(t,n,e){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=W(t,n,function(){o.remove(),e.apply(void 0,arguments)},r);return o},t.pausableEvent=function(t,n,e){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=!1,i=W(t,n,function(){o||e.apply(void 0,arguments)},r);return{remove:function(){i.remove()},pause:function(){o=!0},resume:function(){o=!1}}},t.adviceBefore=function(t){for(var n=arguments.length,e=Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return function(n){for(var r=n.prototype,o=e.length,i=Object.defineProperty,u=function(n){var o=e[n],u=r[o];i(r,o,{value:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];return t.apply(this,e),u.apply(this,e)},writable:!0})},c=0;c<o;c++)u(c);return n}},t.adviceAround=function(t){for(var n=arguments.length,e=Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return function(n){for(var r=n.prototype,o=e.length,i=Object.defineProperty,u=function(n){var o=e[n],u=r[o];i(r,o,{value:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];e.unshift(u),t.apply(this,e)},writable:!0})},c=0;c<o;c++)u(c);return n}},t.adviceAfter=function(t){for(var n=arguments.length,e=Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return function(n){for(var r=n.prototype,o=e.length,i=Object.defineProperty,u=function(n){var o=e[n],u=r[o];i(r,o,{value:function(){for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];var o=u.apply(this,e);return t.apply(this,e),o},writable:!0})},c=0;c<o;c++)u(c);return n}},t.adviceAfterThrow=function(t){for(var n=arguments.length,e=Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return function(n){for(var r=n.prototype,o=e.length,i=Object.defineProperty,u=function(n){var o=e[n],u=r[o];i(r,o,{value:function(){try{for(var n=arguments.length,e=Array(n),r=0;r<n;r++)e[r]=arguments[r];return u.apply(this,e)}catch(n){t.call(this,n)}},writable:!0})},c=0;c<o;c++)u(c);return n}},t.any=b,t.all=w,t.dget=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===n.indexOf("."))return t[n]?t[n]:e;for(var r=n.split("."),o=r.length,i=t,u=0;u<o;u++)if(void 0===(i=i[r[u]]))return void(i=e);return i},t.dset=function(t,n,e){if(-1!==n.indexOf(".")){for(var r=n.split("."),o=r.length-1,i=t,u=0;u<o;u++)void 0===i[r[u]]&&(i[r[u]]={}),i=i[r[u]];i[r[o]]=e}else t[n]=e},t.clone=M,t.merge=_,t.jsonClone=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t,n){return n};return JSON.parse(JSON.stringify(t),n)},t.objectToMap=function(t){return Object.keys(t).reduce(function(n,e){return n.set(e,t[e])},new Map)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

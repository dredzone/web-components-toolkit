!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var e=0,n=0,r=function(t){var r=Date.now();r===e?++n:(e=r,n=0);var i=""+String(r)+String(n);return t&&(i=t+"_"+i),i},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},s=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},c=Object.freeze,f=Object.setPrototypeOf,l=Object.getPrototypeOf,p=Object.hasOwnProperty,h=function(t){return function(t){return g(t,function(e){return function(t,e){for(;null!==t;){if(O(t,e))return!0;t=l(t)}return!1}(e.prototype,t)?e:t(e)})}(function(t){return g(t,function(e){var n=e[b];n||(n=e[b]=new Map);var r=n.get(t);return r||(r=t(e),n.set(t,r)),r})}(function(t){return g(t,function(e){return function(t,e){var n=e(t);return n.prototype[v]=m(e),n}(e,t)})}(t)))},d=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return function t(){o(this,t)}}();return c({with:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.map(function(t){return h(t)}).reduce(function(t,e){return e(t)},t)}})},y=r("_wrappedMixin"),v=r("_appliedMixin"),b=r("_cachedApplication");function g(t,e){return f(e,t),t[y]||(t[y]=t),e}function m(t){return t[y]||t}function O(t,e){return p.call(t,v)&&t[v]===m(e)}var P=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),e=new WeakMap;return function(n){var r=e.get(n);return r||e.set(n,r=t(n)),r}},_=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.every(e)},w=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.some(e)},E=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return _(n,t)}},S=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return w(n,t)}},A=Object.prototype.toString,j="Map Set Symbol Array Object String Date RegExp Function Boolean Number Null Undefined Arguments Error".split(" "),C=j.length,z={},T=/\s([a-zA-Z]+)/,N=function(){for(var t={},e=function(e){var n=j[e].toLowerCase();t[n]=function(t){return k(t)===n},t[n].all=E(t[n]),t[n].any=S(t[n])},n=C;n--;)e(n);return t}(),x=function(t){return k(t)};function k(t){var e=A.call(t);if(!z[e]){var n=e.match(T);Array.isArray(n)&&n.length>1&&(z[e]=n[1].toLowerCase())}return z[e]}var M=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.apply(this,n),a.apply(this,n)},writable:!0})},u=0;u<i;u++)a(u);return e}},D=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.unshift(a),t.apply(this,n)},writable:!0})},u=0;u<i;u++)a(u);return e}},L=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=a.apply(this,n);return t.apply(this,n),i},writable:!0})},u=0;u<i;u++)a(u);return e}},R=!["undefined"==typeof window?"undefined":i(window),"undefined"==typeof document?"undefined":i(document)].includes("undefined"),B=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return function(){if(R)return t.apply(void 0,arguments);if(e)throw new Error(t.name+" for browser use only")}},U=B(function(t){return"loading"===document.readyState?new Promise(function(e){document.addEventListener("DOMContentLoaded",function(){return e(t)})}):Promise.resolve(t)}),V=B(function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var e=document.createDocumentFragment(),n=t.childNodes,r=0;r<n.length;r++)e.appendChild(n[r].cloneNode(!0));return e}),H=B(function(t){var e=document.createElement("template");e.innerHTML=t.trim();var n=V(e);if(n&&n.firstChild)return n.firstChild;throw new Error("Unable to createElement for "+t)}),I=B(function(t){var e=[];if(t.parentNode&&t.parentNode.firstChild){var n=t.parentNode.firstChild;do{1===n.nodeType&&n!==t&&e.push(n)}while(n.nextSibling&&null!==n.nextSibling&&(n=n.nextSibling))}return e}),W=B(function(t){t.parentElement&&t.parentElement.removeChild(t)}),F=B(function(t,e){for(;t.parentNode&&(t=t.parentNode)&&t!==e;);return Boolean(t)}),J=B(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Node.ELEMENT_NODE,n=t.childNodes,r=[];if(n&&n.length>0)for(var i=n.length;i--;)n[i].nodeType===e&&r.unshift(n[i]);return r}),K=0,Z=0,G=[],$=0,q=document.createTextNode("");new MutationObserver(function(){for(var t=G.length,e=0;e<t;e++){var n=G[e];if(n&&"function"==typeof n)try{n()}catch(t){setTimeout(function(){throw t})}}G.splice(0,t),Z+=t}).observe(q,{characterData:!0});var Q={run:function(t){return q.textContent=String($++),G.push(t),K++},cancel:function(t){var e=t-Z;if(e>=0){if(!G[e])throw new Error("invalid async handle: "+t);G[e]=null}}};var X=B(function(t,e,n){return function(t,e,n,r){if(e.indexOf(",")>-1){var i=e.split(/\s*,\s*/),o=i.map(function(e){return Y(t,e,n,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=o.pop();)t.remove()}}}return Y(t,e,n,r)}(t,e,n,arguments.length>3&&void 0!==arguments[3]&&arguments[3])});function Y(t,e,n,r){if(t.addEventListener)return t.addEventListener(e,n,r),{remove:function(){this.remove=function(){},t.removeEventListener(e,n,r)}};throw new Error("target must be an event emitter")}var tt=B(function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=X(t,e,function(){i.remove(),n.apply(void 0,arguments)},r);return i}),et=B(function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=!1,o=X(t,e,function(){i||n.apply(void 0,arguments)},r);return{remove:function(){o.remove()},pause:function(){i=!0},resume:function(){i=!1}}}),nt=B(function(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault()}),rt=document.defaultView;if("function"!=typeof rt.HTMLElement){var it=function(){};it.prototype=rt.HTMLElement.prototype,rt.HTMLElement=it}var ot=B(function(t){var e=["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"],n=Object.defineProperty,r=Object.hasOwnProperty,i=P();return t||(t=function(t){function e(){return o(this,e),s(this,t.apply(this,arguments))}return u(e,t),e}(rt.HTMLElement)),function(t){function c(){o(this,c);for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=s(this,t.call.apply(t,[this].concat(n)));return i.construct(),i}return u(c,t),c.finalizeClass=function(){},c.define=function(t){var o=customElements;if(!o.get(t)){var a=this.prototype;e.forEach(function(t){r.call(a,t)||n(a,t,{value:function(){},configurable:!0});var e=t.substring(0,t.length-"callback".length),i=a[t];n(a,t,{value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];this[e].apply(this,n),i.apply(this,n)},configurable:!0})}),this.finalizeClass(),D(function(t){i(this).connected=!0,i(this).initialized||(i(this).initialized=!0,t.call(this),this.render())},"connected")(this),D(function(t){var e=this;i(e).connected=!1,Q.run(function(){!i(e).connected&&i(e).initialized&&(i(e).initialized=!1,t.call(e))})},"disconnected")(this),D(function(t){var e=this;if(!i(e).rendering){var n=void 0===i(e).rendering;i(e).rendering=!0,Q.run(function(){i(e).rendering&&(i(e).rendering=!1,e._onRender(n),t.call(e),e._postRender(n))})}},"render")(this),o.define(t,this)}},a(c,[{key:"initialized",get:function(){return!0===i(this).initialized}}],[{key:"observedAttributes",get:function(){return[]}}]),c.prototype.construct=function(){},c.prototype.attributeChanged=function(t,e,n){},c.prototype.connected=function(){},c.prototype.disconnected=function(){},c.prototype.adopted=function(){},c.prototype.render=function(){},c.prototype._onRender=function(){},c.prototype._postRender=function(){},c}(t)}),at=B(function(t){var e=Object.assign,n=P();return function(t){function r(){return o(this,r),s(this,t.apply(this,arguments))}return u(r,t),r.finalizeClass=function(){t.finalizeClass.call(this),L(function(t){t?this.componentWillRender(this.state):this.componentWillUpdate(this.state,e({},n(this).renderedState))},"_onRender")(this),L(function(t){var e=n(this).renderedState;n(this).renderedState=n(this).state,t?this.componentDidRender(e):this.componentDidUpdate(e)},"_postRender")(this)},r.prototype.construct=function(){t.prototype.construct.call(this),this.setState(this.defaultState)},r.prototype.shouldComponentUpdate=function(t){for(var e in t)if(t[e]!==n(this).state[e])return!0;return!1},r.prototype.setState=function(t){var r=e({},n(this).state,t);(void 0===n(this).state||this.shouldComponentUpdate(r))&&(n(this).state=r,this.initialized&&this.render())},r.prototype.componentWillRender=function(t){},r.prototype.componentDidRender=function(t){},r.prototype.componentWillUpdate=function(t,e){},r.prototype.componentDidUpdate=function(t){},a(r,[{key:"defaultState",get:function(){return{}}},{key:"state",get:function(){return e({},n(this).state)}}]),r}(t)}),ut=B(function(t){return function(t){function e(){return o(this,e),s(this,t.apply(this,arguments))}return u(e,t),e.finalizeClass=function(){var e;t.finalizeClass.call(this),M((e=/-([a-z])/g,function(t){var n=this;if(t){var r=J(n);r.forEach(function(t){var r=t.getAttribute?t.getAttribute("slot"):null;if("string"==typeof r&&r.length>0){var i=r.replace(e,function(t){return t[1].toUpperCase()});n.slots[i]=t}else n.slots.default.push(t)}),n.slotsAssigned()}}),"_onRender")(this)},e.prototype.construct=function(){t.prototype.construct.call(this),this.slots={default:[]}},e.prototype.slotsAssigned=function(){},e}(t)}),st=B(function(t){var e=Object.assign,n=P(function(){return{handlers:[]}}),r={bubbles:!1,cancelable:!1};return function(t){function i(){return o(this,i),s(this,t.apply(this,arguments))}return u(i,t),i.finalizeClass=function(){t.finalizeClass.call(this),L(function(){this.off()},"disconnected")(this)},i.prototype.handleEvent=function(t){var e="on"+t.type;"function"==typeof this[e]&&this[e](t)},i.prototype.on=function(t,e,n){this.own(X(this,t,e,n))},i.prototype.dispatch=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.dispatchEvent(new CustomEvent(t,e(r,{detail:n})))},i.prototype.off=function(){n(this).handlers.forEach(function(t){t.remove()})},i.prototype.own=function(){for(var t=this,e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];r.forEach(function(e){n(t).handlers.push(e)})},i}(t)}),ct=B(function(t){var e=Object.defineProperty,n=Object.keys,r=Object.assign,c={},f={},l=P(),p=void 0,h={},d={};function y(t){var e,n={};for(var r in t)if(Object.hasOwnProperty.call(t,r)){var i=t[r];n[r]="function"==typeof i?{type:i}:i,(e=n[r]).hasObserver="observer"in e,e.isObserverString=e.hasObserver&&"string"==typeof e.observer,e.isString=e.type===String,e.isNumber=e.type===Number,e.isBoolean=e.type===Boolean,e.isObject=e.type===Object,e.isArray=e.type===Array,e.isDate=e.type===Date,e.notify="notify"in e,e.readOnly="readOnly"in e&&e.readOnly,e.reflectToAttribute="reflectToAttribute"in e?e.reflectToAttribute:e.isString||e.isNumber||e.isBoolean}return n}return function(t){function v(){return o(this,v),s(this,t.apply(this,arguments))}return u(v,t),v.finalizeClass=function(){t.finalizeClass.call(this),M(function(){Object.keys(l(this).initializeProperties).length>0&&(r(this,l(this).initializeProperties),l(this).initializeProperties={}),this._flushProperties()},"connected")(this),M(function(t,e,n){e!==n&&this._attributeToProperty(t,n)},"attributeChanged")(this),M(function(t,e,n){var r=this,i=this;Object.keys(e).forEach(function(t){var o=i.constructor.classProperties[t],a=o.notify,u=o.hasObserver,s=o.reflectToAttribute,c=o.isObserverString,f=o.observer;s&&i._propertyToAttribute(t,e[t]),u&&c?r[f](e[t],n[t]):u&&"function"==typeof f&&f.apply(i,[e[t],n[t]]),a&&i.dispatchEvent(new CustomEvent(t+"-changed",{detail:{newValue:e[t],oldValue:n[t]}}))})},"propertiesChanged")(this),this.createProperties()},v.attributeToPropertyName=function(t){var e=c[t];if(!e){e=t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()}),c[t]=e}return e},v.propertyNameToAttribute=function(t){var e=f[t];if(!e){e=t.replace(/([A-Z])/g,"-$1").toLowerCase(),f[t]=e}return e},v.createProperties=function(){var t=this.prototype,e=this.classProperties;n(e).forEach(function(n){if(Object.hasOwnProperty.call(t,n))throw new Error("Unable to setup property '"+n+"', property already exists");var r=e[n].value;void 0!==r&&(d[n]=r),t._createPropertyAccessor(n,e[n].readOnly)})},v.prototype.construct=function(){t.prototype.construct.call(this),l(this).data={},l(this).serializing=!1,l(this).initializeProperties={},l(this).dataPending=null,l(this).dataOld=null,l(this).dataInvalid=!1,this._initializeProtoProperties(),this._initializeProperties()},v.prototype.propertiesChanged=function(t,e,n){},v.prototype._createPropertyAccessor=function(t,n){h[t]||(h[t]=!0,e(this,t,{enumerable:!0,configurable:!0,get:function(){return this._getProperty(t)},set:n?function(){}:function(e){this._setProperty(t,e)}}))},v.prototype._getProperty=function(t){return l(this).data[t]},v.prototype._setProperty=function(t,e){this._isValidPropertyValue(t,e)?this._setPendingProperty(t,e)&&this._invalidateProperties():console.log("invalid value "+e+" for property "+t+" of\n\t\t\t\t\ttype "+this.constructor.classProperties[t].type.name)},v.prototype._initializeProtoProperties=function(){var t=this;Object.keys(d).forEach(function(e){var n="function"==typeof d[e]?d[e].call(t):d[e];t._setProperty(e,n)})},v.prototype._initializeProperties=function(){var t=this;Object.keys(h).forEach(function(e){Object.hasOwnProperty.call(t,e)&&(l(t).initializeProperties[e]=t[e],delete t[e])})},v.prototype._attributeToProperty=function(t,e){if(!l(this).serializing){var n=this.constructor.attributeToPropertyName(t);this[n]=this._deserializeValue(n,e)}},v.prototype._isValidPropertyValue=function(t,e){var n=this.constructor.classProperties[t].type;return"object"===(void 0===e?"undefined":i(e))?e instanceof n:""+(void 0===e?"undefined":i(e))===n.name.toLowerCase()},v.prototype._propertyToAttribute=function(t,e){l(this).serializing=!0;var n=this.constructor.propertyNameToAttribute(t);void 0===(e=this._serializeValue(t,e))?this.removeAttribute(n):this.getAttribute(n)!==e&&this.setAttribute(n,e),l(this).serializing=!1},v.prototype._deserializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isNumber,i=n.isArray,o=n.isBoolean,a=n.isDate,u=n.isString,s=n.isObject;return o?e=null!==e&&void 0!==e:r?e=null===e||void 0===e?0:Number(e):u?e=null===e||void 0===e?"":String(e):s||i?e=null===e||void 0===e?i?null:{}:JSON.parse(e):a&&(e=null===e||void 0===e?"":new Date(e)),e},v.prototype._serializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isBoolean,i=n.isObject,o=n.isArray;return r?e?"":void 0:i||o?JSON.stringify(e):e=e?e.toString():void 0},v.prototype._setPendingProperty=function(t,e){var n=l(this).data[t],r=this._shouldPropertyChange(t,e,n);return r&&(l(this).dataPending||(l(this).dataPending={},l(this).dataOld={}),!l(this).dataOld||t in l(this).dataOld||(l(this).dataOld[t]=n),l(this).data[t]=e,l(this).dataPending[t]=e),r},v.prototype._invalidateProperties=function(){var t=this;l(this).dataInvalid||(l(this).dataInvalid=!0,Q.run(function(){l(t).dataInvalid&&(l(t).dataInvalid=!1,t._flushProperties())}))},v.prototype._flushProperties=function(){var t=l(this).data,e=l(this).dataPending,n=l(this).dataOld;this._shouldPropertiesChange(t,e,n)&&(l(this).dataPending=null,l(this).dataOld=null,this.propertiesChanged(t,e,n))},v.prototype._shouldPropertiesChange=function(t,e,n){return Boolean(e)},v.prototype._shouldPropertyChange=function(t,e,n){return n!==e&&(n==n||e==e)},a(v,null,[{key:"observedAttributes",get:function(){var t=this;return Object.keys(this.classProperties).map(function(e){return t.propertyNameToAttribute(e)})||[]}},{key:"classProperties",get:function(){if(!p){for(var t=function(){return p||{}},e=null,n=!0;n;)(e=Object.getPrototypeOf(null===e?this:e))&&e.constructor&&e.constructor!==HTMLElement&&e.constructor!==Function&&e.constructor!==Object&&e.constructor!==e.constructor.constructor||(n=!1),Object.hasOwnProperty.call(e,"properties")&&(p=r(t(),y(e.properties)));this.properties&&(p=r(t(),y(this.properties)))}return p}}]),v}(t)}),ft=B(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ot();return function(t){function e(){return o(this,e),s(this,t.apply(this,arguments))}return u(e,t),e.prototype.propertiesChanged=function(t,e,n){this.initialized&&this.render()},e}(d(t).with(st,ct))}),lt=function(t,e,n){if(-1!==e.indexOf(".")){for(var r=e.split("."),i=r.length-1,o=t,a=0;a<i;a++)N.undefined(o[r[a]])&&(o[r[a]]={}),o=o[r[a]];o[r[i]]=n}else t[e]=n},pt=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===e.indexOf("."))return t[e]?t[e]:n;for(var r=e.split("."),i=r.length,o=t,a=0;a<i;a++)if(o=o[r[a]],N.undefined(o))return void(o=n);return o},ht=Object.keys,dt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t,e){return e};return JSON.parse(JSON.stringify(t),e)};function yt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(!t||!N.object(t)||N.function(t))return t;var r=x(t);return r in vt?vt[r].apply(t,[e,n]):t}var vt=Object.freeze({date:function(){return new Date(this.getTime())},regexp:function(){return new RegExp(this)},array:function(){return this.map(yt)},map:function(){return new Map(Array.from(this.entries()))},set:function(){return new Set(Array.from(this.values()))},object:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];e.push(this);var r=Object.create(this);n.push(r);var i=function(i){var o=e.findIndex(function(e){return e===t[i]});r[i]=o>-1?n[o]:yt(t[i],e,n)};for(var o in this)i(o);return r}});t.classBuilder=d,t.createStorage=P,t.type=N,t.eventHubFactory=function(){var t=new Map,e=0;return{publish:function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return t.forEach(function(t){(t.get(e)||[]).forEach(function(t){t.apply(void 0,r)})}),this},createSubscriber:function(){var n=e++;return{on:function(e,r){t.has(n)||t.set(n,new Map);var i=t.get(n);return i.has(e)||i.set(e,[]),i.get(e).push(r),this},off:function(e){return t.get(n).delete(e),this},destroy:function(){t.delete(n)}}}}},t.model=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function t(){o(this,t)},e=P(),n=0;return function(t){function i(){o(this,i);for(var e=arguments.length,n=Array(e),a=0;a<e;a++)n[a]=arguments[a];var u=s(this,t.call.apply(t,[this].concat(n)));return u._stateKey=r("_state"),u._subscribers=new Map,u._setState(u.defaultState),u}return u(i,t),i.prototype.get=function(t){return this._getState(t)},i.prototype.set=function(t,e){var n=void 0,r=void 0;!N.string(t)&&N.undefined(e)?r=t:(r=e,n=t);var i=this._getState(),o=dt(i);return n?lt(o,n,r):o=r,this._setState(o),this._notifySubscribers(n,o,i),this},i.prototype.createSubscriber=function(){var t=n++,e=this;return{on:function(){for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];return e._subscribe.apply(e,[t].concat(r)),this},destroy:this._destroySubscriber.bind(this,t)}},i.prototype.createPropertyBinder=function(t){if(!t)throw new Error("createPropertyBinder(context) - context must be object");var e=this;return{addBindings:function(n){return Array.isArray(n[0])||(n=[n]),n.forEach(function(n){e._subscribe(t,n[0],function(e){lt(t,n[1],e)})}),this},destroy:this._destroySubscriber.bind(this,t)}},i.prototype._getState=function(t){return dt(t?pt(e[this._stateKey],t):e[this._stateKey])},i.prototype._setState=function(t){e[this._stateKey]=t},i.prototype._subscribe=function(t,e,n){var r=this._subscribers.get(t)||[];r.push({accessor:e,cb:n}),this._subscribers.set(t,r)},i.prototype._destroySubscriber=function(t){this._subscribers.delete(t)},i.prototype._notifySubscribers=function(t,e,n){this._subscribers.forEach(function(r){r.forEach(function(r){var i=r.accessor,o=r.cb;if(0!==i.indexOf(t)){if(i.indexOf("*")>-1){var a=i.replace(".*","").replace("*","");if(0===t.indexOf(a))return void o(pt(e,a),pt(n,a))}}else o(pt(e,i),pt(n,i))})})},a(i,[{key:"defaultState",get:function(){return{}}}]),i}(t)},t.before=M,t.around=D,t.after=L,t.afterThrow=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){try{for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return a.apply(this,n)}catch(e){t.call(this,e)}},writable:!0})},u=0;u<i;u++)a(u);return e}},t.all=_,t.any=w,t.documentReady=U,t.createElement=H,t.elementSiblings=I,t.removeElement=W,t.isDescendantElement=F,t.elementChildren=J,t.templateContent=V,t.microTask=Q,t.listenEvent=X,t.listenEventOnce=tt,t.pausableEvent=et,t.stopEvent=nt,t.customElement=ot,t.state=at,t.slots=ut,t.events=st,t.properties=ct,t.component=ft,t.dSet=lt,t.dGet=pt,t.objectToMap=function(t){return ht(t).reduce(function(e,n){return e.set(n,t[n])},new Map)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91bmlxdWUtaWQuanMiLCIuLi8uLi9saWIvY2xhc3MtYnVpbGRlci5qcyIsIi4uLy4uL2xpYi9jcmVhdGUtc3RvcmFnZS5qcyIsIi4uLy4uL2xpYi9hcnJheS5qcyIsIi4uLy4uL2xpYi90eXBlLmpzIiwiLi4vLi4vbGliL2V2ZW50LWh1Yi5qcyIsIi4uLy4uL2xpYi9hZHZpY2UvYmVmb3JlLmpzIiwiLi4vLi4vbGliL2FkdmljZS9hcm91bmQuanMiLCIuLi8uLi9saWIvYWR2aWNlL2FmdGVyLmpzIiwiLi4vLi4vbGliL2Vudmlyb25tZW50LmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvZG9jdW1lbnQtcmVhZHkuanMiLCIuLi8uLi9saWIvYnJvd3Nlci90ZW1wbGF0ZS1jb250ZW50LmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvY3JlYXRlLWVsZW1lbnQuanMiLCIuLi8uLi9saWIvYnJvd3Nlci9lbGVtZW50LXNpYmxpbmdzLmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvcmVtb3ZlLWVsZW1lbnQuanMiLCIuLi8uLi9saWIvYnJvd3Nlci9pcy1kZXNjZW5kYW50LWVsZW1lbnQuanMiLCIuLi8uLi9saWIvYnJvd3Nlci9lbGVtZW50LWNoaWxkcmVuLmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvbWljcm90YXNrLmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvbGlzdGVuLWV2ZW50LmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvbGlzdGVuLWV2ZW50LW9uY2UuanMiLCIuLi8uLi9saWIvYnJvd3Nlci9wYXVzYWJsZS1ldmVudC5qcyIsIi4uLy4uL2xpYi9icm93c2VyL3N0b3AtZXZlbnQuanMiLCIuLi8uLi9saWIvYnJvd3Nlci93ZWItY29tcG9uZW50cy9jdXN0b20tZWxlbWVudC1taXhpbi5qcyIsIi4uLy4uL2xpYi9icm93c2VyL3dlYi1jb21wb25lbnRzL3N0YXRlLW1peGluLmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvd2ViLWNvbXBvbmVudHMvc2xvdHMtbWl4aW4uanMiLCIuLi8uLi9saWIvYnJvd3Nlci93ZWItY29tcG9uZW50cy9ldmVudHMtbWl4aW4uanMiLCIuLi8uLi9saWIvYnJvd3Nlci93ZWItY29tcG9uZW50cy9wcm9wZXJ0aWVzLW1peGluLmpzIiwiLi4vLi4vbGliL2Jyb3dzZXIvd2ViLWNvbXBvbmVudHMvY29tcG9uZW50LW1peGluLmpzIiwiLi4vLi4vbGliL29iamVjdC5qcyIsIi4uLy4uL2xpYi9jbG9uZS5qcyIsIi4uLy4uL2xpYi9tb2RlbC5qcyIsIi4uLy4uL2xpYi9hZHZpY2UvYWZ0ZXItdGhyb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICovXG5cbmxldCBwcmV2VGltZUlkID0gMDtcbmxldCBwcmV2VW5pcXVlSWQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCAocHJlZml4KSA9PiB7XG4gIGxldCBuZXdVbmlxdWVJZCA9IERhdGUubm93KCk7XG4gIGlmIChuZXdVbmlxdWVJZCA9PT0gcHJldlRpbWVJZCkge1xuICAgICsrcHJldlVuaXF1ZUlkO1xuICB9IGVsc2Uge1xuICAgIHByZXZUaW1lSWQgPSBuZXdVbmlxdWVJZDtcbiAgICBwcmV2VW5pcXVlSWQgPSAwO1xuICB9XG5cbiAgbGV0IHVuaXF1ZUlkID0gYCR7U3RyaW5nKG5ld1VuaXF1ZUlkKX0ke1N0cmluZyhwcmV2VW5pcXVlSWQpfWA7XG4gIGlmIChwcmVmaXgpIHtcbiAgICB1bmlxdWVJZCA9IGAke3ByZWZpeH1fJHt1bmlxdWVJZH1gO1xuICB9XG4gIHJldHVybiB1bmlxdWVJZDtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCB1bmlxdWVJZCBmcm9tICcuL3VuaXF1ZS1pZC5qcyc7XG5cbmNvbnN0IHsgZnJlZXplLCBzZXRQcm90b3R5cGVPZiwgZ2V0UHJvdG90eXBlT2YsIGhhc093blByb3BlcnR5IH0gPSBPYmplY3Q7XG5cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1peGluID0gKG1peGluKSA9PiBkZWR1cGVNaXhpbihjYWNoZU1peGluKGRlY2xhcmVNaXhpbihtaXhpbikpKTtcblxuZXhwb3J0IGRlZmF1bHQgKEN0b3IgPSBjbGFzcyB7fSkgPT5cbiAgZnJlZXplKHtcbiAgICB3aXRoKC4uLm1peGlucykge1xuICAgICAgcmV0dXJuIG1peGlucy5tYXAoKG1peGluKSA9PiBjcmVhdGVNaXhpbihtaXhpbikpLnJlZHVjZSgoaywgbSkgPT4gbShrKSwgQ3Rvcik7XG4gICAgfVxuICB9KTtcblxuLy8gdXNlZCBieSB3cmFwKCkgYW5kIHVud3JhcCgpXG5jb25zdCB3cmFwcGVkTWl4aW5LZXkgPSB1bmlxdWVJZCgnX3dyYXBwZWRNaXhpbicpO1xuXG4vLyB1c2VkIGJ5IGFwcGx5TWl4aW4oKSBhbmQgaXNBcHBsaWNhdGlvbk9mKClcbmNvbnN0IGFwcGxpZWRNaXhpbktleSA9IHVuaXF1ZUlkKCdfYXBwbGllZE1peGluJyk7XG5cbi8vIHVzZWQgYnkgY2FjaGUgbWl4aW4gZGVjb3JhdG9yXG5jb25zdCBjYWNoZWRBcHBsaWNhdGlvbktleSA9IHVuaXF1ZUlkKCdfY2FjaGVkQXBwbGljYXRpb24nKTtcblxuLyoqXG4gKiBTZXRzIHVwIHRoZSBmdW5jdGlvbiBgbWl4aW5gIHRvIGJlIHdyYXBwZWQgYnkgdGhlIGZ1bmN0aW9uIGB3cmFwcGVyYCwgd2hpbGVcbiAqIGFsbG93aW5nIHByb3BlcnRpZXMgb24gYG1peGluYCB0byBiZSBhdmFpbGFibGUgdmlhIGB3cmFwcGVyYCwgYW5kIGFsbG93aW5nXG4gKiBgd3JhcHBlcmAgdG8gYmUgdW53cmFwcGVkIHRvIGdldCB0byB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gKlxuICogYHdyYXBgIGRvZXMgdHdvIHRoaW5nczpcbiAqICAgMS4gU2V0cyB0aGUgcHJvdG90eXBlIG9mIGBtaXhpbmAgdG8gYHdyYXBwZXJgIHNvIHRoYXQgcHJvcGVydGllcyBzZXQgb25cbiAqICAgICAgYG1peGluYCBpbmhlcml0ZWQgYnkgYHdyYXBwZXJgLlxuICogICAyLiBTZXRzIGEgc3BlY2lhbCBwcm9wZXJ0eSBvbiBgbWl4aW5gIHRoYXQgcG9pbnRzIGJhY2sgdG8gYG1peGluYCBzbyB0aGF0XG4gKiAgICAgIGl0IGNhbiBiZSByZXRyZWl2ZWQgZnJvbSBgd3JhcHBlcmBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1peGluIEEgbWl4aW4gZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgQSBmdW5jdGlvbiB0aGF0IHdyYXBzIHtAbGluayBtaXhpbn1cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBgd3JhcHBlcmBcbiAqL1xuZnVuY3Rpb24gd3JhcChtaXhpbiwgd3JhcHBlcikge1xuICBzZXRQcm90b3R5cGVPZih3cmFwcGVyLCBtaXhpbik7XG4gIGlmICghbWl4aW5bd3JhcHBlZE1peGluS2V5XSkge1xuICAgIG1peGluW3dyYXBwZWRNaXhpbktleV0gPSBtaXhpbjtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuLyoqXG4gKiBVbndyYXBzIHRoZSBmdW5jdGlvbiBgd3JhcHBlcmAgdG8gcmV0dXJuIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3cmFwcGVkIGJ5XG4gKiBvbmUgb3IgbW9yZSBjYWxscyB0byBgd3JhcGAuIFJldHVybnMgYHdyYXBwZXJgIGlmIGl0J3Mgbm90IGEgd3JhcHBlZFxuICogZnVuY3Rpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIEEgd3JhcHBlZCBtaXhpbiBwcm9kdWNlZCBieSB7QGxpbmsgd3JhcH1cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgb3JpZ2luYWxseSB3cmFwcGVkIG1peGluXG4gKi9cbmZ1bmN0aW9uIHVud3JhcCh3cmFwcGVyKSB7XG4gIHJldHVybiB3cmFwcGVyW3dyYXBwZWRNaXhpbktleV0gfHwgd3JhcHBlcjtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIGBtaXhpbmAgdG8gYHN1cGVyY2xhc3NgLlxuICpcbiAqIGBhcHBseWAgc3RvcmVzIGEgcmVmZXJlbmNlIGZyb20gdGhlIG1peGluIGFwcGxpY2F0aW9uIHRvIHRoZSB1bndyYXBwZWQgbWl4aW5cbiAqIHRvIG1ha2UgYGlzQXBwbGljYXRpb25PZmAgYW5kIGBoYXNNaXhpbmAgd29yay5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bGwgZm9yIG1peGluIHdyYXBwZXJzIHRoYXQgd2FudCB0byBhdXRvbWF0aWNhbGx5IGVuYWJsZVxuICoge0BsaW5rIGhhc01peGlufSBzdXBwb3J0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJDbGFzcyBBIGNsYXNzIG9yIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtaXhpbiBUaGUgbWl4aW4gdG8gYXBwbHlcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIHN1YmNsYXNzIG9mIGBzdXBlcmNsYXNzYCBwcm9kdWNlZCBieSBgbWl4aW5gXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWl4aW4oc3VwZXJDbGFzcywgbWl4aW4pIHtcbiAgbGV0IGFwcGxpY2F0aW9uID0gbWl4aW4oc3VwZXJDbGFzcyk7XG4gIGNvbnN0IHByb3RvID0gYXBwbGljYXRpb24ucHJvdG90eXBlO1xuICBwcm90b1thcHBsaWVkTWl4aW5LZXldID0gdW53cmFwKG1peGluKTtcbiAgcmV0dXJuIGFwcGxpY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmZiBgcHJvdG9gIGlzIGEgcHJvdG90eXBlIGNyZWF0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uIG9mXG4gKiBgbWl4aW5gIHRvIGEgc3VwZXJjbGFzcy5cbiAqXG4gKiBgaXNBcHBsaWNhdGlvbk9mYCB3b3JrcyBieSBjaGVja2luZyB0aGF0IGBwcm90b2AgaGFzIGEgcmVmZXJlbmNlIHRvIGBtaXhpbmBcbiAqIGFzIGNyZWF0ZWQgYnkgYGFwcGx5YC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBBIHByb3RvdHlwZSBvYmplY3QgY3JlYXRlZCBieSB7QGxpbmsgYXBwbHl9LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW4gQSBtaXhpbiBmdW5jdGlvbiB1c2VkIHdpdGgge0BsaW5rIGFwcGx5fS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgYHByb3RvYCBpcyBhIHByb3RvdHlwZSBjcmVhdGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiBvZlxuICogYG1peGluYCB0byBhIHN1cGVyY2xhc3NcbiAqL1xuZnVuY3Rpb24gaXNBcHBsaWNhdGlvbk9mKHByb3RvLCBtaXhpbikge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgYXBwbGllZE1peGluS2V5KSAmJiBwcm90b1thcHBsaWVkTWl4aW5LZXldID09PSB1bndyYXAobWl4aW4pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmZiBgb2AgaGFzIGFuIGFwcGxpY2F0aW9uIG9mIGBtaXhpbmAgb24gaXRzIHByb3RvdHlwZVxuICogY2hhaW4uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gbyBBbiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1peGluIEEgbWl4aW4gYXBwbGllZCB3aXRoIHtAbGluayBhcHBseX1cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgYG9gIGhhcyBhbiBhcHBsaWNhdGlvbiBvZiBgbWl4aW5gIG9uIGl0cyBwcm90b3R5cGVcbiAqIGNoYWluXG4gKi9cbmZ1bmN0aW9uIGhhc01peGluKG8sIG1peGluKSB7XG4gIHdoaWxlIChvICE9PSBudWxsKSB7XG4gICAgaWYgKGlzQXBwbGljYXRpb25PZihvLCBtaXhpbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBvID0gZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEEgYmFzaWMgbWl4aW4gZGVjb3JhdG9yIHRoYXQgYXBwbGllcyB0aGUgbWl4aW4gd2l0aCB7QGxpbmsgYXBwbHlNaXhpbn0gc28gdGhhdCBpdFxuICogY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgaXNBcHBsaWNhdGlvbk9mfSwge0BsaW5rIGhhc01peGlufSBhbmQgdGhlIG90aGVyXG4gKiBtaXhpbiBkZWNvcmF0b3IgZnVuY3Rpb25zLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW4gVGhlIG1peGluIHRvIHdyYXBcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIG5ldyBtaXhpbiBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBkZWNsYXJlTWl4aW4obWl4aW4pIHtcbiAgcmV0dXJuIHdyYXAobWl4aW4sIChzdXBlckNsYXNzKSA9PiBhcHBseU1peGluKHN1cGVyQ2xhc3MsIG1peGluKSk7XG59XG5cbi8qKlxuICogRGVjb3JhdGVzIGBtaXhpbmAgc28gdGhhdCBpdCBvbmx5IGFwcGxpZXMgaWYgaXQncyBub3QgYWxyZWFkeSBvbiB0aGVcbiAqIHByb3RvdHlwZSBjaGFpbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1peGluIFRoZSBtaXhpbiB0byB3cmFwIHdpdGggZGVkdXBsaWNhdGlvbiBiZWhhdmlvclxuICogQHJldHVybiB7RnVuY3Rpb259IGEgbmV3IG1peGluIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGRlZHVwZU1peGluKG1peGluKSB7XG4gIHJldHVybiB3cmFwKFxuICAgIG1peGluLFxuICAgIChzdXBlckNsYXNzKSA9PiAoaGFzTWl4aW4oc3VwZXJDbGFzcy5wcm90b3R5cGUsIG1peGluKSA/IHN1cGVyQ2xhc3MgOiBtaXhpbihzdXBlckNsYXNzKSlcbiAgKTtcbn1cblxuLyoqXG4gKiBEZWNvcmF0ZSB0aGUgZ2l2ZW4gbWl4aW4gY2xhc3Mgd2l0aCBhIFwiY2FjaGVkIGRlY29yYXRvclwiLlxuICpcbiAqIE1ldGhvZCB3aWxsIGVuc3VyZSB0aGF0IGlmIHRoZSBnaXZlbiBtaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQsXG4gKiB0aGVuIGl0IHdpbGwgYmUgcmV0dXJuZWQgLyBhcHBsaWVkIGEgc2luZ2xlIHRpbWUsIHJhdGhlciB0aGFuIG11bHRpcGxlXG4gKiB0aW1lcy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtaXhpblxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjYWNoZU1peGluKG1peGluKSB7XG4gIHJldHVybiB3cmFwKG1peGluLCAoc3VwZXJDbGFzcykgPT4ge1xuICAgIGxldCBjYWNoZWRBcHBsaWNhdGlvbiA9IHN1cGVyQ2xhc3NbY2FjaGVkQXBwbGljYXRpb25LZXldO1xuICAgIGlmICghY2FjaGVkQXBwbGljYXRpb24pIHtcbiAgICAgIGNhY2hlZEFwcGxpY2F0aW9uID0gc3VwZXJDbGFzc1tjYWNoZWRBcHBsaWNhdGlvbktleV0gPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGxldCBhcHBsaWNhdGlvbiA9IGNhY2hlZEFwcGxpY2F0aW9uLmdldChtaXhpbik7XG4gICAgaWYgKCFhcHBsaWNhdGlvbikge1xuICAgICAgYXBwbGljYXRpb24gPSBtaXhpbihzdXBlckNsYXNzKTtcbiAgICAgIGNhY2hlZEFwcGxpY2F0aW9uLnNldChtaXhpbiwgYXBwbGljYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gYXBwbGljYXRpb247XG4gIH0pO1xufVxuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAoXG4gIGNyZWF0b3IgPSBPYmplY3QuY3JlYXRlLmJpbmQobnVsbCwgbnVsbCwge30pXG4pID0+IHtcbiAgbGV0IHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChvYmopID0+IHtcbiAgICBsZXQgdmFsdWUgPSBzdG9yZS5nZXQob2JqKTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBzdG9yZS5zZXQob2JqLCAodmFsdWUgPSBjcmVhdG9yKG9iaikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGNvbnN0IGFsbCA9IChhcnIsIGZuID0gQm9vbGVhbikgPT4gYXJyLmV2ZXJ5KGZuKTtcblxuZXhwb3J0IGNvbnN0IGFueSA9IChhcnIsIGZuID0gQm9vbGVhbikgPT4gYXJyLnNvbWUoZm4pO1xuIiwiLyogICovXG5pbXBvcnQgeyBhbGwsIGFueSB9IGZyb20gJy4vYXJyYXkuanMnO1xuXG5cblxuY29uc3QgZG9BbGxBcGkgPSAoZm4pID0+ICguLi5wYXJhbXMpID0+IGFsbChwYXJhbXMsIGZuKTtcbmNvbnN0IGRvQW55QXBpID0gKGZuKSA9PiAoLi4ucGFyYW1zKSA9PiBhbnkocGFyYW1zLCBmbik7XG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0eXBlcyA9ICdNYXAgU2V0IFN5bWJvbCBBcnJheSBPYmplY3QgU3RyaW5nIERhdGUgUmVnRXhwIEZ1bmN0aW9uIEJvb2xlYW4gTnVtYmVyIE51bGwgVW5kZWZpbmVkIEFyZ3VtZW50cyBFcnJvcicuc3BsaXQoXG4gICcgJ1xuKTtcbmNvbnN0IGxlbiA9IHR5cGVzLmxlbmd0aDtcbmNvbnN0IHR5cGVDYWNoZSA9IHt9O1xuY29uc3QgdHlwZVJlZ2V4cCA9IC9cXHMoW2EtekEtWl0rKS87XG5cbmV4cG9ydCBkZWZhdWx0IChzZXR1cCgpKTtcblxuZXhwb3J0IGNvbnN0IGdldFR5cGUgPSAoc3JjKSA9PiBnZXRTcmNUeXBlKHNyYyk7XG5cbmZ1bmN0aW9uIGdldFNyY1R5cGUoc3JjKSB7XG4gIGxldCB0eXBlID0gdG9TdHJpbmcuY2FsbChzcmMpO1xuICBpZiAoIXR5cGVDYWNoZVt0eXBlXSkge1xuICAgIGxldCBtYXRjaGVzID0gdHlwZS5tYXRjaCh0eXBlUmVnZXhwKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaGVzKSAmJiBtYXRjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHR5cGVDYWNoZVt0eXBlXSA9IG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHR5cGVDYWNoZVt0eXBlXTtcbn1cblxuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIGxldCBjaGVja3MgPSB7fTtcbiAgZm9yIChsZXQgaSA9IGxlbjsgaS0tOyApIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZXNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICBjaGVja3NbdHlwZV0gPSBzcmMgPT4gZ2V0U3JjVHlwZShzcmMpID09PSB0eXBlO1xuICAgIGNoZWNrc1t0eXBlXS5hbGwgPSBkb0FsbEFwaShjaGVja3NbdHlwZV0pO1xuICAgIGNoZWNrc1t0eXBlXS5hbnkgPSBkb0FueUFwaShjaGVja3NbdHlwZV0pO1xuICB9XG4gIHJldHVybiBjaGVja3M7XG59XG4iLCIvKiAgKi9cblxuXG5cbmNvbnN0IGV2ZW50SHViRmFjdG9yeSA9ICgpID0+IHtcbiAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgTWFwKCk7XG4gIGxldCBzdWJzY3JpYmVyQ291bnQgPSAwO1xuXG4gIC8vJEZsb3dGaXhNZVxuICByZXR1cm4ge1xuICAgIHB1Ymxpc2g6IGZ1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmlwdGlvbnMgPT4ge1xuICAgICAgICAoc3Vic2NyaXB0aW9ucy5nZXQoZXZlbnQpIHx8IFtdKS5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgY3JlYXRlU3Vic2NyaWJlcjogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY29udGV4dCA9IHN1YnNjcmliZXJDb3VudCsrO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb246IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgIGlmICghc3Vic2NyaWJlcnMuaGFzKGNvbnRleHQpKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5zZXQoY29udGV4dCwgbmV3IE1hcCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8kRmxvd0ZpeE1lXG4gICAgICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IHN1YnNjcmliZXJzLmdldChjb250ZXh0KTtcbiAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuaGFzKGV2ZW50KSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5zZXQoZXZlbnQsIFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8kRmxvd0ZpeE1lXG4gICAgICAgICAgc3Vic2NyaWJlci5nZXQoZXZlbnQpLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgLy8kRmxvd0ZpeE1lXG4gICAgICAgICAgc3Vic2NyaWJlcnMuZ2V0KGNvbnRleHQpLmRlbGV0ZShldmVudCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBldmVudEh1YkZhY3Rvcnk7XG4iLCIvKiAgKi9cbmV4cG9ydCBkZWZhdWx0IChiZWhhdmlvdXIsIC4uLm1ldGhvZE5hbWVzKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbihrbGFzcykge1xuICAgIGNvbnN0IHByb3RvID0ga2xhc3MucHJvdG90eXBlO1xuICAgIGNvbnN0IGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcbiAgICBjb25zdCB7IGRlZmluZVByb3BlcnR5IH0gPSBPYmplY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVzW2ldO1xuICAgICAgY29uc3QgbWV0aG9kID0gcHJvdG9bbWV0aG9kTmFtZV07XG4gICAgICBkZWZpbmVQcm9wZXJ0eShwcm90bywgbWV0aG9kTmFtZSwge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAgIGJlaGF2aW91ci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBrbGFzcztcbiAgfTtcbn07XG4iLCIvKiAgKi9cbmV4cG9ydCBkZWZhdWx0IChiZWhhdmlvdXIsIC4uLm1ldGhvZE5hbWVzKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbihrbGFzcykge1xuICAgIGNvbnN0IHByb3RvID0ga2xhc3MucHJvdG90eXBlO1xuICAgIGNvbnN0IGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcbiAgICBjb25zdCB7IGRlZmluZVByb3BlcnR5IH0gPSBPYmplY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVzW2ldO1xuICAgICAgY29uc3QgbWV0aG9kID0gcHJvdG9bbWV0aG9kTmFtZV07XG4gICAgICBkZWZpbmVQcm9wZXJ0eShwcm90bywgbWV0aG9kTmFtZSwge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAgIGFyZ3MudW5zaGlmdChtZXRob2QpO1xuICAgICAgICAgIGJlaGF2aW91ci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ga2xhc3M7XG4gIH07XG59O1xuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAoYmVoYXZpb3VyLCAuLi5tZXRob2ROYW1lcykgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24oa2xhc3MpIHtcbiAgICBjb25zdCBwcm90byA9IGtsYXNzLnByb3RvdHlwZTtcbiAgICBjb25zdCBsZW4gPSBtZXRob2ROYW1lcy5sZW5ndGg7XG4gICAgY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSB9ID0gT2JqZWN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcbiAgICAgIGNvbnN0IG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdO1xuICAgICAgZGVmaW5lUHJvcGVydHkocHJvdG8sIG1ldGhvZE5hbWUsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICBiZWhhdmlvdXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBrbGFzcztcbiAgfTtcbn07XG4iLCIvKiAgKi9cbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSAhW3R5cGVvZiB3aW5kb3csIHR5cGVvZiBkb2N1bWVudF0uaW5jbHVkZXMoXG4gICd1bmRlZmluZWQnXG4pO1xuXG5leHBvcnQgY29uc3QgYnJvd3NlciA9IChmbiwgcmFpc2UgPSB0cnVlKSA9PiAoXG4gIC4uLmFyZ3NcbikgPT4ge1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgcmV0dXJuIGZuKC4uLmFyZ3MpO1xuICB9XG4gIGlmIChyYWlzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtmbi5uYW1lfSBmb3IgYnJvd3NlciB1c2Ugb25seWApO1xuICB9XG59O1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChwYXNzVGhyb3VnaCkgPT4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gcmVzb2x2ZShwYXNzVGhyb3VnaCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXNzVGhyb3VnaCk7XG59KTtcbiIsIi8qICAqL1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uL2Vudmlyb25tZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYnJvd3NlcigodGVtcGxhdGUpID0+IHtcbiAgaWYgKCdjb250ZW50JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XG4gIH1cblxuICBsZXQgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGxldCBjaGlsZHJlbiA9IHRlbXBsYXRlLmNoaWxkTm9kZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZHJlbltpXS5jbG9uZU5vZGUodHJ1ZSkpO1xuICB9XG4gIHJldHVybiBmcmFnbWVudDtcbn0pO1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuaW1wb3J0IHRlbXBsYXRlQ29udGVudCBmcm9tICcuL3RlbXBsYXRlLWNvbnRlbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChodG1sKSA9PiB7XG4gIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbC50cmltKCk7XG4gIGNvbnN0IGZyYWcgPSB0ZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGUpO1xuICBpZiAoZnJhZyAmJiBmcmFnLmZpcnN0Q2hpbGQpIHtcbiAgICByZXR1cm4gZnJhZy5maXJzdENoaWxkO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGNyZWF0ZUVsZW1lbnQgZm9yICR7aHRtbH1gKTtcbn0pO1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChub2RlKSA9PiB7XG4gIGxldCBzaWJsaW5ncyA9IFtdO1xuICBpZiAobm9kZS5wYXJlbnROb2RlICYmIG5vZGUucGFyZW50Tm9kZS5maXJzdENoaWxkKSB7XG4gICAgbGV0IHNpYmxpbmcgPSBub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICBkbyB7XG4gICAgICBpZiAoc2libGluZy5ub2RlVHlwZSA9PT0gMSAmJiBzaWJsaW5nICE9PSBub2RlKSB7XG4gICAgICAgIHNpYmxpbmdzLnB1c2goc2libGluZyk7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoXG4gICAgICBzaWJsaW5nLm5leHRTaWJsaW5nICYmXG4gICAgICBzaWJsaW5nLm5leHRTaWJsaW5nICE9PSBudWxsICYmXG4gICAgICAoc2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmcpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBzaWJsaW5ncztcbn0pO1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChlbGVtZW50KSA9PiB7XG4gIGlmIChlbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gIH1cbn0pO1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChjaGlsZCwgcGFyZW50KSA9PiB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5ICovXG4gIHdoaWxlIChjaGlsZC5wYXJlbnROb2RlICYmIChjaGlsZCA9IGNoaWxkLnBhcmVudE5vZGUpICYmIGNoaWxkICE9PSBwYXJlbnQpIHt9XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5ICovXG4gIHJldHVybiBCb29sZWFuKGNoaWxkKTtcbn0pO1xuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKFxuICAoZWxlbWVudCwgbm9kZVR5cGUgPSBOb2RlLkVMRU1FTlRfTk9ERSkgPT4ge1xuICAgIGxldCBjaGlsZE5vZGVzID0gZWxlbWVudC5jaGlsZE5vZGVzO1xuICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgIGlmIChjaGlsZE5vZGVzICYmIGNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGkgPSBjaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IG5vZGVUeXBlKSB7XG4gICAgICAgICAgY2hpbGRyZW4udW5zaGlmdChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbik7XG4iLCIvKiAgKi9cblxubGV0IG1pY3JvVGFza0N1cnJIYW5kbGUgPSAwO1xubGV0IG1pY3JvVGFza0xhc3RIYW5kbGUgPSAwO1xubGV0IG1pY3JvVGFza0NhbGxiYWNrcyA9IFtdO1xubGV0IG1pY3JvVGFza05vZGVDb250ZW50ID0gMDtcbmxldCBtaWNyb1Rhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xubmV3IE11dGF0aW9uT2JzZXJ2ZXIobWljcm9UYXNrRmx1c2gpLm9ic2VydmUobWljcm9UYXNrTm9kZSwge1xuICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG59KTtcblxuXG4vKipcbiAqIEJhc2VkIG9uIFBvbHltZXIuYXN5bmNcbiAqL1xuY29uc3QgbWljcm9UYXNrID0ge1xuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgbWljcm9UYXNrIHRpbWluZy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oY2FsbGJhY2spIHtcbiAgICBtaWNyb1Rhc2tOb2RlLnRleHRDb250ZW50ID0gU3RyaW5nKG1pY3JvVGFza05vZGVDb250ZW50KyspO1xuICAgIG1pY3JvVGFza0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gbWljcm9UYXNrQ3VyckhhbmRsZSsrO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgbWljcm9UYXNrYCBjYWxsYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICovXG4gIGNhbmNlbChoYW5kbGUpIHtcbiAgICBjb25zdCBpZHggPSBoYW5kbGUgLSBtaWNyb1Rhc2tMYXN0SGFuZGxlO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgaWYgKCFtaWNyb1Rhc2tDYWxsYmFja3NbaWR4XSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXN5bmMgaGFuZGxlOiAnICsgaGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIG1pY3JvVGFza0NhbGxiYWNrc1tpZHhdID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pY3JvVGFzaztcblxuZnVuY3Rpb24gbWljcm9UYXNrRmx1c2goKSB7XG4gIGNvbnN0IGxlbiA9IG1pY3JvVGFza0NhbGxiYWNrcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgY2IgPSBtaWNyb1Rhc2tDYWxsYmFja3NbaV07XG4gICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBtaWNyb1Rhc2tDYWxsYmFja3Muc3BsaWNlKDAsIGxlbik7XG4gIG1pY3JvVGFza0xhc3RIYW5kbGUgKz0gbGVuO1xufVxuIiwiLyogICovXG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQuanMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIoXG4gIChcbiAgICB0YXJnZXQsXG4gICAgdHlwZSxcbiAgICBsaXN0ZW5lcixcbiAgICBjYXB0dXJlID0gZmFsc2VcbiAgKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICB9XG4pO1xuXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihcbiAgdGFyZ2V0LFxuICB0eXBlLFxuICBsaXN0ZW5lcixcbiAgY2FwdHVyZVxuKSB7XG4gIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUgPSAoKSA9PiB7fTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBldmVudCBlbWl0dGVyJyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKFxuICB0YXJnZXQsXG4gIHR5cGUsXG4gIGxpc3RlbmVyLFxuICBjYXB0dXJlXG4pIHtcbiAgaWYgKHR5cGUuaW5kZXhPZignLCcpID4gLTEpIHtcbiAgICBsZXQgZXZlbnRzID0gdHlwZS5zcGxpdCgvXFxzKixcXHMqLyk7XG4gICAgbGV0IGhhbmRsZXMgPSBldmVudHMubWFwKGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHJldHVybiBhZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLnJlbW92ZSA9ICgpID0+IHt9O1xuICAgICAgICBsZXQgaGFuZGxlO1xuICAgICAgICB3aGlsZSAoKGhhbmRsZSA9IGhhbmRsZXMucG9wKCkpKSB7XG4gICAgICAgICAgaGFuZGxlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG59XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgbGlzdGVuRXZlbnQsIHsgfSBmcm9tICcuL2xpc3Rlbi1ldmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIoXG4gIChcbiAgICB0YXJnZXQsXG4gICAgdHlwZSxcbiAgICBsaXN0ZW5lcixcbiAgICBjYXB0dXJlID0gZmFsc2VcbiAgKSA9PiB7XG4gICAgbGV0IGhhbmRsZSA9IGxpc3RlbkV2ZW50KFxuICAgICAgdGFyZ2V0LFxuICAgICAgdHlwZSxcbiAgICAgICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGhhbmRsZS5yZW1vdmUoKTtcbiAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICB9LFxuICAgICAgY2FwdHVyZVxuICAgICk7XG4gICAgcmV0dXJuIGhhbmRsZTtcbiAgfVxuKTtcbiIsIi8qICAqL1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uL2Vudmlyb25tZW50LmpzJztcbmltcG9ydCBsaXN0ZW5FdmVudCwgeyB9IGZyb20gJy4vbGlzdGVuLWV2ZW50LmpzJztcblxuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKFxuICAoXG4gICAgdGFyZ2V0LFxuICAgIHR5cGUsXG4gICAgbGlzdGVuZXIsXG4gICAgY2FwdHVyZSA9IGZhbHNlXG4gICkgPT4ge1xuICAgIGxldCBwYXVzZWQgPSBmYWxzZTtcbiAgICBsZXQgaGFuZGxlID0gbGlzdGVuRXZlbnQoXG4gICAgICB0YXJnZXQsXG4gICAgICB0eXBlLFxuICAgICAgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKCFwYXVzZWQpIHtcbiAgICAgICAgICBsaXN0ZW5lciguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhcHR1cmVcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaGFuZGxlLnJlbW92ZSgpO1xuICAgICAgfSxcbiAgICAgIHBhdXNlKCkge1xuICAgICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlc3VtZSgpIHtcbiAgICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuKTtcbiIsIi8qICAqL1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uL2Vudmlyb25tZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYnJvd3NlcigoZXZ0KSA9PiB7XG4gIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xufSk7XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgY3JlYXRlU3RvcmFnZSBmcm9tICcuLi8uLi9jcmVhdGUtc3RvcmFnZS5qcyc7XG5pbXBvcnQgYXJvdW5kIGZyb20gJy4uLy4uL2FkdmljZS9hcm91bmQuanMnO1xuaW1wb3J0IG1pY3JvVGFzayBmcm9tICcuLi9taWNyb3Rhc2suanMnO1xuXG5jb25zdCBnbG9iYWwgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90cmFjZXVyLWNvbXBpbGVyL2lzc3Vlcy8xNzA5XG5pZiAodHlwZW9mIGdsb2JhbC5IVE1MRWxlbWVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICBjb25zdCBfSFRNTEVsZW1lbnQgPSBmdW5jdGlvbiBIVE1MRWxlbWVudCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZXNcbiAgfTtcbiAgX0hUTUxFbGVtZW50LnByb3RvdHlwZSA9IGdsb2JhbC5IVE1MRWxlbWVudC5wcm90b3R5cGU7XG4gIGdsb2JhbC5IVE1MRWxlbWVudCA9IF9IVE1MRWxlbWVudDtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChiYXNlQ2xhc3MpID0+IHtcbiAgY29uc3QgY3VzdG9tRWxlbWVudHNWMUNhbGxiYWNrcyA9IFtcbiAgICAnY29ubmVjdGVkQ2FsbGJhY2snLFxuICAgICdkaXNjb25uZWN0ZWRDYWxsYmFjaycsXG4gICAgJ2Fkb3B0ZWRDYWxsYmFjaycsXG4gICAgJ2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaydcbiAgXTtcbiAgY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSwgaGFzT3duUHJvcGVydHkgfSA9IE9iamVjdDtcbiAgY29uc3QgcHJpdmF0ZXMgPSBjcmVhdGVTdG9yYWdlKCk7XG5cbiAgaWYgKCFiYXNlQ2xhc3MpIHtcbiAgICBiYXNlQ2xhc3MgPSBjbGFzcyBleHRlbmRzIGdsb2JhbC5IVE1MRWxlbWVudCB7fTtcbiAgfVxuXG4gIHJldHVybiBjbGFzcyBDdXN0b21FbGVtZW50IGV4dGVuZHMgYmFzZUNsYXNzIHtcblxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHN0YXRpYyBmaW5hbGl6ZUNsYXNzKCkge31cblxuICAgIHN0YXRpYyBkZWZpbmUodGFnTmFtZSkge1xuICAgICAgY29uc3QgcmVnaXN0cnkgPSBjdXN0b21FbGVtZW50cztcbiAgICAgIGlmICghcmVnaXN0cnkuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzVjFDYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2tNZXRob2ROYW1lKSA9PiB7XG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBjYWxsYmFja01ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShwcm90bywgY2FsbGJhY2tNZXRob2ROYW1lLCB7XG4gICAgICAgICAgICAgIHZhbHVlKCkge30sXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5ld0NhbGxiYWNrTmFtZSA9IGNhbGxiYWNrTWV0aG9kTmFtZS5zdWJzdHJpbmcoXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgY2FsbGJhY2tNZXRob2ROYW1lLmxlbmd0aCAtICdjYWxsYmFjaycubGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IHByb3RvW2NhbGxiYWNrTWV0aG9kTmFtZV07XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkocHJvdG8sIGNhbGxiYWNrTWV0aG9kTmFtZSwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgdGhpc1tuZXdDYWxsYmFja05hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5maW5hbGl6ZUNsYXNzKCk7XG4gICAgICAgIGFyb3VuZChjcmVhdGVDb25uZWN0ZWRBZHZpY2UoKSwgJ2Nvbm5lY3RlZCcpKHRoaXMpO1xuICAgICAgICBhcm91bmQoY3JlYXRlRGlzY29ubmVjdGVkQWR2aWNlKCksICdkaXNjb25uZWN0ZWQnKSh0aGlzKTtcbiAgICAgICAgYXJvdW5kKGNyZWF0ZVJlbmRlckFkdmljZSgpLCAncmVuZGVyJykodGhpcyk7XG4gICAgICAgIHJlZ2lzdHJ5LmRlZmluZSh0YWdOYW1lLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaW5pdGlhbGl6ZWQoKSB7XG4gICAgICByZXR1cm4gcHJpdmF0ZXModGhpcykuaW5pdGlhbGl6ZWQgPT09IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICB0aGlzLmNvbnN0cnVjdCgpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdCgpIHt9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAgIGF0dHJpYnV0ZUNoYW5nZWQoXG4gICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgb2xkVmFsdWUsXG4gICAgICBuZXdWYWx1ZVxuICAgICkge31cbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgICBjb25uZWN0ZWQoKSB7fVxuXG4gICAgZGlzY29ubmVjdGVkKCkge31cblxuICAgIGFkb3B0ZWQoKSB7fVxuXG4gICAgcmVuZGVyKCkge31cblxuICAgIF9vblJlbmRlcigpIHt9XG5cbiAgICBfcG9zdFJlbmRlcigpIHt9XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGVkQWR2aWNlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG4gICAgICBwcml2YXRlcyhjb250ZXh0KS5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgaWYgKCFwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplZCkge1xuICAgICAgICBwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrLmNhbGwoY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlbmRlckFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocmVuZGVyQ2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgaWYgKCFwcml2YXRlcyhjb250ZXh0KS5yZW5kZXJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlyc3RSZW5kZXIgPSBwcml2YXRlcyhjb250ZXh0KS5yZW5kZXJpbmcgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgcHJpdmF0ZXMoY29udGV4dCkucmVuZGVyaW5nID0gdHJ1ZTtcbiAgICAgICAgbWljcm9UYXNrLnJ1bigoKSA9PiB7XG4gICAgICAgICAgaWYgKHByaXZhdGVzKGNvbnRleHQpLnJlbmRlcmluZykge1xuICAgICAgICAgICAgcHJpdmF0ZXMoY29udGV4dCkucmVuZGVyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBjb250ZXh0Ll9vblJlbmRlcihmaXJzdFJlbmRlcik7XG4gICAgICAgICAgICByZW5kZXJDYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuICAgICAgICAgICAgY29udGV4dC5fcG9zdFJlbmRlcihmaXJzdFJlbmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRGlzY29ubmVjdGVkQWR2aWNlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihkaXNjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG4gICAgICBwcml2YXRlcyhjb250ZXh0KS5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIG1pY3JvVGFzay5ydW4oKCkgPT4ge1xuICAgICAgICBpZiAoIXByaXZhdGVzKGNvbnRleHQpLmNvbm5lY3RlZCAmJiBwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHByaXZhdGVzKGNvbnRleHQpLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2suY2FsbChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgY3JlYXRlU3RvcmFnZSBmcm9tICcuLi8uLi9jcmVhdGUtc3RvcmFnZS5qcyc7XG5pbXBvcnQgYWZ0ZXIgZnJvbSAnLi4vLi4vYWR2aWNlL2FmdGVyLmpzJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIoKGJhc2VDbGFzcykgPT4ge1xuICBjb25zdCB7IGFzc2lnbiB9ID0gT2JqZWN0O1xuICBjb25zdCBwcml2YXRlcyA9IGNyZWF0ZVN0b3JhZ2UoKTtcblxuICByZXR1cm4gY2xhc3MgU3RhdGUgZXh0ZW5kcyBiYXNlQ2xhc3Mge1xuICAgIHN0YXRpYyBmaW5hbGl6ZUNsYXNzKCkge1xuICAgICAgc3VwZXIuZmluYWxpemVDbGFzcygpO1xuICAgICAgYWZ0ZXIoY3JlYXRlQmVmb3JlUmVuZGVyQWR2aWNlKCksICdfb25SZW5kZXInKSh0aGlzKTtcbiAgICAgIGFmdGVyKGNyZWF0ZUFmdGVyUmVuZGVyQWR2aWNlKCksICdfcG9zdFJlbmRlcicpKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdCgpIHtcbiAgICAgIHN1cGVyLmNvbnN0cnVjdCgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmRlZmF1bHRTdGF0ZSk7XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRTdGF0ZSgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gYXNzaWduKHt9LCBwcml2YXRlcyh0aGlzKS5zdGF0ZSk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRTdGF0ZSkge1xuICAgICAgZm9yIChsZXQga2V5IGluIG5leHRTdGF0ZSkge1xuICAgICAgICBpZiAobmV4dFN0YXRlW2tleV0gIT09IHByaXZhdGVzKHRoaXMpLnN0YXRlW2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNldFN0YXRlKGNoYW5nZXMpIHtcbiAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IGFzc2lnbih7fSwgcHJpdmF0ZXModGhpcykuc3RhdGUsIGNoYW5nZXMpO1xuICAgICAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHByaXZhdGVzKHRoaXMpLnN0YXRlO1xuICAgICAgY29uc3QgY2hhbmdlZCA9XG4gICAgICAgIHByZXZpb3VzU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0U3RhdGUpO1xuXG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICBwcml2YXRlcyh0aGlzKS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29tcG9uZW50V2lsbFJlbmRlcihuZXdTdGF0ZSkge31cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbXBvbmVudERpZFJlbmRlcihwcmV2aW91c1N0YXRlKSB7fVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29tcG9uZW50V2lsbFVwZGF0ZShuZXdTdGF0ZSwgcHJldmlvdXNTdGF0ZSkge31cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2aW91c1N0YXRlKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJlZm9yZVJlbmRlckFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZmlyc3RSZW5kZXIpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgaWYgKGZpcnN0UmVuZGVyKSB7XG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbFJlbmRlcih0aGlzLnN0YXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbFVwZGF0ZShcbiAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgIGFzc2lnbih7fSwgcHJpdmF0ZXMoY29udGV4dCkucmVuZGVyZWRTdGF0ZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQWZ0ZXJSZW5kZXJBZHZpY2UoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZpcnN0UmVuZGVyKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBwcml2YXRlcyhjb250ZXh0KS5yZW5kZXJlZFN0YXRlO1xuICAgICAgcHJpdmF0ZXMoY29udGV4dCkucmVuZGVyZWRTdGF0ZSA9IHByaXZhdGVzKGNvbnRleHQpLnN0YXRlO1xuICAgICAgaWYgKGZpcnN0UmVuZGVyKSB7XG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50RGlkUmVuZGVyKHByZXZpb3VzU3RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5jb21wb25lbnREaWRVcGRhdGUocHJldmlvdXNTdGF0ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgYmVmb3JlIGZyb20gJy4uLy4uL2FkdmljZS9iZWZvcmUuanMnO1xuaW1wb3J0IGVsZW1lbnRDaGlsZHJlbiBmcm9tICcuLi9lbGVtZW50LWNoaWxkcmVuLmpzJztcblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgYnJvd3NlcigoYmFzZUNsYXNzKSA9PiB7XG4gIHJldHVybiBjbGFzcyBTbG90cyBleHRlbmRzIGJhc2VDbGFzcyB7XG5cbiAgICBzdGF0aWMgZmluYWxpemVDbGFzcygpIHtcbiAgICAgIHN1cGVyLmZpbmFsaXplQ2xhc3MoKTtcbiAgICAgIGJlZm9yZShjcmVhdGVCZWZvcmVSZW5kZXJBZHZpY2UoKSwgJ19vblJlbmRlcicpKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdCgpIHtcbiAgICAgIHN1cGVyLmNvbnN0cnVjdCgpO1xuICAgICAgdGhpcy5zbG90cyA9IHsgZGVmYXVsdDogW10gfTtcbiAgICB9XG5cbiAgICBzbG90c0Fzc2lnbmVkKCkge31cbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVCZWZvcmVSZW5kZXJBZHZpY2UoKSB7XG4gICAgY29uc3QgaHlwZW5SZWdFeCA9IC8tKFthLXpdKS9nO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZpcnN0UmVuZGVyKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGlmIChmaXJzdFJlbmRlcikge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnRDaGlsZHJlbihjb250ZXh0KTtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBjaGlsZC5nZXRBdHRyaWJ1dGVcbiAgICAgICAgICAgID8gY2hpbGQuZ2V0QXR0cmlidXRlKCdzbG90JylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZSA9PT0gJ3N0cmluZycgJiYgYXR0cmlidXRlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBhdHRyaWJ1dGUucmVwbGFjZShoeXBlblJlZ0V4LCBtYXRjaCA9PlxuICAgICAgICAgICAgICBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGV4dC5zbG90c1tzbG90XSA9IGNoaWxkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LnNsb3RzLmRlZmF1bHQucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5zbG90c0Fzc2lnbmVkKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgYWZ0ZXIgZnJvbSAnLi4vLi4vYWR2aWNlL2FmdGVyLmpzJztcbmltcG9ydCBjcmVhdGVTdG9yYWdlIGZyb20gJy4uLy4uL2NyZWF0ZS1zdG9yYWdlLmpzJztcbmltcG9ydCBsaXN0ZW5FdmVudCwgeyB9IGZyb20gJy4uL2xpc3Rlbi1ldmVudC5qcyc7XG5cblxuXG4vKipcbiAqIE1peGluIGFkZHMgQ3VzdG9tRXZlbnQgaGFuZGxpbmcgdG8gYW4gZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBicm93c2VyKChiYXNlQ2xhc3MpID0+IHtcbiAgY29uc3QgeyBhc3NpZ24gfSA9IE9iamVjdDtcbiAgY29uc3QgcHJpdmF0ZXMgPSBjcmVhdGVTdG9yYWdlKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoYW5kbGVyczogW11cbiAgICB9O1xuICB9KTtcbiAgY29uc3QgZXZlbnREZWZhdWx0UGFyYW1zID0ge1xuICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gIH07XG5cbiAgcmV0dXJuIGNsYXNzIEV2ZW50cyBleHRlbmRzIGJhc2VDbGFzcyB7XG5cbiAgICBzdGF0aWMgZmluYWxpemVDbGFzcygpIHtcbiAgICAgIHN1cGVyLmZpbmFsaXplQ2xhc3MoKTtcbiAgICAgIGFmdGVyKGNyZWF0ZURpc2Nvbm5lY3RlZEFkdmljZSgpLCAnZGlzY29ubmVjdGVkJykodGhpcyk7XG4gICAgfVxuXG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IGBvbiR7ZXZlbnQudHlwZX1gO1xuICAgICAgaWYgKHR5cGVvZiB0aGlzW2hhbmRsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB0aGlzW2hhbmRsZV0oZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG9uKHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgICB0aGlzLm93bihsaXN0ZW5FdmVudCh0aGlzLCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xuICAgIH1cblxuICAgIGRpc3BhdGNoKHR5cGUsIGRhdGEgPSB7fSkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQodHlwZSwgYXNzaWduKGV2ZW50RGVmYXVsdFBhcmFtcywgeyBkZXRhaWw6IGRhdGEgfSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIG9mZigpIHtcbiAgICAgIHByaXZhdGVzKHRoaXMpLmhhbmRsZXJzLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgICAgaGFuZGxlci5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG93biguLi5oYW5kbGVycykge1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgICBwcml2YXRlcyh0aGlzKS5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZURpc2Nvbm5lY3RlZEFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGNvbnRleHQub2ZmKCk7XG4gICAgfTtcbiAgfVxufSk7XG4iLCIvKiAgKi9cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgYmVmb3JlIGZyb20gJy4uLy4uL2FkdmljZS9iZWZvcmUuanMnO1xuaW1wb3J0IGNyZWF0ZVN0b3JhZ2UgZnJvbSAnLi4vLi4vY3JlYXRlLXN0b3JhZ2UuanMnO1xuaW1wb3J0IG1pY3JvVGFzayBmcm9tICcuLi9taWNyb3Rhc2suanMnO1xuXG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIoKGJhc2VDbGFzcykgPT4ge1xuICBjb25zdCB7IGRlZmluZVByb3BlcnR5LCBrZXlzLCBhc3NpZ24gfSA9IE9iamVjdDtcbiAgY29uc3QgYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWVzID0ge307XG4gIGNvbnN0IHByb3BlcnR5TmFtZXNUb0F0dHJpYnV0ZXMgPSB7fTtcbiAgY29uc3QgcHJpdmF0ZXMgPSBjcmVhdGVTdG9yYWdlKCk7XG5cbiAgbGV0IHByb3BlcnRpZXNDb25maWc7XG4gIGxldCBkYXRhSGFzQWNjZXNzb3IgPSB7fTtcbiAgbGV0IGRhdGFQcm90b1ZhbHVlcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGVuaGFuY2VQcm9wZXJ0eUNvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcuaGFzT2JzZXJ2ZXIgPSAnb2JzZXJ2ZXInIGluIGNvbmZpZztcbiAgICBjb25maWcuaXNPYnNlcnZlclN0cmluZyA9XG4gICAgICBjb25maWcuaGFzT2JzZXJ2ZXIgJiYgdHlwZW9mIGNvbmZpZy5vYnNlcnZlciA9PT0gJ3N0cmluZyc7XG4gICAgY29uZmlnLmlzU3RyaW5nID0gY29uZmlnLnR5cGUgPT09IFN0cmluZztcbiAgICBjb25maWcuaXNOdW1iZXIgPSBjb25maWcudHlwZSA9PT0gTnVtYmVyO1xuICAgIGNvbmZpZy5pc0Jvb2xlYW4gPSBjb25maWcudHlwZSA9PT0gQm9vbGVhbjtcbiAgICBjb25maWcuaXNPYmplY3QgPSBjb25maWcudHlwZSA9PT0gT2JqZWN0O1xuICAgIGNvbmZpZy5pc0FycmF5ID0gY29uZmlnLnR5cGUgPT09IEFycmF5O1xuICAgIGNvbmZpZy5pc0RhdGUgPSBjb25maWcudHlwZSA9PT0gRGF0ZTtcbiAgICBjb25maWcubm90aWZ5ID0gJ25vdGlmeScgaW4gY29uZmlnO1xuICAgIGNvbmZpZy5yZWFkT25seSA9ICdyZWFkT25seScgaW4gY29uZmlnID8gY29uZmlnLnJlYWRPbmx5IDogZmFsc2U7XG4gICAgY29uZmlnLnJlZmxlY3RUb0F0dHJpYnV0ZSA9XG4gICAgICAncmVmbGVjdFRvQXR0cmlidXRlJyBpbiBjb25maWdcbiAgICAgICAgPyBjb25maWcucmVmbGVjdFRvQXR0cmlidXRlXG4gICAgICAgIDogY29uZmlnLmlzU3RyaW5nIHx8IGNvbmZpZy5pc051bWJlciB8fCBjb25maWcuaXNCb29sZWFuO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgZm9yIChsZXQgbmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BlcnRpZXMsIG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW25hbWVdO1xuICAgICAgb3V0cHV0W25hbWVdID1cbiAgICAgICAgdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nID8geyB0eXBlOiBwcm9wZXJ0eSB9IDogcHJvcGVydHk7XG4gICAgICBlbmhhbmNlUHJvcGVydHlDb25maWcob3V0cHV0W25hbWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RlZEFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGlmIChPYmplY3Qua2V5cyhwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplUHJvcGVydGllcykubGVuZ3RoID4gMCkge1xuICAgICAgICBhc3NpZ24oY29udGV4dCwgcHJpdmF0ZXMoY29udGV4dCkuaW5pdGlhbGl6ZVByb3BlcnRpZXMpO1xuICAgICAgICBwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplUHJvcGVydGllcyA9IHt9O1xuICAgICAgfVxuICAgICAgY29udGV4dC5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUF0dHJpYnV0ZUNoYW5nZUFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXR0cmlidXRlLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICBjb250ZXh0Ll9hdHRyaWJ1dGVUb1Byb3BlcnR5KGF0dHJpYnV0ZSwgbmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcm9wZXJ0aWVzQ2hhbmdlZEFkdmljZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oXG4gICAgICBjdXJyZW50UHJvcHMsXG4gICAgICBjaGFuZ2VkUHJvcHMsXG4gICAgICBvbGRQcm9wc1xuICAgICkge1xuICAgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgT2JqZWN0LmtleXMoY2hhbmdlZFByb3BzKS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgbm90aWZ5LFxuICAgICAgICAgIGhhc09ic2VydmVyLFxuICAgICAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZSxcbiAgICAgICAgICBpc09ic2VydmVyU3RyaW5nLFxuICAgICAgICAgIG9ic2VydmVyXG4gICAgICAgIH0gPSBjb250ZXh0LmNvbnN0cnVjdG9yLmNsYXNzUHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICAgIGlmIChyZWZsZWN0VG9BdHRyaWJ1dGUpIHtcbiAgICAgICAgICBjb250ZXh0Ll9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCBjaGFuZ2VkUHJvcHNbcHJvcGVydHldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT2JzZXJ2ZXIgJiYgaXNPYnNlcnZlclN0cmluZykge1xuICAgICAgICAgIHRoaXNbb2JzZXJ2ZXJdKGNoYW5nZWRQcm9wc1twcm9wZXJ0eV0sIG9sZFByb3BzW3Byb3BlcnR5XSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzT2JzZXJ2ZXIgJiYgdHlwZW9mIG9ic2VydmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuYXBwbHkoY29udGV4dCwgW2NoYW5nZWRQcm9wc1twcm9wZXJ0eV0sIG9sZFByb3BzW3Byb3BlcnR5XV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoYCR7cHJvcGVydHl9LWNoYW5nZWRgLCB7XG4gICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBjaGFuZ2VkUHJvcHNbcHJvcGVydHldLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBvbGRQcm9wc1twcm9wZXJ0eV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzIFByb3BlcnRpZXMgZXh0ZW5kcyBiYXNlQ2xhc3Mge1xuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNsYXNzUHJvcGVydGllcykubWFwKChwcm9wZXJ0eSkgPT5cbiAgICAgICAgICB0aGlzLnByb3BlcnR5TmFtZVRvQXR0cmlidXRlKHByb3BlcnR5KVxuICAgICAgICApIHx8IFtdXG4gICAgICApO1xuICAgIH1cblxuICAgIHN0YXRpYyBmaW5hbGl6ZUNsYXNzKCkge1xuICAgICAgc3VwZXIuZmluYWxpemVDbGFzcygpO1xuICAgICAgYmVmb3JlKGNyZWF0ZUNvbm5lY3RlZEFkdmljZSgpLCAnY29ubmVjdGVkJykodGhpcyk7XG4gICAgICBiZWZvcmUoY3JlYXRlQXR0cmlidXRlQ2hhbmdlQWR2aWNlKCksICdhdHRyaWJ1dGVDaGFuZ2VkJykodGhpcyk7XG4gICAgICBiZWZvcmUoY3JlYXRlUHJvcGVydGllc0NoYW5nZWRBZHZpY2UoKSwgJ3Byb3BlcnRpZXNDaGFuZ2VkJykodGhpcyk7XG4gICAgICB0aGlzLmNyZWF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWUoYXR0cmlidXRlKSB7XG4gICAgICBsZXQgcHJvcGVydHkgPSBhdHRyaWJ1dGVUb1Byb3BlcnR5TmFtZXNbYXR0cmlidXRlXTtcbiAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgLy8gQ29udmVydCBhbmQgbWVtb2l6ZS5cbiAgICAgICAgY29uc3QgaHlwZW5SZWdFeCA9IC8tKFthLXpdKS9nO1xuICAgICAgICBwcm9wZXJ0eSA9IGF0dHJpYnV0ZS5yZXBsYWNlKGh5cGVuUmVnRXgsIG1hdGNoID0+XG4gICAgICAgICAgbWF0Y2hbMV0udG9VcHBlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBhdHRyaWJ1dGVUb1Byb3BlcnR5TmFtZXNbYXR0cmlidXRlXSA9IHByb3BlcnR5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cblxuICAgIHN0YXRpYyBwcm9wZXJ0eU5hbWVUb0F0dHJpYnV0ZShwcm9wZXJ0eSkge1xuICAgICAgbGV0IGF0dHJpYnV0ZSA9IHByb3BlcnR5TmFtZXNUb0F0dHJpYnV0ZXNbcHJvcGVydHldO1xuICAgICAgaWYgKCFhdHRyaWJ1dGUpIHtcbiAgICAgICAgLy8gQ29udmVydCBhbmQgbWVtb2l6ZS5cbiAgICAgICAgY29uc3QgdXBwZXJjYXNlUmVnRXggPSAvKFtBLVpdKS9nO1xuICAgICAgICBhdHRyaWJ1dGUgPSBwcm9wZXJ0eS5yZXBsYWNlKHVwcGVyY2FzZVJlZ0V4LCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcHJvcGVydHlOYW1lc1RvQXR0cmlidXRlc1twcm9wZXJ0eV0gPSBhdHRyaWJ1dGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgY2xhc3NQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCFwcm9wZXJ0aWVzQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGdldFByb3BlcnRpZXNDb25maWcgPSAoKSA9PiBwcm9wZXJ0aWVzQ29uZmlnIHx8IHt9O1xuICAgICAgICBsZXQgY2hlY2tPYmogPSBudWxsO1xuICAgICAgICBsZXQgbG9vcCA9IHRydWU7XG5cbiAgICAgICAgd2hpbGUgKGxvb3ApIHtcbiAgICAgICAgICBjaGVja09iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjaGVja09iaiA9PT0gbnVsbCA/IHRoaXMgOiBjaGVja09iaik7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWNoZWNrT2JqIHx8XG4gICAgICAgICAgICAhY2hlY2tPYmouY29uc3RydWN0b3IgfHxcbiAgICAgICAgICAgIGNoZWNrT2JqLmNvbnN0cnVjdG9yID09PSBIVE1MRWxlbWVudCB8fFxuICAgICAgICAgICAgY2hlY2tPYmouY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uIHx8XG4gICAgICAgICAgICBjaGVja09iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IHx8XG4gICAgICAgICAgICBjaGVja09iai5jb25zdHJ1Y3RvciA9PT0gY2hlY2tPYmouY29uc3RydWN0b3IuY29uc3RydWN0b3JcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNoZWNrT2JqLCAncHJvcGVydGllcycpKSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgICBwcm9wZXJ0aWVzQ29uZmlnID0gYXNzaWduKFxuICAgICAgICAgICAgICBnZXRQcm9wZXJ0aWVzQ29uZmlnKCksIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgICAgbm9ybWFsaXplUHJvcGVydGllcyhjaGVja09iai5wcm9wZXJ0aWVzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xuICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICBwcm9wZXJ0aWVzQ29uZmlnID0gYXNzaWduKFxuICAgICAgICAgICAgZ2V0UHJvcGVydGllc0NvbmZpZygpLCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgICBub3JtYWxpemVQcm9wZXJ0aWVzKHRoaXMucHJvcGVydGllcylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydGllc0NvbmZpZztcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlUHJvcGVydGllcygpIHtcbiAgICAgIGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5jbGFzc1Byb3BlcnRpZXM7XG4gICAgICBrZXlzKHByb3BlcnRpZXMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFVuYWJsZSB0byBzZXR1cCBwcm9wZXJ0eSAnJHtwcm9wZXJ0eX0nLCBwcm9wZXJ0eSBhbHJlYWR5IGV4aXN0c2BcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XS52YWx1ZTtcbiAgICAgICAgaWYgKHByb3BlcnR5VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRhdGFQcm90b1ZhbHVlc1twcm9wZXJ0eV0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHByb3RvLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCBwcm9wZXJ0aWVzW3Byb3BlcnR5XS5yZWFkT25seSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3QoKSB7XG4gICAgICBzdXBlci5jb25zdHJ1Y3QoKTtcbiAgICAgIHByaXZhdGVzKHRoaXMpLmRhdGEgPSB7fTtcbiAgICAgIHByaXZhdGVzKHRoaXMpLnNlcmlhbGl6aW5nID0gZmFsc2U7XG4gICAgICBwcml2YXRlcyh0aGlzKS5pbml0aWFsaXplUHJvcGVydGllcyA9IHt9O1xuICAgICAgcHJpdmF0ZXModGhpcykuZGF0YVBlbmRpbmcgPSBudWxsO1xuICAgICAgcHJpdmF0ZXModGhpcykuZGF0YU9sZCA9IG51bGw7XG4gICAgICBwcml2YXRlcyh0aGlzKS5kYXRhSW52YWxpZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZVByb3RvUHJvcGVydGllcygpO1xuICAgICAgdGhpcy5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0aWVzQ2hhbmdlZChcbiAgICAgIGN1cnJlbnRQcm9wcyxcbiAgICAgIGNoYW5nZWRQcm9wcyxcbiAgICAgIG9sZFByb3BzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICApIHt9XG5cbiAgICBfY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIGlmICghZGF0YUhhc0FjY2Vzc29yW3Byb3BlcnR5XSkge1xuICAgICAgICBkYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHksIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiByZWFkT25seVxuICAgICAgICAgICAgPyAoKSA9PiB7fVxuICAgICAgICAgICAgOiBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHByb3BlcnR5LCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2dldFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gcHJpdmF0ZXModGhpcykuZGF0YVtwcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgX3NldFByb3BlcnR5KHByb3BlcnR5LCBuZXdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX2lzVmFsaWRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2coYGludmFsaWQgdmFsdWUgJHtuZXdWYWx1ZX0gZm9yIHByb3BlcnR5ICR7cHJvcGVydHl9IG9mXG5cdFx0XHRcdFx0dHlwZSAke3RoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XS50eXBlLm5hbWV9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMoKSB7XG4gICAgICBPYmplY3Qua2V5cyhkYXRhUHJvdG9WYWx1ZXMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID1cbiAgICAgICAgICB0eXBlb2YgZGF0YVByb3RvVmFsdWVzW3Byb3BlcnR5XSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBkYXRhUHJvdG9WYWx1ZXNbcHJvcGVydHldLmNhbGwodGhpcylcbiAgICAgICAgICAgIDogZGF0YVByb3RvVmFsdWVzW3Byb3BlcnR5XTtcbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgIE9iamVjdC5rZXlzKGRhdGFIYXNBY2Nlc3NvcikuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgIHByaXZhdGVzKHRoaXMpLmluaXRpYWxpemVQcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IHRoaXNbcHJvcGVydHldO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgaWYgKCFwcml2YXRlcyh0aGlzKS5zZXJpYWxpemluZykge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWUoXG4gICAgICAgICAgYXR0cmlidXRlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9pc1ZhbGlkUHJvcGVydHlWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5VHlwZSA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XVxuICAgICAgICAudHlwZTtcbiAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpc1ZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiBwcm9wZXJ0eVR5cGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc1ZhbGlkID0gYCR7dHlwZW9mIHZhbHVlfWAgPT09IHByb3BlcnR5VHlwZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9XG5cbiAgICBfcHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIHByaXZhdGVzKHRoaXMpLnNlcmlhbGl6aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuY29uc3RydWN0b3IucHJvcGVydHlOYW1lVG9BdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgICAgdmFsdWUgPSB0aGlzLl9zZXJpYWxpemVWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBwcml2YXRlcyh0aGlzKS5zZXJpYWxpemluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9kZXNlcmlhbGl6ZVZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpc051bWJlcixcbiAgICAgICAgaXNBcnJheSxcbiAgICAgICAgaXNCb29sZWFuLFxuICAgICAgICBpc0RhdGUsXG4gICAgICAgIGlzU3RyaW5nLFxuICAgICAgICBpc09iamVjdFxuICAgICAgfSA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICAgIGlmIChpc0Jvb2xlYW4pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdCB8fCBpc0FycmF5KSB7XG4gICAgICAgIHZhbHVlID1cbiAgICAgICAgICB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGlzQXJyYXlcbiAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgIDoge31cbiAgICAgICAgICAgIDogSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGF0ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBfc2VyaWFsaXplVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZyA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW1xuICAgICAgICBwcm9wZXJ0eVxuICAgICAgXTtcbiAgICAgIGNvbnN0IHsgaXNCb29sZWFuLCBpc09iamVjdCwgaXNBcnJheSB9ID0gcHJvcGVydHlDb25maWc7XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gJycgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QgfHwgaXNBcnJheSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHZhbHVlID8gdmFsdWUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgbGV0IG9sZCA9IHByaXZhdGVzKHRoaXMpLmRhdGFbcHJvcGVydHldO1xuICAgICAgbGV0IGNoYW5nZWQgPSB0aGlzLl9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCk7XG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICBpZiAoIXByaXZhdGVzKHRoaXMpLmRhdGFQZW5kaW5nKSB7XG4gICAgICAgICAgcHJpdmF0ZXModGhpcykuZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICBwcml2YXRlcyh0aGlzKS5kYXRhT2xkID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgaWYgKHByaXZhdGVzKHRoaXMpLmRhdGFPbGQgJiYgIShwcm9wZXJ0eSBpbiBwcml2YXRlcyh0aGlzKS5kYXRhT2xkKSkge1xuICAgICAgICAgIHByaXZhdGVzKHRoaXMpLmRhdGFPbGRbcHJvcGVydHldID0gb2xkO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGVzKHRoaXMpLmRhdGFbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIHByaXZhdGVzKHRoaXMpLmRhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuXG4gICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCFwcml2YXRlcyh0aGlzKS5kYXRhSW52YWxpZCkge1xuICAgICAgICBwcml2YXRlcyh0aGlzKS5kYXRhSW52YWxpZCA9IHRydWU7XG4gICAgICAgIG1pY3JvVGFzay5ydW4oKCkgPT4ge1xuICAgICAgICAgIGlmIChwcml2YXRlcyh0aGlzKS5kYXRhSW52YWxpZCkge1xuICAgICAgICAgICAgcHJpdmF0ZXModGhpcykuZGF0YUludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2ZsdXNoUHJvcGVydGllcygpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gcHJpdmF0ZXModGhpcykuZGF0YTtcbiAgICAgIGNvbnN0IGNoYW5nZWRQcm9wcyA9IHByaXZhdGVzKHRoaXMpLmRhdGFQZW5kaW5nO1xuICAgICAgY29uc3Qgb2xkID0gcHJpdmF0ZXModGhpcykuZGF0YU9sZDtcblxuICAgICAgaWYgKHRoaXMuX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UocHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkKSkge1xuICAgICAgICBwcml2YXRlcyh0aGlzKS5kYXRhUGVuZGluZyA9IG51bGw7XG4gICAgICAgIHByaXZhdGVzKHRoaXMpLmRhdGFPbGQgPSBudWxsO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXNDaGFuZ2VkKHByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UoXG4gICAgICBjdXJyZW50UHJvcHMsXG4gICAgICBjaGFuZ2VkUHJvcHMsXG4gICAgICBvbGRQcm9wcyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihjaGFuZ2VkUHJvcHMpO1xuICAgIH1cblxuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAgICAgIG9sZCAhPT0gdmFsdWUgJiZcbiAgICAgICAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgICAgICAgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICk7XG4gICAgfVxuICB9O1xufSk7XG4iLCIvKiAgKi9cbmltcG9ydCBjbGFzc0J1aWxkZXIgZnJvbSAnLi4vLi4vY2xhc3MtYnVpbGRlci5qcyc7XG5pbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQuanMnO1xuaW1wb3J0IGN1c3RvbUVsZW1lbnQsIHsgfSBmcm9tICcuL2N1c3RvbS1lbGVtZW50LW1peGluLmpzJztcbmltcG9ydCBwcm9wZXJ0aWVzLCB7IH0gZnJvbSAnLi9wcm9wZXJ0aWVzLW1peGluLmpzJztcbmltcG9ydCBldmVudHMsIHsgfSBmcm9tICcuL2V2ZW50cy1taXhpbi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIoXG4gIChcbiAgICBiYXNlQ2xhc3MgPSBjdXN0b21FbGVtZW50KClcbiAgKSA9PiB7XG4gICAgcmV0dXJuIGNsYXNzIENvbXBvbmVudCBleHRlbmRzIGNsYXNzQnVpbGRlcihiYXNlQ2xhc3MpLndpdGgoXG4gICAgICBldmVudHMsXG4gICAgICBwcm9wZXJ0aWVzXG4gICAgKSB7XG4gICAgICBwcm9wZXJ0aWVzQ2hhbmdlZChcbiAgICAgICAgY3VycmVudFByb3BzLFxuICAgICAgICBjaGFuZ2VkUHJvcHMsXG4gICAgICAgIG9sZFByb3BzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4pO1xuIiwiLyogICovXG5pbXBvcnQgdHlwZSBmcm9tICcuL3R5cGUuanMnO1xuXG5leHBvcnQgY29uc3QgZFNldCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgaWYgKGtleS5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgY29uc3QgZGVwdGggPSBwYXJ0cy5sZW5ndGggLSAxO1xuICBsZXQgb2JqZWN0ID0gb2JqO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGg7IGkrKykge1xuICAgIGlmICh0eXBlLnVuZGVmaW5lZChvYmplY3RbcGFydHNbaV1dKSkge1xuICAgICAgb2JqZWN0W3BhcnRzW2ldXSA9IHt9O1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3RbcGFydHNbaV1dO1xuICB9XG4gIG9iamVjdFtwYXJ0c1tkZXB0aF1dID0gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgZEdldCA9IChvYmosIGtleSwgZGVmYXVsdFZhbHVlID0gdW5kZWZpbmVkKSA9PiB7XG4gIGlmIChrZXkuaW5kZXhPZignLicpID09PSAtMSkge1xuICAgIHJldHVybiBvYmpba2V5XSA/IG9ialtrZXldIDogZGVmYXVsdFZhbHVlO1xuICB9XG4gIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGNvbnN0IGxlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgbGV0IG9iamVjdCA9IG9iajtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3BhcnRzW2ldXTtcbiAgICBpZiAodHlwZS51bmRlZmluZWQob2JqZWN0KSkge1xuICAgICAgb2JqZWN0ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufTtcblxuY29uc3QgeyBrZXlzIH0gPSBPYmplY3Q7XG5cbmV4cG9ydCBjb25zdCBvYmplY3RUb01hcCA9IChvKSA9PlxuICBrZXlzKG8pLnJlZHVjZSgobSwgaykgPT4gbS5zZXQoaywgb1trXSksIG5ldyBNYXAoKSk7XG4iLCIvKiAgKi9cbmltcG9ydCB0eXBlLCB7IGdldFR5cGUgfSBmcm9tICcuL3R5cGUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3JjKSA9PiBjbG9uZShzcmMsIFtdLCBbXSk7XG5cbmV4cG9ydCBjb25zdCBqc29uQ2xvbmUgPSAodmFsdWUsIHJldml2ZXIgPSAoaywgdikgPT4gdikgPT5cbiAgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSksIHJldml2ZXIpO1xuXG5mdW5jdGlvbiBjbG9uZShzcmMsIGNpcmN1bGFycyA9IFtdLCBjbG9uZXMgPSBbXSkge1xuICAvLyBOdWxsL3VuZGVmaW5lZC9mdW5jdGlvbnMvZXRjXG4gIGlmICghc3JjIHx8ICF0eXBlLm9iamVjdChzcmMpIHx8IHR5cGUuZnVuY3Rpb24oc3JjKSkge1xuICAgIHJldHVybiBzcmM7XG4gIH1cbiAgY29uc3QgdCA9IGdldFR5cGUoc3JjKTtcbiAgaWYgKHQgaW4gY2xvbmVUeXBlcykge1xuICAgIHJldHVybiBjbG9uZVR5cGVzW3RdLmFwcGx5KHNyYywgW2NpcmN1bGFycywgY2xvbmVzXSk7XG4gIH1cbiAgcmV0dXJuIHNyYztcbn1cblxuY29uc3QgY2xvbmVUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5nZXRUaW1lKCkpO1xuICB9LFxuICByZWdleHA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHRoaXMpO1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGNsb25lKTtcbiAgfSxcbiAgbWFwOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbSh0aGlzLnZhbHVlcygpKSk7XG4gIH0sXG4gIG9iamVjdDogZnVuY3Rpb24oY2lyY3VsYXJzID0gW10sIGNsb25lcyA9IFtdKSB7XG4gICAgY2lyY3VsYXJzLnB1c2godGhpcyk7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICBjbG9uZXMucHVzaChvYmopO1xuICAgIGZvciAobGV0IGtleSBpbiB0aGlzKSB7XG4gICAgICBsZXQgaWR4ID0gY2lyY3VsYXJzLmZpbmRJbmRleCgoaSkgPT4gaSA9PT0gdGhpc1trZXldKTtcbiAgICAgIG9ialtrZXldID0gaWR4ID4gLTEgPyBjbG9uZXNbaWR4XSA6IGNsb25lKHRoaXNba2V5XSwgY2lyY3VsYXJzLCBjbG9uZXMpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG59KTtcbiIsImltcG9ydCB7IGRHZXQsIGRTZXQgfSBmcm9tICcuL29iamVjdC5qcyc7XG5pbXBvcnQgeyBqc29uQ2xvbmUgfSBmcm9tICcuL2Nsb25lLmpzJztcbmltcG9ydCBpcyBmcm9tICcuL3R5cGUuanMnO1xuaW1wb3J0IGNyZWF0ZVN0b3JhZ2UgZnJvbSAnLi9jcmVhdGUtc3RvcmFnZS5qcyc7XG5pbXBvcnQgdW5pcXVlSWQgZnJvbSAnLi91bmlxdWUtaWQuanMnO1xuXG5jb25zdCBtb2RlbCA9IChiYXNlQ2xhc3MgPSBjbGFzcyB7fSkgPT4ge1xuICBjb25zdCBwcml2YXRlcyA9IGNyZWF0ZVN0b3JhZ2UoKTtcbiAgbGV0IHN1YnNjcmliZXJDb3VudCA9IDA7XG5cbiAgcmV0dXJuIGNsYXNzIE1vZGVsIGV4dGVuZHMgYmFzZUNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgIHRoaXMuX3N0YXRlS2V5ID0gdW5pcXVlSWQoJ19zdGF0ZScpO1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLl9zZXRTdGF0ZSh0aGlzLmRlZmF1bHRTdGF0ZSk7XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRTdGF0ZSgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBnZXQoYWNjZXNzb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRTdGF0ZShhY2Nlc3Nvcik7XG4gICAgfVxuXG4gICAgc2V0KGFyZzEsIGFyZzIpIHtcbiAgICAgIC8vc3VwcG9ydHMgKGFjY2Vzc29yLCBzdGF0ZSkgT1IgKHN0YXRlKSBhcmd1bWVudHMgZm9yIHNldHRpbmcgdGhlIHdob2xlIHRoaW5nXG4gICAgICBsZXQgYWNjZXNzb3IsIHZhbHVlO1xuICAgICAgaWYgKCFpcy5zdHJpbmcoYXJnMSkgJiYgaXMudW5kZWZpbmVkKGFyZzIpKSB7XG4gICAgICAgIHZhbHVlID0gYXJnMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gYXJnMjtcbiAgICAgICAgYWNjZXNzb3IgPSBhcmcxO1xuICAgICAgfVxuICAgICAgbGV0IG9sZFN0YXRlID0gdGhpcy5fZ2V0U3RhdGUoKTtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IGpzb25DbG9uZShvbGRTdGF0ZSk7XG5cbiAgICAgIGlmIChhY2Nlc3Nvcikge1xuICAgICAgICBkU2V0KG5ld1N0YXRlLCBhY2Nlc3NvciwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3U3RhdGUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgIHRoaXMuX25vdGlmeVN1YnNjcmliZXJzKGFjY2Vzc29yLCBuZXdTdGF0ZSwgb2xkU3RhdGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlU3Vic2NyaWJlcigpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzdWJzY3JpYmVyQ291bnQrKztcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb246IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICBzZWxmLl9zdWJzY3JpYmUoY29udGV4dCwgLi4uYXJncyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8vVE9ETzogaXMgb2ZmKCkgbmVlZGVkIGZvciBpbmRpdmlkdWFsIHN1YnNjcmlwdGlvbj9cbiAgICAgICAgZGVzdHJveTogdGhpcy5fZGVzdHJveVN1YnNjcmliZXIuYmluZCh0aGlzLCBjb250ZXh0KVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjcmVhdGVQcm9wZXJ0eUJpbmRlcihjb250ZXh0KSB7XG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVQcm9wZXJ0eUJpbmRlcihjb250ZXh0KSAtIGNvbnRleHQgbXVzdCBiZSBvYmplY3QnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQmluZGluZ3M6IGZ1bmN0aW9uKGJpbmRSdWxlcykge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShiaW5kUnVsZXNbMF0pKSB7XG4gICAgICAgICAgICBiaW5kUnVsZXMgPSBbYmluZFJ1bGVzXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYmluZFJ1bGVzLmZvckVhY2goYmluZFJ1bGUgPT4ge1xuICAgICAgICAgICAgc2VsZi5fc3Vic2NyaWJlKGNvbnRleHQsIGJpbmRSdWxlWzBdLCB2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgIGRTZXQoY29udGV4dCwgYmluZFJ1bGVbMV0sIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiB0aGlzLl9kZXN0cm95U3Vic2NyaWJlci5iaW5kKHRoaXMsIGNvbnRleHQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIF9nZXRTdGF0ZShhY2Nlc3Nvcikge1xuICAgICAgcmV0dXJuIGpzb25DbG9uZShhY2Nlc3NvciA/IGRHZXQocHJpdmF0ZXNbdGhpcy5fc3RhdGVLZXldLCBhY2Nlc3NvcikgOiBwcml2YXRlc1t0aGlzLl9zdGF0ZUtleV0pO1xuICAgIH1cblxuICAgIF9zZXRTdGF0ZShuZXdTdGF0ZSkge1xuICAgICAgcHJpdmF0ZXNbdGhpcy5fc3RhdGVLZXldID0gbmV3U3RhdGU7XG4gICAgfVxuXG4gICAgX3N1YnNjcmliZShjb250ZXh0LCBhY2Nlc3NvciwgY2IpIHtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpYmVycy5nZXQoY29udGV4dCkgfHwgW107XG4gICAgICBzdWJzY3JpcHRpb25zLnB1c2goeyBhY2Nlc3NvciwgY2IgfSk7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVycy5zZXQoY29udGV4dCwgc3Vic2NyaXB0aW9ucyk7XG4gICAgfVxuXG4gICAgX2Rlc3Ryb3lTdWJzY3JpYmVyKGNvbnRleHQpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzLmRlbGV0ZShjb250ZXh0KTtcbiAgICB9XG5cbiAgICBfbm90aWZ5U3Vic2NyaWJlcnMoc2V0QWNjZXNzb3IsIG5ld1N0YXRlLCBvbGRTdGF0ZSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbihzdWJzY3JpYmVycykge1xuICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uKHsgYWNjZXNzb3IsIGNiIH0pIHtcbiAgICAgICAgICAvL2UuZy4gIHNhPSdmb28uYmFyLmJheicsIGE9J2Zvby5iYXIuYmF6J1xuICAgICAgICAgIC8vZS5nLiAgc2E9J2Zvby5iYXIuYmF6JywgYT0nZm9vLmJhci5iYXouYmxheidcbiAgICAgICAgICBpZiAoYWNjZXNzb3IuaW5kZXhPZihzZXRBY2Nlc3NvcikgPT09IDApIHtcbiAgICAgICAgICAgIGNiKGRHZXQobmV3U3RhdGUsIGFjY2Vzc29yKSwgZEdldChvbGRTdGF0ZSwgYWNjZXNzb3IpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9lLmcuIHNhPSdmb28uYmFyLmJheicsIGE9J2Zvby4qJ1xuICAgICAgICAgIGlmIChhY2Nlc3Nvci5pbmRleE9mKCcqJykgPiAtMSkge1xuICAgICAgICAgICAgY29uc3QgZGVlcEFjY2Vzc29yID0gYWNjZXNzb3IucmVwbGFjZSgnLionLCAnJykucmVwbGFjZSgnKicsICcnKTtcbiAgICAgICAgICAgIGlmIChzZXRBY2Nlc3Nvci5pbmRleE9mKGRlZXBBY2Nlc3NvcikgPT09IDApIHtcbiAgICAgICAgICAgICAgY2IoZEdldChuZXdTdGF0ZSwgZGVlcEFjY2Vzc29yKSwgZEdldChvbGRTdGF0ZSwgZGVlcEFjY2Vzc29yKSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IG1vZGVsO1xuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAoYmVoYXZpb3VyLCAuLi5tZXRob2ROYW1lcykgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24oa2xhc3MpIHtcbiAgICBjb25zdCBwcm90byA9IGtsYXNzLnByb3RvdHlwZTtcbiAgICBjb25zdCBsZW4gPSBtZXRob2ROYW1lcy5sZW5ndGg7XG4gICAgY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSB9ID0gT2JqZWN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcbiAgICAgIGNvbnN0IG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdO1xuICAgICAgZGVmaW5lUHJvcGVydHkocHJvdG8sIG1ldGhvZE5hbWUsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGJlaGF2aW91ci5jYWxsKHRoaXMsIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBrbGFzcztcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsicHJldlRpbWVJZCIsInByZXZVbmlxdWVJZCIsInByZWZpeCIsIm5ld1VuaXF1ZUlkIiwiRGF0ZSIsIm5vdyIsInVuaXF1ZUlkIiwiU3RyaW5nIiwiZnJlZXplIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsImhhc093blByb3BlcnR5IiwiY3JlYXRlTWl4aW4iLCJtaXhpbiIsIndyYXAiLCJzdXBlckNsYXNzIiwibyIsImlzQXBwbGljYXRpb25PZiIsImhhc01peGluIiwicHJvdG90eXBlIiwiZGVkdXBlTWl4aW4iLCJjYWNoZWRBcHBsaWNhdGlvbiIsImNhY2hlZEFwcGxpY2F0aW9uS2V5IiwiTWFwIiwiYXBwbGljYXRpb24iLCJnZXQiLCJzZXQiLCJjYWNoZU1peGluIiwiYXBwbGllZE1peGluS2V5IiwidW53cmFwIiwiYXBwbHlNaXhpbiIsImRlY2xhcmVNaXhpbiIsIkN0b3IiLCJtaXhpbnMiLCJtYXAiLCJyZWR1Y2UiLCJrIiwibSIsIndyYXBwZWRNaXhpbktleSIsIndyYXBwZXIiLCJwcm90byIsImNhbGwiLCJjcmVhdG9yIiwiY3JlYXRlIiwiYmluZCIsInN0b3JlIiwiV2Vha01hcCIsIm9iaiIsInZhbHVlIiwiYWxsIiwiYXJyIiwiZm4iLCJCb29sZWFuIiwiZXZlcnkiLCJhbnkiLCJzb21lIiwiZG9BbGxBcGkiLCJwYXJhbXMiLCJkb0FueUFwaSIsInRvU3RyaW5nIiwidHlwZXMiLCJzcGxpdCIsImxlbiIsImxlbmd0aCIsInR5cGVDYWNoZSIsInR5cGVSZWdleHAiLCJjaGVja3MiLCJpIiwidHlwZSIsInRvTG93ZXJDYXNlIiwiZ2V0U3JjVHlwZSIsInNyYyIsInNldHVwIiwiZ2V0VHlwZSIsIm1hdGNoZXMiLCJtYXRjaCIsIkFycmF5IiwiaXNBcnJheSIsImJlaGF2aW91ciIsIm1ldGhvZE5hbWVzIiwia2xhc3MiLCJkZWZpbmVQcm9wZXJ0eSIsIm1ldGhvZE5hbWUiLCJtZXRob2QiLCJhcmdzIiwiYXBwbHkiLCJ0aGlzIiwidW5zaGlmdCIsInJldHVyblZhbHVlIiwiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJpbmNsdWRlcyIsImJyb3dzZXIiLCJyYWlzZSIsIkVycm9yIiwibmFtZSIsInBhc3NUaHJvdWdoIiwicmVhZHlTdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRlbXBsYXRlIiwiY3JlYXRlRWxlbWVudCIsImltcG9ydE5vZGUiLCJjb250ZW50IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiYXBwZW5kQ2hpbGQiLCJjbG9uZU5vZGUiLCJodG1sIiwiaW5uZXJIVE1MIiwidHJpbSIsImZyYWciLCJ0ZW1wbGF0ZUNvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZSIsInNpYmxpbmdzIiwicGFyZW50Tm9kZSIsInNpYmxpbmciLCJub2RlVHlwZSIsInB1c2giLCJuZXh0U2libGluZyIsImVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJjaGlsZCIsInBhcmVudCIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJtaWNyb1Rhc2tDdXJySGFuZGxlIiwibWljcm9UYXNrTGFzdEhhbmRsZSIsIm1pY3JvVGFza0NhbGxiYWNrcyIsIm1pY3JvVGFza05vZGVDb250ZW50IiwibWljcm9UYXNrTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiTXV0YXRpb25PYnNlcnZlciIsImNiIiwiZXJyIiwic3BsaWNlIiwib2JzZXJ2ZSIsIm1pY3JvVGFzayIsImNhbGxiYWNrIiwidGV4dENvbnRlbnQiLCJoYW5kbGUiLCJpZHgiLCJ0YXJnZXQiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJpbmRleE9mIiwiZXZlbnRzIiwiaGFuZGxlcyIsImFkZExpc3RlbmVyIiwicmVtb3ZlIiwicG9wIiwicGFyc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuRXZlbnQiLCJwYXVzZWQiLCJldnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImdsb2JhbCIsImRlZmF1bHRWaWV3IiwiSFRNTEVsZW1lbnQiLCJfSFRNTEVsZW1lbnQiLCJiYXNlQ2xhc3MiLCJjdXN0b21FbGVtZW50c1YxQ2FsbGJhY2tzIiwicHJpdmF0ZXMiLCJjcmVhdGVTdG9yYWdlIiwiX2Jhc2VDbGFzcyIsImNvbnN0cnVjdCIsImZpbmFsaXplQ2xhc3MiLCJkZWZpbmUiLCJ0YWdOYW1lIiwicmVnaXN0cnkiLCJjdXN0b21FbGVtZW50cyIsImZvckVhY2giLCJjYWxsYmFja01ldGhvZE5hbWUiLCJuZXdDYWxsYmFja05hbWUiLCJzdWJzdHJpbmciLCJvcmlnaW5hbE1ldGhvZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiY29ubmVjdGVkIiwiaW5pdGlhbGl6ZWQiLCJyZW5kZXIiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImNvbnRleHQiLCJydW4iLCJyZW5kZXJDYWxsYmFjayIsInJlbmRlcmluZyIsImZpcnN0UmVuZGVyIiwidW5kZWZpbmVkIiwiX29uUmVuZGVyIiwiX3Bvc3RSZW5kZXIiLCJhdHRyaWJ1dGVDaGFuZ2VkIiwiYXR0cmlidXRlTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJkaXNjb25uZWN0ZWQiLCJhZG9wdGVkIiwiYXNzaWduIiwiY29tcG9uZW50V2lsbFJlbmRlciIsInN0YXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsInJlbmRlcmVkU3RhdGUiLCJwcmV2aW91c1N0YXRlIiwiY29tcG9uZW50RGlkUmVuZGVyIiwiY29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJkZWZhdWx0U3RhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0U3RhdGUiLCJrZXkiLCJjaGFuZ2VzIiwibmV3U3RhdGUiLCJoeXBlblJlZ0V4IiwiZWxlbWVudENoaWxkcmVuIiwiYXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic2xvdCIsInJlcGxhY2UiLCJ0b1VwcGVyQ2FzZSIsInNsb3RzIiwiZGVmYXVsdCIsInNsb3RzQXNzaWduZWQiLCJldmVudERlZmF1bHRQYXJhbXMiLCJvZmYiLCJoYW5kbGVFdmVudCIsImV2ZW50Iiwib24iLCJvd24iLCJkaXNwYXRjaCIsImRhdGEiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJfdGhpczIiLCJrZXlzIiwiYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lc1RvQXR0cmlidXRlcyIsInByb3BlcnRpZXNDb25maWciLCJkYXRhSGFzQWNjZXNzb3IiLCJkYXRhUHJvdG9WYWx1ZXMiLCJub3JtYWxpemVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImNvbmZpZyIsIm91dHB1dCIsInByb3BlcnR5IiwiaGFzT2JzZXJ2ZXIiLCJpc09ic2VydmVyU3RyaW5nIiwib2JzZXJ2ZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiTnVtYmVyIiwiaXNCb29sZWFuIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJub3RpZnkiLCJyZWFkT25seSIsInJlZmxlY3RUb0F0dHJpYnV0ZSIsImluaXRpYWxpemVQcm9wZXJ0aWVzIiwiX2ZsdXNoUHJvcGVydGllcyIsIl9hdHRyaWJ1dGVUb1Byb3BlcnR5IiwiY3VycmVudFByb3BzIiwiY2hhbmdlZFByb3BzIiwib2xkUHJvcHMiLCJjb25zdHJ1Y3RvciIsImNsYXNzUHJvcGVydGllcyIsIl9wcm9wZXJ0eVRvQXR0cmlidXRlIiwiY3JlYXRlUHJvcGVydGllcyIsImF0dHJpYnV0ZVRvUHJvcGVydHlOYW1lIiwicHJvcGVydHlOYW1lVG9BdHRyaWJ1dGUiLCJwcm9wZXJ0eVZhbHVlIiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJzZXJpYWxpemluZyIsImRhdGFQZW5kaW5nIiwiZGF0YU9sZCIsImRhdGFJbnZhbGlkIiwiX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMiLCJfaW5pdGlhbGl6ZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzQ2hhbmdlZCIsIl9nZXRQcm9wZXJ0eSIsIl9zZXRQcm9wZXJ0eSIsIl9pc1ZhbGlkUHJvcGVydHlWYWx1ZSIsIl9zZXRQZW5kaW5nUHJvcGVydHkiLCJfaW52YWxpZGF0ZVByb3BlcnRpZXMiLCJsb2ciLCJfdGhpczMiLCJfdGhpczQiLCJfZGVzZXJpYWxpemVWYWx1ZSIsInByb3BlcnR5VHlwZSIsIl9zZXJpYWxpemVWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIkpTT04iLCJwcm9wZXJ0eUNvbmZpZyIsInN0cmluZ2lmeSIsIm9sZCIsImNoYW5nZWQiLCJfc2hvdWxkUHJvcGVydHlDaGFuZ2UiLCJfdGhpczUiLCJwcm9wcyIsIl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlIiwiX3RoaXM2IiwiZ2V0UHJvcGVydGllc0NvbmZpZyIsImNoZWNrT2JqIiwibG9vcCIsIkZ1bmN0aW9uIiwiY3VzdG9tRWxlbWVudCIsImNsYXNzQnVpbGRlciIsIndpdGgiLCJkU2V0IiwicGFydHMiLCJkZXB0aCIsIm9iamVjdCIsImRHZXQiLCJkZWZhdWx0VmFsdWUiLCJqc29uQ2xvbmUiLCJyZXZpdmVyIiwidiIsImNsb25lIiwiY2lyY3VsYXJzIiwiY2xvbmVzIiwiZnVuY3Rpb24iLCJ0IiwiY2xvbmVUeXBlcyIsImdldFRpbWUiLCJSZWdFeHAiLCJmcm9tIiwiZW50cmllcyIsIlNldCIsInZhbHVlcyIsImZpbmRJbmRleCIsIl90aGlzIiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyQ291bnQiLCJzdWJzY3JpcHRpb25zIiwiaGFzIiwic3Vic2NyaWJlciIsImRlbGV0ZSIsIl9zdGF0ZUtleSIsIl9zdWJzY3JpYmVycyIsIl9zZXRTdGF0ZSIsImFjY2Vzc29yIiwiX2dldFN0YXRlIiwiYXJnMSIsImFyZzIiLCJpcyIsInN0cmluZyIsIm9sZFN0YXRlIiwiX25vdGlmeVN1YnNjcmliZXJzIiwiY3JlYXRlU3Vic2NyaWJlciIsInNlbGYiLCJfc3Vic2NyaWJlIiwiX2Rlc3Ryb3lTdWJzY3JpYmVyIiwiY3JlYXRlUHJvcGVydHlCaW5kZXIiLCJiaW5kUnVsZXMiLCJiaW5kUnVsZSIsInNldEFjY2Vzc29yIiwiZGVlcEFjY2Vzc29yIl0sIm1hcHBpbmdzIjoicU1BRUEsSUFBSUEsRUFBYSxFQUNiQyxFQUFlLGFBRUhDLE9BQ1ZDLEVBQWNDLEtBQUtDLE1BQ25CRixJQUFnQkgsSUFDaEJDLEtBRVdFLElBQ0UsT0FHYkcsS0FBY0MsT0FBT0osR0FBZUksT0FBT04sVUFDM0NDLE1BQ1lBLE1BQVVJLEdBRW5CQSxtZ0NDZkRFLEVBQTJEQyxPQUEzREQsT0FBUUUsRUFBbURELE9BQW5EQyxlQUFnQkMsRUFBbUNGLE9BQW5DRSxlQUFnQkMsRUFBbUJILE9BQW5CRyxlQUduQ0MsRUFBYyxTQUFDQyxVQXNJNUIsU0FBcUJBLFVBQ1pDLEVBQ0xELEVBQ0EsU0FBQ0UsVUFsQ0wsU0FBa0JDLEVBQUdILFFBQ04sT0FBTkcsR0FBWSxJQUNiQyxFQUFnQkQsRUFBR0gsVUFDZCxJQUVMSCxFQUFlTSxVQUVkLEVBMkJZRSxDQUFTSCxFQUFXSSxVQUFXTixHQUFTRSxFQUFhRixFQUFNRSxLQXpJMUNLLENBd0p0QyxTQUFvQlAsVUFDWEMsRUFBS0QsRUFBTyxTQUFDRSxPQUNkTSxFQUFvQk4sRUFBV08sR0FDOUJELE1BQ2lCTixFQUFXTyxHQUF3QixJQUFJQyxTQUl6REMsRUFBY0gsRUFBa0JJLElBQUlaLFVBQ25DVyxNQUNXWCxFQUFNRSxLQUNGVyxJQUFJYixFQUFPVyxJQUV4QkEsSUFyS3VDRyxDQTBIbEQsU0FBc0JkLFVBQ2JDLEVBQUtELEVBQU8sU0FBQ0UsVUF0RHRCLFNBQW9CQSxFQUFZRixPQUMxQlcsRUFBY1gsRUFBTUUsVUFDVlMsRUFBWUwsVUFDcEJTLEdBQW1CQyxFQUFPaEIsR0FDekJXLEVBa0Q0Qk0sQ0FBV2YsRUFBWUYsS0EzSENrQixDQUFhbEIsdUJBRTFEbUIsNkdBQ2R6Qiw4Q0FDVTBCLGdEQUNDQSxFQUFPQyxJQUFJLFNBQUNyQixVQUFVRCxFQUFZQyxLQUFRc0IsT0FB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

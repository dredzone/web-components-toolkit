!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var e=0,n=0,r=function(t){var r=Date.now();r===e?++n:(e=r,n=0);var o=""+String(r)+String(n);return t&&(o=t+"_"+o),o},o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},a=Object.freeze,c=Object.setPrototypeOf,f=Object.getPrototypeOf,s=Object.hasOwnProperty,l=r("_wrappedMixin"),p=r("_appliedMixin"),v=r("_cachedApplication"),h=function(t){return function(t){return d(t,function(e){return function(t,e){for(;null!==t;){if(b(t,e))return!0;t=f(t)}return!1}(e.prototype,t)?e:t(e)})}(function(t){return d(t,function(e){var n=e[v];n||(n=e[v]=new Map);var r=n.get(t);return r||(r=t(e),n.set(t,r)),r})}(function(t){return d(t,function(e){return function(t,e){var n=e(t);return n.prototype[p]=y(e),n}(e,t)})}(t)))};function d(t,e){return c(e,t),t[l]||(t[l]=t),e}function y(t){return t[l]||t}function b(t,e){return s.call(t,p)&&t[p]===y(e)}var g=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),e=new WeakMap;return function(n){var r=e.get(n);return r||e.set(n,r=t(n)),r}},m=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.some(e)},w=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Boolean;return t.every(e)},O=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return w(n,t)}},_=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return m(n,t)}},E=Object.prototype.toString,S=["Map","Set","Symbol","Array","Object","String","Date","RegExp","Function","Boolean","Number","Null","Undefined","Arguments","Error"],j=S.length,A={},x=/\s([a-zA-Z]+)/,N=function(){for(var t={},e=function(e){var n=S[e].toLowerCase();t[n]=function(t){return P(t)===n},t[n].all=O(t[n]),t[n].any=_(t[n])},n=j;n--;)e(n);return t}(),M=function(t){return P(t)};function P(t){var e=E.call(t);if(!A[e]){var n=e.match(x);Array.isArray(n)&&n.length>1&&(A[e]=n[1].toLowerCase())}return A[e]}var C=0,T=0,L=[],B=0,D=document.createTextNode("");new MutationObserver(function(){for(var t=L.length,e=0;e<t;e++){var n=L[e];if(n&&"function"==typeof n)try{n()}catch(t){setTimeout(function(){throw t})}}L.splice(0,t),T+=t}).observe(D,{characterData:!0});var k=Object.freeze({run:function(t){return D.textContent=String(B++),L.push(t),C++},cancel:function(t){var e=t-T;if(e>=0){if(!L[e])throw new Error("invalid async handle: "+t);L[e]=null}}}),z=function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var e=document.createDocumentFragment(),n=t.childNodes,r=0;r<n.length;r++)e.appendChild(n[r].cloneNode(!0));return e},K=function(t,e,n){return function(t,e,n,r){if(e.indexOf(",")>-1){var o=e.split(/\s*,\s*/),i=o.map(function(e){return R(t,e,n,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=i.pop();)t.remove()}}}return R(t,e,n,r)}(t,e,n,arguments.length>3&&void 0!==arguments[3]&&arguments[3])};function R(t,e,n,r){if(t.addEventListener)return t.addEventListener(e,n,r),{remove:function(){this.remove=function(){},t.removeEventListener(e,n,r)}};throw new Error("target must be an event emitter")}var F=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===e.indexOf("."))return t[e]?t[e]:n;for(var r=e.split("."),o=r.length,i=t,u=0;u<o;u++)if(void 0===(i=i[r[u]]))return void(i=n);return i},U=function(t,e,n){if(-1!==e.indexOf(".")){for(var r=e.split("."),o=r.length-1,i=t,u=0;u<o;u++)void 0===i[r[u]]&&(i[r[u]]={}),i=i[r[u]];i[r[o]]=n}else t[e]=n};function H(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(!t||!N.object(t)||N.function(t))return t;var r=M(t);return r in J?J[r].apply(t,[e,n]):t}var J=Object.freeze({date:function(){return new Date(this.getTime())},regexp:function(){return new RegExp(this)},array:function(){return this.map(H)},map:function(){return new Map(Array.from(this.entries()))},set:function(){return new Set(Array.from(this.values()))},object:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];e.push(this);var r=Object.create(this);n.push(r);var o=function(o){var i=e.findIndex(function(e){return e===t[o]});r[o]=i>-1?n[i]:H(t[o],e,n)};for(var i in this)o(i);return r}}),I=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t,e){return e};return JSON.parse(JSON.stringify(t),e)};t.classBuilder=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function t(){o(this,t)};return a({with:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.map(function(t){return h(t)}).reduce(function(t,e){return e(t)},t)}})},t.createStorage=g,t.is=N,t.eventHubFactory=function(){var t=new Map,e=0;return{publish:function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.forEach(function(t){(t.get(e)||[]).forEach(function(t){t.apply(void 0,r)})}),this},createSubscriber:function(){var n=e++;return{on:function(e,r){t.has(n)||t.set(n,new Map);var o=t.get(n);return o.has(e)||o.set(e,[]),o.get(e).push(r),this},off:function(e){return t.get(n).delete(e),this},destroy:function(){t.delete(n)}}}}},t.model=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function t(){o(this,t)},e=g(),n=0;return function(t){function a(){o(this,a);for(var e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];var c=u(this,t.call.apply(t,[this].concat(n)));return c._stateKey=r("_state"),c._subscribers=new Map,c._setState(c.defaultState),c}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(a,t),a.prototype.get=function(t){return this._getState(t)},a.prototype.set=function(t,e){var n=void 0,r=void 0;!N.string(t)&&N.undefined(e)?r=t:(r=e,n=t);var o=this._getState(),i=I(o);return n?U(i,n,r):i=r,this._setState(i),this._notifySubscribers(n,i,o),this},a.prototype.createSubscriber=function(){var t=n++,e=this;return{on:function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return e._subscribe.apply(e,[t].concat(r)),this},destroy:this._destroySubscriber.bind(this,t)}},a.prototype.createPropertyBinder=function(t){if(!t)throw new Error("createPropertyBinder(context) - context must be object");var e=this;return{addBindings:function(n){return Array.isArray(n[0])||(n=[n]),n.forEach(function(n){e._subscribe(t,n[0],function(e){U(t,n[1],e)})}),this},destroy:this._destroySubscriber.bind(this,t)}},a.prototype._getState=function(t){return I(t?F(e[this._stateKey],t):e[this._stateKey])},a.prototype._setState=function(t){e[this._stateKey]=t},a.prototype._subscribe=function(t,e,n){var r=this._subscribers.get(t)||[];r.push({accessor:e,cb:n}),this._subscribers.set(t,r)},a.prototype._destroySubscriber=function(t){this._subscribers.delete(t)},a.prototype._notifySubscribers=function(t,e,n){this._subscribers.forEach(function(r){r.forEach(function(r){var o=r.accessor,i=r.cb;if(0!==o.indexOf(t)){if(o.indexOf("*")>-1){var u=o.replace(".*","").replace("*","");if(0===t.indexOf(u))return void i(F(e,u),F(n,u))}}else i(F(e,o),F(n,o))})})},i(a,[{key:"defaultState",get:function(){return{}}}]),a}(t)},t.microTask=k,t.documentReady=function(t){return"loading"===document.readyState?new Promise(function(e){document.addEventListener("DOMContentLoaded",function(){return e(t)})}):Promise.resolve(t)},t.createElement=function(t){var e=document.createElement("template");e.innerHTML=t.trim();var n=z(e);if(n&&n.firstChild)return n.firstChild;throw new Error("Unable to createElement for "+t)},t.elementSiblings=function(t){var e=[];if(t.parentNode&&t.parentNode.firstChild){var n=t.parentNode.firstChild;do{1===n.nodeType&&n!==t&&e.push(n)}while(n.nextSibling&&null!==n.nextSibling&&(n=n.nextSibling))}return e},t.removeElement=function(t){t.parentElement&&t.parentElement.removeChild(t)},t.isDescendantElement=function(t,e){for(;t.parentNode&&(t=t.parentNode)&&t!==e;);return Boolean(t)},t.elementChildren=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Node.ELEMENT_NODE,n=t.childNodes,r=[];if(n&&n.length>0)for(var o=n.length;o--;)n[o].nodeType===e&&r.unshift(n[o]);return r},t.templateContent=z,t.listenEvent=K,t.listenEventOnce=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=K(t,e,function(){o.remove(),n.apply(void 0,arguments)},r);return o},t.pausableEvent=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=!1,i=K(t,e,function(){o||n.apply(void 0,arguments)},r);return{remove:function(){i.remove()},pause:function(){o=!0},resume:function(){o=!1}}},t.before=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.apply(this,n),u.apply(this,n)},writable:!0})},a=0;a<o;a++)u(a);return e}},t.around=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.unshift(u),t.apply(this,n)},writable:!0})},a=0;a<o;a++)u(a);return e}},t.after=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=u.apply(this,n);return t.apply(this,n),o},writable:!0})},a=0;a<o;a++)u(a);return e}},t.afterThrow=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,o=n.length,i=Object.defineProperty,u=function(e){var o=n[e],u=r[o];i(r,o,{value:function(){try{for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return u.apply(this,n)}catch(e){t.call(this,e)}},writable:!0})},a=0;a<o;a++)u(a);return e}},t.any=m,t.all=w,t.dget=F,t.dset=U,t.clone=function(t){return H(t,[],[])},t.jsonClone=I,t.objectToMap=function(t){return Object.keys(t).reduce(function(e,n){return e.set(n,t[n])},new Map)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.VoyaUtilityToolkit={})}(this,function(t){"use strict";var e=0,n=0,r=function(t){var r=Date.now();r===e?++n:(e=r,n=0);var i=""+String(r)+String(n);return t&&(i=t+"_"+i),i},i=r("_wrappedMixin"),o=r("_appliedMixin"),a=function(t){return t[i]||t},s=Object.setPrototypeOf,u=function(t,e){return s(e,t),t[i]||(t[i]=t),e},c=function(t){return u(t,function(e){return function(t,e){var n=e(t);return n.prototype[o]=a(e),n}(e,t)})},l=Object.hasOwnProperty,p=function(t,e){return l.call(t,o)&&t[o]===a(e)},f=Object.getPrototypeOf,h=function(t){return u(t,function(e){return function(t,e){for(;null!==t;){if(p(t,e))return!0;t=f(t)}return!1}(e.prototype,t)?e:t(e)})},d=r("_cachedApplication"),y=function(t){return h(function(t){return u(t,function(e){var n=e[d];n||(n=e[d]=new Map);var r=n.get(t);return r||(r=t(e),n.set(t,r)),r})}(c(t)))},v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},g=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),m=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},P=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},O=Object.freeze,_=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return function t(){b(this,t)}}();return O({with:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return n.map(function(t){return y(t)}).reduce(function(t,e){return e(t)},t)}})},w=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.create.bind(null,null,{}),e=new WeakMap;return function(n){var r=e.get(n);return r||e.set(n,r=t(n)),r}},C=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.apply(this,n),a.apply(this,n)},writable:!0})},s=0;s<i;s++)a(s);return e}},j=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.unshift(a),t.apply(this,n)},writable:!0})},s=0;s<i;s++)a(s);return e}},E=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=a.apply(this,n);return t.apply(this,n),i},writable:!0})},s=0;s<i;s++)a(s);return e}},A=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t.childNodes,r=[];if(n&&n.length>0)for(var i=n.length;i--;)n[i].nodeType===e&&r.unshift(n[i]);return r},z=0,S=0,T=[],k=0,N=document.createTextNode("");new MutationObserver(function(){for(var t=T.length,e=0;e<t;e++){var n=T[e];if(n&&"function"==typeof n)try{n()}catch(t){setTimeout(function(){throw t})}}T.splice(0,t),S+=t}).observe(N,{characterData:!0});var x={run:function(t){return N.textContent=String(k++),T.push(t),z++},cancel:function(t){var e=t-S;if(e>=0){if(!T[e])throw new Error("invalid async handle: "+t);T[e]=null}}};var D=function(t,e,n){return function(t,e,n,r){if(e.indexOf(",")>-1){var i=e.split(/\s*,\s*/),o=i.map(function(e){return M(t,e,n,r)});return{remove:function(){this.remove=function(){};for(var t=void 0;t=o.pop();)t.remove()}}}return M(t,e,n,r)}(t,e,n,arguments.length>3&&void 0!==arguments[3]&&arguments[3])};function M(t,e,n,r){if(t.addEventListener)return t.addEventListener(e,n,r),{remove:function(){this.remove=function(){},t.removeEventListener(e,n,r)}};throw new Error("target must be an event emitter")}var R=document.defaultView;if("function"!=typeof R.HTMLElement){var L=function(){};L.prototype=R.HTMLElement.prototype,R.HTMLElement=L}var V=function(t){var e=["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"],n=Object.defineProperty,r=Object.hasOwnProperty,i=w();return t||(t=function(t){function e(){return b(this,e),P(this,t.apply(this,arguments))}return m(e,t),e}(R.HTMLElement)),function(t){function o(){b(this,o);for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=P(this,t.call.apply(t,[this].concat(n)));return i.construct(),i}return m(o,t),o.finalizeClass=function(){},o.define=function(t){var o=customElements;if(!o.get(t)){var a=this.prototype;e.forEach(function(t){r.call(a,t)||n(a,t,{value:function(){},configurable:!0});var e=t.substring(0,t.length-"callback".length),i=a[t];n(a,t,{value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];this[e].apply(this,n),i.apply(this,n)},configurable:!0})}),this.finalizeClass(),j(function(t){i(this).connected=!0,i(this).initialized||(i(this).initialized=!0,t.call(this),this.render())},"connected")(this),j(function(t){var e=this;i(e).connected=!1,x.run(function(){!i(e).connected&&i(e).initialized&&(i(e).initialized=!1,t.call(e))})},"disconnected")(this),j(function(t){var e=this;if(!i(e).rendering){var n=void 0===i(e).rendering;i(e).rendering=!0,x.run(function(){i(e).rendering&&(i(e).rendering=!1,e._onRender(n),t.call(e),e._postRender(n))})}},"render")(this),o.define(t,this)}},g(o,[{key:"initialized",get:function(){return!0===i(this).initialized}}],[{key:"observedAttributes",get:function(){return[]}}]),o.prototype.construct=function(){},o.prototype.attributeChanged=function(t,e,n){},o.prototype.connected=function(){},o.prototype.disconnected=function(){},o.prototype.adopted=function(){},o.prototype.render=function(){},o.prototype._onRender=function(){},o.prototype._postRender=function(){},o}(t)},U=function(t){var e=Object.assign,n=w(function(){return{handlers:[]}}),r={bubbles:!1,cancelable:!1};return function(t){function i(){return b(this,i),P(this,t.apply(this,arguments))}return m(i,t),i.finalizeClass=function(){t.finalizeClass.call(this),E(function(){this.off()},"disconnected")(this)},i.prototype.handleEvent=function(t){var e="on"+t.type;"function"==typeof this[e]&&this[e](t)},i.prototype.on=function(t,e,n){this.own(D(this,t,e,n))},i.prototype.dispatch=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.dispatchEvent(new CustomEvent(t,e(r,{detail:n})))},i.prototype.off=function(){n(this).handlers.forEach(function(t){t.remove()})},i.prototype.own=function(){for(var t=this,e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];r.forEach(function(e){n(t).handlers.push(e)})},i}(t)},B=function(t){var e=Object.defineProperty,n=Object.keys,r=Object.assign,i={},o={},a=w(),s=void 0,u={},c={};function l(t){var e,n={};for(var r in t)if(Object.hasOwnProperty.call(t,r)){var i=t[r];n[r]="function"==typeof i?{type:i}:i,(e=n[r]).hasObserver="observer"in e,e.isObserverString=e.hasObserver&&"string"==typeof e.observer,e.isString=e.type===String,e.isNumber=e.type===Number,e.isBoolean=e.type===Boolean,e.isObject=e.type===Object,e.isArray=e.type===Array,e.isDate=e.type===Date,e.notify="notify"in e,e.readOnly="readOnly"in e&&e.readOnly,e.reflectToAttribute="reflectToAttribute"in e?e.reflectToAttribute:e.isString||e.isNumber||e.isBoolean}return n}return function(t){function p(){return b(this,p),P(this,t.apply(this,arguments))}return m(p,t),p.finalizeClass=function(){t.finalizeClass.call(this),C(function(){Object.keys(a(this).initializeProperties).length>0&&(r(this,a(this).initializeProperties),a(this).initializeProperties={}),this._flushProperties()},"connected")(this),C(function(t,e,n){e!==n&&this._attributeToProperty(t,n)},"attributeChanged")(this),C(function(t,e,n){var r=this,i=this;Object.keys(e).forEach(function(t){var o=i.constructor.classProperties[t],a=o.notify,s=o.hasObserver,u=o.reflectToAttribute,c=o.isObserverString,l=o.observer;u&&i._propertyToAttribute(t,e[t]),s&&c?r[l](e[t],n[t]):s&&"function"==typeof l&&l.apply(i,[e[t],n[t]]),a&&i.dispatchEvent(new CustomEvent(t+"-changed",{detail:{newValue:e[t],oldValue:n[t]}}))})},"propertiesChanged")(this),this.createProperties()},p.attributeToPropertyName=function(t){var e=i[t];if(!e){e=t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()}),i[t]=e}return e},p.propertyNameToAttribute=function(t){var e=o[t];if(!e){e=t.replace(/([A-Z])/g,"-$1").toLowerCase(),o[t]=e}return e},p.createProperties=function(){var t=this.prototype,e=this.classProperties;n(e).forEach(function(n){if(Object.hasOwnProperty.call(t,n))throw new Error("Unable to setup property '"+n+"', property already exists");var r=e[n].value;void 0!==r&&(c[n]=r),t._createPropertyAccessor(n,e[n].readOnly)})},p.prototype.construct=function(){t.prototype.construct.call(this),a(this).data={},a(this).serializing=!1,a(this).initializeProperties={},a(this).dataPending=null,a(this).dataOld=null,a(this).dataInvalid=!1,this._initializeProtoProperties(),this._initializeProperties()},p.prototype.propertiesChanged=function(t,e,n){},p.prototype._createPropertyAccessor=function(t,n){u[t]||(u[t]=!0,e(this,t,{enumerable:!0,configurable:!0,get:function(){return this._getProperty(t)},set:n?function(){}:function(e){this._setProperty(t,e)}}))},p.prototype._getProperty=function(t){return a(this).data[t]},p.prototype._setProperty=function(t,e){this._isValidPropertyValue(t,e)?this._setPendingProperty(t,e)&&this._invalidateProperties():console.log("invalid value "+e+" for property "+t+" of \n\t\t\t\t\ttype "+this.constructor.classProperties[t].type.name)},p.prototype._initializeProtoProperties=function(){var t=this;Object.keys(c).forEach(function(e){var n="function"==typeof c[e]?c[e].call(t):c[e];t._setProperty(e,n)})},p.prototype._initializeProperties=function(){var t=this;Object.keys(u).forEach(function(e){Object.hasOwnProperty.call(t,e)&&(a(t).initializeProperties[e]=t[e],delete t[e])})},p.prototype._attributeToProperty=function(t,e){if(!a(this).serializing){var n=this.constructor.attributeToPropertyName(t);this[n]=this._deserializeValue(n,e)}},p.prototype._isValidPropertyValue=function(t,e){var n=this.constructor.classProperties[t].type;return"object"===(void 0===e?"undefined":v(e))?e instanceof n:""+(void 0===e?"undefined":v(e))===n.name.toLowerCase()},p.prototype._propertyToAttribute=function(t,e){a(this).serializing=!0;var n=this.constructor.propertyNameToAttribute(t);void 0===(e=this._serializeValue(t,e))?this.removeAttribute(n):this.getAttribute(n)!==e&&this.setAttribute(n,e),a(this).serializing=!1},p.prototype._deserializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isNumber,i=n.isArray,o=n.isBoolean,a=n.isDate,s=n.isString,u=n.isObject;return o?e=null!==e&&void 0!==e:r?e=null===e||void 0===e?0:Number(e):s?e=null===e||void 0===e?"":String(e):u||i?e=null===e||void 0===e?i?null:{}:JSON.parse(e):a&&(e=null===e||void 0===e?"":new Date(e)),e},p.prototype._serializeValue=function(t,e){var n=this.constructor.classProperties[t],r=n.isBoolean,i=n.isObject,o=n.isArray;return r?e?"":void 0:i||o?JSON.stringify(e):e=e?e.toString():void 0},p.prototype._setPendingProperty=function(t,e){var n=a(this).data[t],r=this._shouldPropertyChange(t,e,n);return r&&(a(this).dataPending||(a(this).dataPending={},a(this).dataOld={}),!a(this).dataOld||t in a(this).dataOld||(a(this).dataOld[t]=n),a(this).data[t]=e,a(this).dataPending[t]=e),r},p.prototype._invalidateProperties=function(){var t=this;a(this).dataInvalid||(a(this).dataInvalid=!0,x.run(function(){a(t).dataInvalid&&(a(t).dataInvalid=!1,t._flushProperties())}))},p.prototype._flushProperties=function(){var t=a(this).data,e=a(this).dataPending,n=a(this).dataOld;this._shouldPropertiesChange(t,e,n)&&(a(this).dataPending=null,a(this).dataOld=null,this.propertiesChanged(t,e,n))},p.prototype._shouldPropertiesChange=function(t,e,n){return Boolean(e)},p.prototype._shouldPropertyChange=function(t,e,n){return n!==e&&(n==n||e==e)},g(p,null,[{key:"observedAttributes",get:function(){var t=this;return Object.keys(this.classProperties).map(function(e){return t.propertyNameToAttribute(e)})||[]}},{key:"classProperties",get:function(){if(!s){for(var t=function(){return s||{}},e=null,n=!0;n;)(e=Object.getPrototypeOf(null===e?this:e))&&e.constructor&&e.constructor!==HTMLElement&&e.constructor!==Function&&e.constructor!==Object&&e.constructor!==e.constructor.constructor||(n=!1),Object.hasOwnProperty.call(e,"properties")&&(s=r(t(),l(e.properties)));this.properties&&(s=r(t(),l(this.properties)))}return s}}]),p}(t)},H=Object.keys;t.classBuilder=_,t.createStorage=w,t.before=C,t.around=j,t.after=E,t.afterThrow=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return function(e){for(var r=e.prototype,i=n.length,o=Object.defineProperty,a=function(e){var i=n[e],a=r[i];o(r,i,{value:function(){try{for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return a.apply(this,n)}catch(e){t.call(this,e)}},writable:!0})},s=0;s<i;s++)a(s);return e}},t.documentReady=function(t){return"loading"===document.readyState?new Promise(function(e){document.addEventListener("DOMContentLoaded",function(){return e(t)})}):Promise.resolve(t)},t.createElement=function(t,e){var n=document.createElement(t);for(var r in e)Object.hasOwnProperty.call(e,r)&&n.setAttribute(r,e[r]);return n},t.elementSiblings=function(t){var e=[];if(t.parentNode&&t.parentNode.firstChild){var n=t.parentNode.firstChild;do{1===n.nodeType&&n!==t&&e.push(n)}while(n.nextSibling&&null!==n.nextSibling&&(n=n.nextSibling))}return e},t.removeElement=function(t){t.parentElement&&t.parentElement.removeChild(t)},t.isDescendantElement=function(t,e){for(;t.parentNode&&(t=t.parentNode)&&t!==e;);return Boolean(t)},t.elementChildren=A,t.templateContent=function(t){if("content"in document.createElement("template"))return document.importNode(t.content,!0);for(var e=document.createDocumentFragment(),n=t.childNodes,r=0;r<n.length;r++)e.appendChild(n[r].cloneNode(!0));return e},t.microTask=x,t.listenEvent=D,t.listenEventOnce=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=D(t,e,function(){i.remove(),n.apply(void 0,arguments)},r);return i},t.pausableEvent=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=!1,o=D(t,e,function(){i||n.apply(void 0,arguments)},r);return{remove:function(){o.remove()},pause:function(){i=!0},resume:function(){i=!1}}},t.stopEvent=function(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault()},t.customElement=V,t.state=function(t){var e=Object.assign,n=w();return function(t){function r(){return b(this,r),P(this,t.apply(this,arguments))}return m(r,t),r.finalizeClass=function(){t.finalizeClass.call(this),E(function(t){t?this.componentWillRender(this.state):this.componentWillUpdate(this.state,e({},n(this).renderedState))},"_onRender")(this),E(function(t){var e=n(this).renderedState;n(this).renderedState=n(this).state,t?this.componentDidRender(e):this.componentDidUpdate(e)},"_postRender")(this)},r.prototype.construct=function(){t.prototype.construct.call(this),this.setState(this.defaultState)},r.prototype.shouldComponentUpdate=function(t){for(var e in t)if(t[e]!==n(this).state[e])return!0;return!1},r.prototype.setState=function(t){var r=e({},n(this).state,t);(void 0===n(this).state||this.shouldComponentUpdate(r))&&(n(this).state=r,this.initialized&&this.render())},r.prototype.componentWillRender=function(t){},r.prototype.componentDidRender=function(t){},r.prototype.componentWillUpdate=function(t,e){},r.prototype.componentDidUpdate=function(t){},g(r,[{key:"defaultState",get:function(){return{}}},{key:"state",get:function(){return e({},n(this).state)}}]),r}(t)},t.slots=function(t){return function(t){function e(){return b(this,e),P(this,t.apply(this,arguments))}return m(e,t),e.finalizeClass=function(){var e;t.finalizeClass.call(this),C((e=/-([a-z])/g,function(t){var n=this;if(t){var r=A(n);r.forEach(function(t){var r=t.getAttribute?t.getAttribute("slot"):null;if("string"==typeof r&&r.length>0){var i=r.replace(e,function(t){return t[1].toUpperCase()});n.slots[i]=t}else n.slots.default.push(t)}),n.slotsAssigned()}}),"_onRender")(this)},e.prototype.construct=function(){t.prototype.construct.call(this),this.slots={default:[]}},e.prototype.slotsAssigned=function(){},e}(t)},t.events=U,t.properties=B,t.component=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:V();return function(t){function e(){return b(this,e),P(this,t.apply(this,arguments))}return m(e,t),e.prototype.propertiesChanged=function(t,e,n){this.initialized&&this.render()},e}(_(t).with(U,B))},t.dget=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;if(-1===e.indexOf("."))return t[e]?t[e]:n;for(var r=e.split("."),i=r.length,o=t,a=0;a<i;a++)if(void 0===(o=o[r[a]]))return void(o=n);return o},t.dset=function(t,e,n){if(-1!==e.indexOf(".")){for(var r=e.split("."),i=r.length-1,o=t,a=0;a<i;a++)void 0===o[r[a]]&&(o[r[a]]={}),o=o[r[a]];o[r[i]]=n}else t[e]=n},t.toMap=function(t){return H(t).reduce(function(e,n){return e.set(n,t[n])},new Map)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91bmlxdWUtaWQuanMiLCIuLi8uLi9saWIvY2xhc3MtYnVpbGRlci9jb21tb25zLmpzIiwiLi4vLi4vbGliL2NsYXNzLWJ1aWxkZXIvdW53cmFwLmpzIiwiLi4vLi4vbGliL2NsYXNzLWJ1aWxkZXIvd3JhcC5qcyIsIi4uLy4uL2xpYi9jbGFzcy1idWlsZGVyL2RlY2xhcmUuanMiLCIuLi8uLi9saWIvY2xhc3MtYnVpbGRlci9hcHBseS5qcyIsIi4uLy4uL2xpYi9jbGFzcy1idWlsZGVyL2lzLWFwcGxpY2F0aW9uLW9mLmpzIiwiLi4vLi4vbGliL2NsYXNzLWJ1aWxkZXIvaGFzLmpzIiwiLi4vLi4vbGliL2NsYXNzLWJ1aWxkZXIvZGVkdXBlLmpzIiwiLi4vLi4vbGliL2NsYXNzLWJ1aWxkZXIvY2FjaGUuanMiLCIuLi8uLi9saWIvY2xhc3MtYnVpbGRlci9taXhpbi5qcyIsIi4uLy4uL2xpYi9jbGFzcy1idWlsZGVyLmpzIiwiLi4vLi4vbGliL2NyZWF0ZS1zdG9yYWdlLmpzIiwiLi4vLi4vbGliL2FkdmljZS9iZWZvcmUuanMiLCIuLi8uLi9saWIvYWR2aWNlL2Fyb3VuZC5qcyIsIi4uLy4uL2xpYi9hZHZpY2UvYWZ0ZXIuanMiLCIuLi8uLi9saWIvZG9tL2VsZW1lbnQtY2hpbGRyZW4uanMiLCIuLi8uLi9saWIvZG9tL21pY3JvdGFzay5qcyIsIi4uLy4uL2xpYi9kb20vbGlzdGVuLWV2ZW50LmpzIiwiLi4vLi4vbGliL3dlYi1jb21wb25lbnRzL2N1c3RvbS1lbGVtZW50LW1peGluLmpzIiwiLi4vLi4vbGliL3dlYi1jb21wb25lbnRzL2V2ZW50cy1taXhpbi5qcyIsIi4uLy4uL2xpYi93ZWItY29tcG9uZW50cy9wcm9wZXJ0aWVzLW1peGluLmpzIiwiLi4vLi4vbGliL29iamVjdC90by1tYXAuanMiLCIuLi8uLi9saWIvYWR2aWNlL2FmdGVyLXRocm93LmpzIiwiLi4vLi4vbGliL2RvbS9kb2N1bWVudC1yZWFkeS5qcyIsIi4uLy4uL2xpYi9kb20vY3JlYXRlLWVsZW1lbnQuanMiLCIuLi8uLi9saWIvZG9tL2VsZW1lbnQtc2libGluZ3MuanMiLCIuLi8uLi9saWIvZG9tL3JlbW92ZS1lbGVtZW50LmpzIiwiLi4vLi4vbGliL2RvbS9pcy1kZXNjZW5kYW50LWVsZW1lbnQuanMiLCIuLi8uLi9saWIvZG9tL3RlbXBsYXRlLWNvbnRlbnQuanMiLCIuLi8uLi9saWIvZG9tL2xpc3Rlbi1ldmVudC1vbmNlLmpzIiwiLi4vLi4vbGliL2RvbS9wYXVzYWJsZS1ldmVudC5qcyIsIi4uLy4uL2xpYi9kb20vc3RvcC1ldmVudC5qcyIsIi4uLy4uL2xpYi93ZWItY29tcG9uZW50cy9zdGF0ZS1taXhpbi5qcyIsIi4uLy4uL2xpYi93ZWItY29tcG9uZW50cy9zbG90cy1taXhpbi5qcyIsIi4uLy4uL2xpYi93ZWItY29tcG9uZW50cy9jb21wb25lbnQtbWl4aW4uanMiLCIuLi8uLi9saWIvb2JqZWN0L2RnZXQuanMiLCIuLi8uLi9saWIvb2JqZWN0L2RzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICovXG5cbmxldCBwcmV2VGltZUlkID0gMDtcbmxldCBwcmV2VW5pcXVlSWQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCAocHJlZml4KSA9PiB7XG5cdGxldCBuZXdVbmlxdWVJZCA9IERhdGUubm93KCk7XG5cdGlmIChuZXdVbmlxdWVJZCA9PT0gcHJldlRpbWVJZCkge1xuXHRcdCsrcHJldlVuaXF1ZUlkO1xuXHR9IGVsc2Uge1xuXHRcdHByZXZUaW1lSWQgPSBuZXdVbmlxdWVJZDtcblx0XHRwcmV2VW5pcXVlSWQgPSAwO1xuXHR9XG5cblx0bGV0IHVuaXF1ZUlkID0gYCR7U3RyaW5nKG5ld1VuaXF1ZUlkKX0ke1N0cmluZyhwcmV2VW5pcXVlSWQpfWA7XG5cdGlmIChwcmVmaXgpIHtcblx0XHR1bmlxdWVJZCA9IGAke3ByZWZpeH1fJHt1bmlxdWVJZH1gO1xuXHR9XG5cdHJldHVybiB1bmlxdWVJZDtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCB1bmlxdWVJZCBmcm9tICcuLi91bmlxdWUtaWQuanMnO1xuXG4vLyB1c2VkIGJ5IHdyYXAoKSBhbmQgdW53cmFwKClcbmV4cG9ydCBjb25zdCB3cmFwcGVkTWl4aW5LZXkgPSB1bmlxdWVJZCgnX3dyYXBwZWRNaXhpbicpO1xuXG4vLyB1c2VkIGJ5IGFwcGx5KCkgYW5kIGlzQXBwbGljYXRpb25PZigpXG5leHBvcnQgY29uc3QgYXBwbGllZE1peGluS2V5ID0gdW5pcXVlSWQoJ19hcHBsaWVkTWl4aW4nKTtcbiIsIi8qICAqL1xuaW1wb3J0IHt3cmFwcGVkTWl4aW5LZXl9IGZyb20gJy4vY29tbW9ucy5qcyc7XG5cbi8qKlxuICogVW53cmFwcyB0aGUgZnVuY3Rpb24gYHdyYXBwZXJgIHRvIHJldHVybiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd3JhcHBlZCBieVxuICogb25lIG9yIG1vcmUgY2FsbHMgdG8gYHdyYXBgLiBSZXR1cm5zIGB3cmFwcGVyYCBpZiBpdCdzIG5vdCBhIHdyYXBwZWRcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBBIHdyYXBwZWQgbWl4aW4gcHJvZHVjZWQgYnkge0BsaW5rIHdyYXB9XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIG9yaWdpbmFsbHkgd3JhcHBlZCBtaXhpblxuICovXG5leHBvcnQgZGVmYXVsdCAod3JhcHBlcikgPT4gd3JhcHBlclt3cmFwcGVkTWl4aW5LZXldIHx8IHdyYXBwZXI7XG4iLCIvKiAgKi9cbmltcG9ydCB7d3JhcHBlZE1peGluS2V5fSBmcm9tICcuL2NvbW1vbnMuanMnO1xuXG5jb25zdCB7c2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG4vKipcbiAqIFNldHMgdXAgdGhlIGZ1bmN0aW9uIGBtaXhpbmAgdG8gYmUgd3JhcHBlZCBieSB0aGUgZnVuY3Rpb24gYHdyYXBwZXJgLCB3aGlsZVxuICogYWxsb3dpbmcgcHJvcGVydGllcyBvbiBgbWl4aW5gIHRvIGJlIGF2YWlsYWJsZSB2aWEgYHdyYXBwZXJgLCBhbmQgYWxsb3dpbmdcbiAqIGB3cmFwcGVyYCB0byBiZSB1bndyYXBwZWQgdG8gZ2V0IHRvIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAqXG4gKiBgd3JhcGAgZG9lcyB0d28gdGhpbmdzOlxuICogICAxLiBTZXRzIHRoZSBwcm90b3R5cGUgb2YgYG1peGluYCB0byBgd3JhcHBlcmAgc28gdGhhdCBwcm9wZXJ0aWVzIHNldCBvblxuICogICAgICBgbWl4aW5gIGluaGVyaXRlZCBieSBgd3JhcHBlcmAuXG4gKiAgIDIuIFNldHMgYSBzcGVjaWFsIHByb3BlcnR5IG9uIGBtaXhpbmAgdGhhdCBwb2ludHMgYmFjayB0byBgbWl4aW5gIHNvIHRoYXRcbiAqICAgICAgaXQgY2FuIGJlIHJldHJlaXZlZCBmcm9tIGB3cmFwcGVyYFxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW4gQSBtaXhpbiBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBBIGZ1bmN0aW9uIHRoYXQgd3JhcHMge0BsaW5rIG1peGlufVxuICogQHJldHVybiB7RnVuY3Rpb259IGB3cmFwcGVyYFxuICovXG5leHBvcnQgZGVmYXVsdCAobWl4aW4sIHdyYXBwZXIpID0+IHtcblx0c2V0UHJvdG90eXBlT2Yod3JhcHBlciwgbWl4aW4pO1xuXHRpZiAoIW1peGluW3dyYXBwZWRNaXhpbktleV0pIHtcblx0XHRtaXhpblt3cmFwcGVkTWl4aW5LZXldID0gbWl4aW47XG5cdH1cblx0cmV0dXJuIHdyYXBwZXI7XG59O1xuIiwiLyogICovXG5pbXBvcnQgYXBwbHkgZnJvbSAnLi9hcHBseS5qcyc7XG5pbXBvcnQgd3JhcCBmcm9tICcuL3dyYXAuanMnO1xuXG4vKipcbiAqIEEgYmFzaWMgbWl4aW4gZGVjb3JhdG9yIHRoYXQgYXBwbGllcyB0aGUgbWl4aW4gd2l0aCB7QGxpbmsgYXBwbHlNaXhpbn0gc28gdGhhdCBpdFxuICogY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgaXNBcHBsaWNhdGlvbk9mfSwge0BsaW5rIGhhc01peGlufSBhbmQgdGhlIG90aGVyXG4gKiBtaXhpbiBkZWNvcmF0b3IgZnVuY3Rpb25zLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW4gVGhlIG1peGluIHRvIHdyYXBcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIG5ldyBtaXhpbiBmdW5jdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCAobWl4aW4pID0+XG5cdHdyYXAobWl4aW4sIChzdXBlckNsYXNzKSA9PiBhcHBseShzdXBlckNsYXNzLCBtaXhpbikpO1xuIiwiLyogICovXG5pbXBvcnQge2FwcGxpZWRNaXhpbktleX0gZnJvbSAnLi9jb21tb25zLmpzJztcbmltcG9ydCB1bndyYXAgZnJvbSAnLi91bndyYXAuanMnO1xuXG4vKipcbiAqIEFwcGxpZXMgYG1peGluYCB0byBgc3VwZXJjbGFzc2AuXG4gKlxuICogYGFwcGx5YCBzdG9yZXMgYSByZWZlcmVuY2UgZnJvbSB0aGUgbWl4aW4gYXBwbGljYXRpb24gdG8gdGhlIHVud3JhcHBlZCBtaXhpblxuICogdG8gbWFrZSBgaXNBcHBsaWNhdGlvbk9mYCBhbmQgYGhhc01peGluYCB3b3JrLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsbCBmb3IgbWl4aW4gd3JhcHBlcnMgdGhhdCB3YW50IHRvIGF1dG9tYXRpY2FsbHkgZW5hYmxlXG4gKiB7QGxpbmsgaGFzTWl4aW59IHN1cHBvcnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlckNsYXNzIEEgY2xhc3Mgb3IgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1peGluIFRoZSBtaXhpbiB0byBhcHBseVxuICogQHJldHVybiB7RnVuY3Rpb259IEEgc3ViY2xhc3Mgb2YgYHN1cGVyY2xhc3NgIHByb2R1Y2VkIGJ5IGBtaXhpbmBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHN1cGVyQ2xhc3MsIG1peGluKSA9PiB7XG5cdGxldCBhcHBsaWNhdGlvbiA9IG1peGluKHN1cGVyQ2xhc3MpO1xuXHRjb25zdCBwcm90byA9IGFwcGxpY2F0aW9uLnByb3RvdHlwZTtcblx0cHJvdG9bYXBwbGllZE1peGluS2V5XSA9IHVud3JhcChtaXhpbik7XG5cdHJldHVybiBhcHBsaWNhdGlvbjtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCB7YXBwbGllZE1peGluS2V5fSBmcm9tICcuL2NvbW1vbnMuanMnO1xuaW1wb3J0IHVud3JhcCBmcm9tICcuL3Vud3JhcC5qcyc7XG5cbmNvbnN0IHtoYXNPd25Qcm9wZXJ0eX0gPSBPYmplY3Q7XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWZmIGBwcm90b2AgaXMgYSBwcm90b3R5cGUgY3JlYXRlZCBieSB0aGUgYXBwbGljYXRpb24gb2ZcbiAqIGBtaXhpbmAgdG8gYSBzdXBlcmNsYXNzLlxuICpcbiAqIGBpc0FwcGxpY2F0aW9uT2ZgIHdvcmtzIGJ5IGNoZWNraW5nIHRoYXQgYHByb3RvYCBoYXMgYSByZWZlcmVuY2UgdG8gYG1peGluYFxuICogYXMgY3JlYXRlZCBieSBgYXBwbHlgLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIEEgcHJvdG90eXBlIG9iamVjdCBjcmVhdGVkIGJ5IHtAbGluayBhcHBseX0uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtaXhpbiBBIG1peGluIGZ1bmN0aW9uIHVzZWQgd2l0aCB7QGxpbmsgYXBwbHl9LlxuICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBgcHJvdG9gIGlzIGEgcHJvdG90eXBlIGNyZWF0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uIG9mXG4gKiBgbWl4aW5gIHRvIGEgc3VwZXJjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCAocHJvdG8sIG1peGluKSA9PiB7XG5cdHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBhcHBsaWVkTWl4aW5LZXkpICYmIHByb3RvW2FwcGxpZWRNaXhpbktleV0gPT09IHVud3JhcChtaXhpbik7XG59O1xuIiwiLyogICovXG5pbXBvcnQgaXNBcHBsaWNhdGlvbk9mIGZyb20gJy4vaXMtYXBwbGljYXRpb24tb2YuanMnO1xuXG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmZiBgb2AgaGFzIGFuIGFwcGxpY2F0aW9uIG9mIGBtaXhpbmAgb24gaXRzIHByb3RvdHlwZVxuICogY2hhaW4uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gbyBBbiBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1peGluIEEgbWl4aW4gYXBwbGllZCB3aXRoIHtAbGluayBhcHBseX1cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgYG9gIGhhcyBhbiBhcHBsaWNhdGlvbiBvZiBgbWl4aW5gIG9uIGl0cyBwcm90b3R5cGVcbiAqIGNoYWluXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChvLCBtaXhpbikgPT4ge1xuXHR3aGlsZSAobyAhPT0gbnVsbCkge1xuXHRcdGlmIChpc0FwcGxpY2F0aW9uT2YobywgbWl4aW4pKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0byA9IGdldFByb3RvdHlwZU9mKG8pO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCBoYXMgZnJvbSAnLi9oYXMuanMnO1xuaW1wb3J0IHdyYXAgZnJvbSAnLi93cmFwLmpzJztcblxuLyoqXG4gKiBEZWNvcmF0ZXMgYG1peGluYCBzbyB0aGF0IGl0IG9ubHkgYXBwbGllcyBpZiBpdCdzIG5vdCBhbHJlYWR5IG9uIHRoZVxuICogcHJvdG90eXBlIGNoYWluLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW4gVGhlIG1peGluIHRvIHdyYXAgd2l0aCBkZWR1cGxpY2F0aW9uIGJlaGF2aW9yXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBuZXcgbWl4aW4gZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgKG1peGluKSA9PiB7XG5cdHJldHVybiB3cmFwKG1peGluLCAoc3VwZXJDbGFzcykgPT5cblx0XHQoaGFzKHN1cGVyQ2xhc3MucHJvdG90eXBlLCBtaXhpbikpID8gc3VwZXJDbGFzcyA6IG1peGluKHN1cGVyQ2xhc3MpKTtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCB1bmlxdWVJZCBmcm9tICcuLi91bmlxdWUtaWQuanMnO1xuaW1wb3J0IHdyYXAgZnJvbSAnLi93cmFwLmpzJztcblxuY29uc3QgY2FjaGVkQXBwbGljYXRpb25LZXkgPSB1bmlxdWVJZCgnX2NhY2hlZEFwcGxpY2F0aW9uJyk7XG5cbi8qKlxuICogRGVjb3JhdGUgdGhlIGdpdmVuIG1peGluIGNsYXNzIHdpdGggYSBcImNhY2hlZCBkZWNvcmF0b3JcIi5cbiAqXG4gKiBNZXRob2Qgd2lsbCBlbnN1cmUgdGhhdCBpZiB0aGUgZ2l2ZW4gbWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkLFxuICogdGhlbiBpdCB3aWxsIGJlIHJldHVybmVkIC8gYXBwbGllZCBhIHNpbmdsZSB0aW1lLCByYXRoZXIgdGhhbiBtdWx0aXBsZVxuICogdGltZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWl4aW5cbiAqXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgKG1peGluKSA9PiB7XG5cdHJldHVybiB3cmFwKG1peGluLCAoc3VwZXJDbGFzcykgPT4ge1xuXHRcdGxldCBjYWNoZWRBcHBsaWNhdGlvbiA9IHN1cGVyQ2xhc3NbY2FjaGVkQXBwbGljYXRpb25LZXldO1xuXHRcdGlmICghY2FjaGVkQXBwbGljYXRpb24pIHtcblx0XHRcdGNhY2hlZEFwcGxpY2F0aW9uID0gc3VwZXJDbGFzc1tjYWNoZWRBcHBsaWNhdGlvbktleV0gPSBuZXcgTWFwKCk7XG5cdFx0fVxuXG5cdFx0Ly8gJEZsb3dGaXhNZVxuXHRcdGxldCBhcHBsaWNhdGlvbiA9IGNhY2hlZEFwcGxpY2F0aW9uLmdldChtaXhpbik7XG5cdFx0aWYgKCFhcHBsaWNhdGlvbikge1xuXHRcdFx0YXBwbGljYXRpb24gPSBtaXhpbihzdXBlckNsYXNzKTtcblx0XHRcdGNhY2hlZEFwcGxpY2F0aW9uLnNldChtaXhpbiwgYXBwbGljYXRpb24pO1xuXHRcdH1cblx0XHRyZXR1cm4gYXBwbGljYXRpb247XG5cdH0pO1xufTtcbiIsIi8qICAqL1xuaW1wb3J0IGRlY2xhcmUgZnJvbSAnLi9kZWNsYXJlLmpzJztcbmltcG9ydCBkZWR1cGUgZnJvbSAnLi9kZWR1cGUuanMnO1xuaW1wb3J0IGNhY2hlIGZyb20gJy4vY2FjaGUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCAobWl4aW4pID0+IGRlZHVwZShjYWNoZShkZWNsYXJlKG1peGluKSkpO1xuIiwiLyogICovXG5pbXBvcnQgY3JlYXRlTWl4aW4gZnJvbSAnLi9jbGFzcy1idWlsZGVyL21peGluLmpzJztcblxuY29uc3Qge2ZyZWV6ZX0gPSBPYmplY3Q7XG5cblxuZXhwb3J0IGRlZmF1bHQgKGtsYXNzID0gY2xhc3Mge30pID0+IGZyZWV6ZSh7XG5cdHdpdGgoLi4ubWl4aW5zKSB7XG5cdFx0cmV0dXJuIG1peGluc1xuXHRcdFx0Lm1hcCgobWl4aW4pID0+IGNyZWF0ZU1peGluKG1peGluKSlcblx0XHRcdC5yZWR1Y2UoKGssIG0pID0+IG0oayksIGtsYXNzKTtcblx0fVxufSk7XG4iLCIvKiAgKi9cbmV4cG9ydCBkZWZhdWx0IChjcmVhdG9yID0gT2JqZWN0LmNyZWF0ZS5iaW5kKG51bGwsIG51bGwsIHt9KSkgPT4ge1xuXHRsZXQgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuXHRyZXR1cm4gKG9iaikgPT4ge1xuXHRcdGxldCB2YWx1ZSA9IHN0b3JlLmdldChvYmopO1xuXHRcdGlmICghdmFsdWUpIHtcblx0XHRcdHN0b3JlLnNldChvYmosIHZhbHVlID0gY3JlYXRvcihvYmopKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9O1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGJlaGF2aW91ciwgLi4ubWV0aG9kTmFtZXMpID0+IHtcblx0cmV0dXJuIGZ1bmN0aW9uIChrbGFzcykge1xuXHRcdGNvbnN0IHByb3RvID0ga2xhc3MucHJvdG90eXBlO1xuXHRcdGNvbnN0IGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcblx0XHRjb25zdCB7ZGVmaW5lUHJvcGVydHl9ID0gT2JqZWN0O1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcblx0XHRcdGNvbnN0IG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdO1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sIG1ldGhvZE5hbWUsIHtcblx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdFx0YmVoYXZpb3VyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHRcdHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGtsYXNzO1xuXHR9O1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGJlaGF2aW91ciwgLi4ubWV0aG9kTmFtZXMpID0+IHtcblx0cmV0dXJuIGZ1bmN0aW9uIChrbGFzcykge1xuXHRcdGNvbnN0IHByb3RvID0ga2xhc3MucHJvdG90eXBlO1xuXHRcdGNvbnN0IGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcblx0XHRjb25zdCB7ZGVmaW5lUHJvcGVydHl9ID0gT2JqZWN0O1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcblx0XHRcdGNvbnN0IG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdO1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sIG1ldGhvZE5hbWUsIHtcblx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdFx0YXJncy51bnNoaWZ0KG1ldGhvZCk7XG5cdFx0XHRcdFx0YmVoYXZpb3VyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBrbGFzcztcblx0fTtcbn07XG4iLCIvKiAgKi9cbmV4cG9ydCBkZWZhdWx0IChiZWhhdmlvdXIsIC4uLm1ldGhvZE5hbWVzKSA9PiB7XG5cdHJldHVybiBmdW5jdGlvbiAoa2xhc3MpIHtcblx0XHRjb25zdCBwcm90byA9IGtsYXNzLnByb3RvdHlwZTtcblx0XHRjb25zdCBsZW4gPSBtZXRob2ROYW1lcy5sZW5ndGg7XG5cdFx0Y29uc3Qge2RlZmluZVByb3BlcnR5fSA9IE9iamVjdDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRjb25zdCBtZXRob2ROYW1lID0gbWV0aG9kTmFtZXNbaV07XG5cdFx0XHRjb25zdCBtZXRob2QgPSBwcm90b1ttZXRob2ROYW1lXTtcblx0XHRcdGRlZmluZVByb3BlcnR5KHByb3RvLCBtZXRob2ROYW1lLCB7XG5cdFx0XHRcdHZhbHVlOiBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdFx0XHRcdGNvbnN0IHJldHVyblZhbHVlID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHRcdGJlaGF2aW91ci5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGtsYXNzO1xuXHR9O1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGVsZW1lbnQsIG5vZGVUeXBlID0gMSkgPT4ge1xuXHRsZXQgY2hpbGROb2RlcyA9IGVsZW1lbnQuY2hpbGROb2Rlcztcblx0bGV0IGNoaWxkcmVuID0gW107XG5cdGlmIChjaGlsZE5vZGVzICYmIGNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuXHRcdGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0aWYgKGNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IG5vZGVUeXBlKSB7XG5cdFx0XHRcdGNoaWxkcmVuLnVuc2hpZnQoY2hpbGROb2Rlc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjaGlsZHJlbjtcbn07XG4iLCIvKiAgKi9cblxubGV0IG1pY3JvVGFza0N1cnJIYW5kbGUgPSAwO1xubGV0IG1pY3JvVGFza0xhc3RIYW5kbGUgPSAwO1xubGV0IG1pY3JvVGFza0NhbGxiYWNrcyA9IFtdO1xubGV0IG1pY3JvVGFza05vZGVDb250ZW50ID0gMDtcbmxldCBtaWNyb1Rhc2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xubmV3IE11dGF0aW9uT2JzZXJ2ZXIobWljcm9UYXNrRmx1c2gpLm9ic2VydmUobWljcm9UYXNrTm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcblxuXG4vKipcbiAqIEJhc2VkIG9uIFBvbHltZXIuYXN5bmNcbiAqL1xuY29uc3QgbWljcm9UYXNrID0ge1xuXHQvKipcblx0ICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgbWljcm9UYXNrIHRpbWluZy5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gcnVuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG5cdCAqL1xuXHRydW4oY2FsbGJhY2spIHtcblx0XHRtaWNyb1Rhc2tOb2RlLnRleHRDb250ZW50ID0gU3RyaW5nKG1pY3JvVGFza05vZGVDb250ZW50KyspO1xuXHRcdG1pY3JvVGFza0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gbWljcm9UYXNrQ3VyckhhbmRsZSsrO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgbWljcm9UYXNrYCBjYWxsYmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcblx0ICovXG5cdGNhbmNlbChoYW5kbGUpIHtcblx0XHRjb25zdCBpZHggPSBoYW5kbGUgLSBtaWNyb1Rhc2tMYXN0SGFuZGxlO1xuXHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0aWYgKCFtaWNyb1Rhc2tDYWxsYmFja3NbaWR4XSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXN5bmMgaGFuZGxlOiAnICsgaGFuZGxlKTtcblx0XHRcdH1cblx0XHRcdG1pY3JvVGFza0NhbGxiYWNrc1tpZHhdID0gbnVsbDtcblx0XHR9XG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pY3JvVGFzaztcblxuZnVuY3Rpb24gbWljcm9UYXNrRmx1c2goKSB7XG5cdGNvbnN0IGxlbiA9IG1pY3JvVGFza0NhbGxiYWNrcy5sZW5ndGg7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRsZXQgY2IgPSBtaWNyb1Rhc2tDYWxsYmFja3NbaV07XG5cdFx0aWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y2IoKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRtaWNyb1Rhc2tDYWxsYmFja3Muc3BsaWNlKDAsIGxlbik7XG5cdG1pY3JvVGFza0xhc3RIYW5kbGUgKz0gbGVuO1xufVxuIiwiLyogICovXG5cbmV4cG9ydCBkZWZhdWx0ICh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlID0gZmFsc2UpID0+IHtcblx0cmV0dXJuIHBhcnNlKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xufTtcblxuZnVuY3Rpb24gYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuXHRpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHR0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aGlzLnJlbW92ZSA9ICgpID0+IHt9O1xuXHRcdFx0XHR0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIGV2ZW50IGVtaXR0ZXInKTtcbn1cblxuZnVuY3Rpb24gcGFyc2UodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuXHRpZiAodHlwZS5pbmRleE9mKCcsJykgPiAtMSkge1xuXHRcdGxldCBldmVudHMgPSB0eXBlLnNwbGl0KC9cXHMqLFxccyovKTtcblx0XHRsZXQgaGFuZGxlcyA9IGV2ZW50cy5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcblx0XHRcdHJldHVybiBhZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcblx0XHR9KTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVtb3ZlKCkge1xuXHRcdFx0XHR0aGlzLnJlbW92ZSA9ICgpID0+IHt9O1xuXHRcdFx0XHRsZXQgaGFuZGxlO1xuXHRcdFx0XHR3aGlsZSAoKGhhbmRsZSA9IGhhbmRsZXMucG9wKCkpKSB7XG5cdFx0XHRcdFx0aGFuZGxlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG59XG4iLCIvKiAgKi9cbmltcG9ydCBjcmVhdGVTdG9yYWdlIGZyb20gJy4uL2NyZWF0ZS1zdG9yYWdlLmpzJztcbmltcG9ydCBhcm91bmQgZnJvbSAnLi4vYWR2aWNlL2Fyb3VuZC5qcyc7XG5pbXBvcnQgbWljcm9UYXNrIGZyb20gJy4uL2RvbS9taWNyb3Rhc2suanMnO1xuXG5jb25zdCBnbG9iYWwgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90cmFjZXVyLWNvbXBpbGVyL2lzc3Vlcy8xNzA5XG5pZiAodHlwZW9mIGdsb2JhbC5IVE1MRWxlbWVudCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRjb25zdCBfSFRNTEVsZW1lbnQgPSBmdW5jdGlvbiBIVE1MRWxlbWVudCgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWVzXG5cblx0fTtcblx0X0hUTUxFbGVtZW50LnByb3RvdHlwZSA9IGdsb2JhbC5IVE1MRWxlbWVudC5wcm90b3R5cGU7XG5cdGdsb2JhbC5IVE1MRWxlbWVudCA9IF9IVE1MRWxlbWVudDtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCAoYmFzZUNsYXNzKSA9PiB7XG5cdGNvbnN0IGN1c3RvbUVsZW1lbnRzVjFDYWxsYmFja3MgPSBbXG5cdFx0J2Nvbm5lY3RlZENhbGxiYWNrJyxcblx0XHQnZGlzY29ubmVjdGVkQ2FsbGJhY2snLFxuXHRcdCdhZG9wdGVkQ2FsbGJhY2snLFxuXHRcdCdhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2snXG5cdF07XG5cdGNvbnN0IHtkZWZpbmVQcm9wZXJ0eSwgaGFzT3duUHJvcGVydHl9ID0gT2JqZWN0O1xuXHRjb25zdCBwcml2YXRlcyA9IGNyZWF0ZVN0b3JhZ2UoKTtcblxuXHRpZiAoIWJhc2VDbGFzcykge1xuXHRcdGJhc2VDbGFzcyA9IGNsYXNzIGV4dGVuZHMgZ2xvYmFsLkhUTUxFbGVtZW50IHt9O1xuXHR9XG5cblx0cmV0dXJuIGNsYXNzIEN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBiYXNlQ2xhc3Mge1xuXG5cdFx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXG5cdFx0c3RhdGljIGZpbmFsaXplQ2xhc3MoKSB7XG5cblx0XHR9XG5cblx0XHRzdGF0aWMgZGVmaW5lKHRhZ05hbWUpIHtcblx0XHRcdGNvbnN0IHJlZ2lzdHJ5ID0gY3VzdG9tRWxlbWVudHM7XG5cdFx0XHRpZiAoIXJlZ2lzdHJ5LmdldCh0YWdOYW1lKSkge1xuXHRcdFx0XHRjb25zdCBwcm90byA9IHRoaXMucHJvdG90eXBlO1xuXHRcdFx0XHRjdXN0b21FbGVtZW50c1YxQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrTWV0aG9kTmFtZSkgPT4ge1xuXHRcdFx0XHRcdGlmICghaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgY2FsbGJhY2tNZXRob2ROYW1lKSkge1xuXHRcdFx0XHRcdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sIGNhbGxiYWNrTWV0aG9kTmFtZSwge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZSgpIHt9LFxuXHRcdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCBuZXdDYWxsYmFja05hbWUgPSBjYWxsYmFja01ldGhvZE5hbWUuc3Vic3RyaW5nKDAsIChjYWxsYmFja01ldGhvZE5hbWUubGVuZ3RoIC0gJ2NhbGxiYWNrJy5sZW5ndGgpKTtcblx0XHRcdFx0XHRjb25zdCBvcmlnaW5hbE1ldGhvZCA9IHByb3RvW2NhbGxiYWNrTWV0aG9kTmFtZV07XG5cdFx0XHRcdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sIGNhbGxiYWNrTWV0aG9kTmFtZSwge1xuXHRcdFx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXNbbmV3Q2FsbGJhY2tOYW1lXS5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdFx0XHRcdFx0b3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRoaXMuZmluYWxpemVDbGFzcygpO1xuXHRcdFx0XHRhcm91bmQoY3JlYXRlQ29ubmVjdGVkQWR2aWNlKCksICdjb25uZWN0ZWQnKSh0aGlzKTtcblx0XHRcdFx0YXJvdW5kKGNyZWF0ZURpc2Nvbm5lY3RlZEFkdmljZSgpLCAnZGlzY29ubmVjdGVkJykodGhpcyk7XG5cdFx0XHRcdGFyb3VuZChjcmVhdGVSZW5kZXJBZHZpY2UoKSwgJ3JlbmRlcicpKHRoaXMpO1xuXHRcdFx0XHRyZWdpc3RyeS5kZWZpbmUodGFnTmFtZSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2V0IGluaXRpYWxpemVkKCkge1xuXHRcdFx0cmV0dXJuIHByaXZhdGVzKHRoaXMpLmluaXRpYWxpemVkID09PSB0cnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcblx0XHRcdHN1cGVyKC4uLmFyZ3MpO1xuXHRcdFx0dGhpcy5jb25zdHJ1Y3QoKTtcblx0XHR9XG5cblx0XHRjb25zdHJ1Y3QoKSB7XG5cblx0XHR9XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdGF0dHJpYnV0ZUNoYW5nZWQoYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG5cblx0XHR9XG5cdFx0LyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5cdFx0Y29ubmVjdGVkKCkge1xuXG5cdFx0fVxuXG5cdFx0ZGlzY29ubmVjdGVkKCkge1xuXG5cdFx0fVxuXG5cdFx0YWRvcHRlZCgpIHtcblxuXHRcdH1cblxuXHRcdHJlbmRlcigpIHtcblxuXHRcdH1cblxuXHRcdF9vblJlbmRlcigpIHtcblxuXHRcdH1cblxuXHRcdF9wb3N0UmVuZGVyKCkge1xuXG5cdFx0fVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RlZEFkdmljZSgpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKGNvbm5lY3RlZENhbGxiYWNrKSB7XG5cdFx0XHRjb25zdCBjb250ZXh0ID0gdGhpcztcblx0XHRcdHByaXZhdGVzKGNvbnRleHQpLmNvbm5lY3RlZCA9IHRydWU7XG5cdFx0XHRpZiAoIXByaXZhdGVzKGNvbnRleHQpLmluaXRpYWxpemVkKSB7XG5cdFx0XHRcdHByaXZhdGVzKGNvbnRleHQpLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0Y29ubmVjdGVkQ2FsbGJhY2suY2FsbChjb250ZXh0KTtcblx0XHRcdFx0Y29udGV4dC5yZW5kZXIoKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlUmVuZGVyQWR2aWNlKCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAocmVuZGVyQ2FsbGJhY2spIHtcblx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0aWYgKCFwcml2YXRlcyhjb250ZXh0KS5yZW5kZXJpbmcpIHtcblx0XHRcdFx0Y29uc3QgZmlyc3RSZW5kZXIgPSBwcml2YXRlcyhjb250ZXh0KS5yZW5kZXJpbmcgPT09IHVuZGVmaW5lZDtcblx0XHRcdFx0cHJpdmF0ZXMoY29udGV4dCkucmVuZGVyaW5nID0gdHJ1ZTtcblx0XHRcdFx0bWljcm9UYXNrLnJ1bigoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHByaXZhdGVzKGNvbnRleHQpLnJlbmRlcmluZykge1xuXHRcdFx0XHRcdFx0cHJpdmF0ZXMoY29udGV4dCkucmVuZGVyaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjb250ZXh0Ll9vblJlbmRlcihmaXJzdFJlbmRlcik7XG5cdFx0XHRcdFx0XHRyZW5kZXJDYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5fcG9zdFJlbmRlcihmaXJzdFJlbmRlcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlRGlzY29ubmVjdGVkQWR2aWNlKCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoZGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcblx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0cHJpdmF0ZXMoY29udGV4dCkuY29ubmVjdGVkID0gZmFsc2U7XG5cdFx0XHRtaWNyb1Rhc2sucnVuKCgpID0+IHtcblx0XHRcdFx0aWYgKCFwcml2YXRlcyhjb250ZXh0KS5jb25uZWN0ZWQgJiYgcHJpdmF0ZXMoY29udGV4dCkuaW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHRwcml2YXRlcyhjb250ZXh0KS5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0XHRcdGRpc2Nvbm5lY3RlZENhbGxiYWNrLmNhbGwoY29udGV4dCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cbn07XG4iLCIvKiAgKi9cbmltcG9ydCBhZnRlciBmcm9tICcuLi9hZHZpY2UvYWZ0ZXIuanMnO1xuaW1wb3J0IGNyZWF0ZVN0b3JhZ2UgZnJvbSAnLi4vY3JlYXRlLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGxpc3RlbkV2ZW50LCB7fSBmcm9tICcuLi9kb20vbGlzdGVuLWV2ZW50LmpzJztcblxuXG5cbi8qKlxuICogTWl4aW4gYWRkcyBDdXN0b21FdmVudCBoYW5kbGluZyB0byBhbiBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IChiYXNlQ2xhc3MpID0+IHtcblx0Y29uc3Qge2Fzc2lnbn0gPSBPYmplY3Q7XG5cdGNvbnN0IHByaXZhdGVzID0gY3JlYXRlU3RvcmFnZShmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhhbmRsZXJzOiBbXVxuXHRcdH07XG5cdH0pO1xuXHRjb25zdCBldmVudERlZmF1bHRQYXJhbXMgPSB7XG5cdFx0YnViYmxlczogZmFsc2UsXG5cdFx0Y2FuY2VsYWJsZTogZmFsc2Vcblx0fTtcblxuXHRyZXR1cm4gY2xhc3MgRXZlbnRzIGV4dGVuZHMgYmFzZUNsYXNzIHtcblxuXHRcdHN0YXRpYyBmaW5hbGl6ZUNsYXNzKCkge1xuXHRcdFx0c3VwZXIuZmluYWxpemVDbGFzcygpO1xuXHRcdFx0YWZ0ZXIoY3JlYXRlRGlzY29ubmVjdGVkQWR2aWNlKCksICdkaXNjb25uZWN0ZWQnKSh0aGlzKTtcblx0XHR9XG5cblx0XHRoYW5kbGVFdmVudChldmVudCkge1xuXHRcdFx0Y29uc3QgaGFuZGxlID0gYG9uJHtldmVudC50eXBlfWA7XG5cdFx0XHRpZiAodHlwZW9mIHRoaXNbaGFuZGxlXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHQvLyAkRmxvd0ZpeE1lXG5cdFx0XHRcdHRoaXNbaGFuZGxlXShldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0b24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcblx0XHRcdHRoaXMub3duKGxpc3RlbkV2ZW50KHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKSk7XG5cdFx0fVxuXG5cdFx0ZGlzcGF0Y2godHlwZSwgZGF0YSA9IHt9KSB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHR5cGUsIGFzc2lnbihldmVudERlZmF1bHRQYXJhbXMsIHtkZXRhaWw6IGRhdGF9KSkpO1xuXHRcdH1cblxuXHRcdG9mZigpIHtcblx0XHRcdHByaXZhdGVzKHRoaXMpLmhhbmRsZXJzLmZvckVhY2goKGhhbmRsZXIpID0+IHtcblx0XHRcdFx0aGFuZGxlci5yZW1vdmUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdG93biguLi5oYW5kbGVycykge1xuXHRcdFx0aGFuZGxlcnMuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuXHRcdFx0XHRwcml2YXRlcyh0aGlzKS5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZURpc2Nvbm5lY3RlZEFkdmljZSgpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRjb250ZXh0Lm9mZigpO1xuXHRcdH07XG5cdH1cbn07XG4iLCIvKiAgKi9cbmltcG9ydCBiZWZvcmUgZnJvbSAnLi4vYWR2aWNlL2JlZm9yZS5qcyc7XG5pbXBvcnQgY3JlYXRlU3RvcmFnZSBmcm9tICcuLi9jcmVhdGUtc3RvcmFnZS5qcyc7XG5pbXBvcnQgbWljcm9UYXNrIGZyb20gJy4uL2RvbS9taWNyb3Rhc2suanMnO1xuXG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IChiYXNlQ2xhc3MpID0+IHtcblx0Y29uc3Qge2RlZmluZVByb3BlcnR5LCBrZXlzLCBhc3NpZ259ID0gT2JqZWN0O1xuXHRjb25zdCBhdHRyaWJ1dGVUb1Byb3BlcnR5TmFtZXMgPSB7fTtcblx0Y29uc3QgcHJvcGVydHlOYW1lc1RvQXR0cmlidXRlcyA9IHt9O1xuXHRjb25zdCBwcml2YXRlcyA9IGNyZWF0ZVN0b3JhZ2UoKTtcblxuXHRsZXQgcHJvcGVydGllc0NvbmZpZztcblx0bGV0IGRhdGFIYXNBY2Nlc3NvciA9IHt9O1xuXHRsZXQgZGF0YVByb3RvVmFsdWVzID0ge307XG5cblx0ZnVuY3Rpb24gZW5oYW5jZVByb3BlcnR5Q29uZmlnKGNvbmZpZykge1xuXHRcdGNvbmZpZy5oYXNPYnNlcnZlciA9ICdvYnNlcnZlcicgaW4gY29uZmlnO1xuXHRcdGNvbmZpZy5pc09ic2VydmVyU3RyaW5nID0gY29uZmlnLmhhc09ic2VydmVyICYmIHR5cGVvZiBjb25maWcub2JzZXJ2ZXIgPT09ICdzdHJpbmcnO1xuXHRcdGNvbmZpZy5pc1N0cmluZyA9IGNvbmZpZy50eXBlID09PSBTdHJpbmc7XG5cdFx0Y29uZmlnLmlzTnVtYmVyID0gY29uZmlnLnR5cGUgPT09IE51bWJlcjtcblx0XHRjb25maWcuaXNCb29sZWFuID0gY29uZmlnLnR5cGUgPT09IEJvb2xlYW47XG5cdFx0Y29uZmlnLmlzT2JqZWN0ID0gY29uZmlnLnR5cGUgPT09IE9iamVjdDtcblx0XHRjb25maWcuaXNBcnJheSA9IGNvbmZpZy50eXBlID09PSBBcnJheTtcblx0XHRjb25maWcuaXNEYXRlID0gY29uZmlnLnR5cGUgPT09IERhdGU7XG5cdFx0Y29uZmlnLm5vdGlmeSA9ICdub3RpZnknIGluIGNvbmZpZztcblx0XHRjb25maWcucmVhZE9ubHkgPSAoJ3JlYWRPbmx5JyBpbiBjb25maWcpID8gY29uZmlnLnJlYWRPbmx5IDogZmFsc2U7XG5cdFx0Y29uZmlnLnJlZmxlY3RUb0F0dHJpYnV0ZSA9ICdyZWZsZWN0VG9BdHRyaWJ1dGUnIGluIGNvbmZpZyA/XG5cdFx0XHRjb25maWcucmVmbGVjdFRvQXR0cmlidXRlIDogY29uZmlnLmlzU3RyaW5nIHx8IGNvbmZpZy5pc051bWJlciB8fCBjb25maWcuaXNCb29sZWFuO1xuXHR9XG5cblx0ZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG5cdFx0Y29uc3Qgb3V0cHV0ID0ge307XG5cdFx0Zm9yIChsZXQgbmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdFx0XHRpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BlcnRpZXMsIG5hbWUpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW25hbWVdO1xuXHRcdFx0b3V0cHV0W25hbWVdID0gKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykgPyB7dHlwZTogcHJvcGVydHl9IDogcHJvcGVydHk7XG5cdFx0XHRlbmhhbmNlUHJvcGVydHlDb25maWcob3V0cHV0W25hbWVdKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RlZEFkdmljZSgpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRpZiAoT2JqZWN0LmtleXMocHJpdmF0ZXMoY29udGV4dCkuaW5pdGlhbGl6ZVByb3BlcnRpZXMpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0YXNzaWduKGNvbnRleHQsIHByaXZhdGVzKGNvbnRleHQpLmluaXRpYWxpemVQcm9wZXJ0aWVzKTtcblx0XHRcdFx0cHJpdmF0ZXMoY29udGV4dCkuaW5pdGlhbGl6ZVByb3BlcnRpZXMgPSB7fTtcblx0XHRcdH1cblx0XHRcdGNvbnRleHQuX2ZsdXNoUHJvcGVydGllcygpO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVDaGFuZ2VBZHZpY2UoKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG5cdFx0XHRcdGNvbnRleHQuX2F0dHJpYnV0ZVRvUHJvcGVydHkoYXR0cmlidXRlLCBuZXdWYWx1ZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVByb3BlcnRpZXNDaGFuZ2VkQWR2aWNlKCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7XG5cdFx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRPYmplY3Qua2V5cyhjaGFuZ2VkUHJvcHMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHtub3RpZnksIGhhc09ic2VydmVyLCByZWZsZWN0VG9BdHRyaWJ1dGUsIGlzT2JzZXJ2ZXJTdHJpbmcsIG9ic2VydmVyfSA9IGNvbnRleHQuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcblx0XHRcdFx0aWYgKHJlZmxlY3RUb0F0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdGNvbnRleHQuX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGNoYW5nZWRQcm9wc1twcm9wZXJ0eV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChoYXNPYnNlcnZlciAmJiBpc09ic2VydmVyU3RyaW5nKSB7XG5cdFx0XHRcdFx0dGhpc1tvYnNlcnZlcl0oY2hhbmdlZFByb3BzW3Byb3BlcnR5XSwgb2xkUHJvcHNbcHJvcGVydHldKTtcblx0XHRcdFx0fSBlbHNlIGlmIChoYXNPYnNlcnZlciAmJiB0eXBlb2Ygb2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRvYnNlcnZlci5hcHBseShjb250ZXh0LCBbY2hhbmdlZFByb3BzW3Byb3BlcnR5XSwgb2xkUHJvcHNbcHJvcGVydHldXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5vdGlmeSkge1xuXHRcdFx0XHRcdGNvbnRleHQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoYCR7cHJvcGVydHl9LWNoYW5nZWRgLCB7XG5cdFx0XHRcdFx0XHRkZXRhaWw6IHtcblx0XHRcdFx0XHRcdFx0bmV3VmFsdWU6IGNoYW5nZWRQcm9wc1twcm9wZXJ0eV0sXG5cdFx0XHRcdFx0XHRcdG9sZFZhbHVlOiBvbGRQcm9wc1twcm9wZXJ0eV1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gY2xhc3MgUHJvcGVydGllcyBleHRlbmRzIGJhc2VDbGFzcyB7XG5cblx0XHRzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmNsYXNzUHJvcGVydGllcylcblx0XHRcdFx0Lm1hcCgocHJvcGVydHkpID0+IHRoaXMucHJvcGVydHlOYW1lVG9BdHRyaWJ1dGUocHJvcGVydHkpKSB8fCBbXTtcblx0XHR9XG5cblx0XHRzdGF0aWMgZmluYWxpemVDbGFzcygpIHtcblx0XHRcdHN1cGVyLmZpbmFsaXplQ2xhc3MoKTtcblx0XHRcdGJlZm9yZShjcmVhdGVDb25uZWN0ZWRBZHZpY2UoKSwgJ2Nvbm5lY3RlZCcpKHRoaXMpO1xuXHRcdFx0YmVmb3JlKGNyZWF0ZUF0dHJpYnV0ZUNoYW5nZUFkdmljZSgpLCAnYXR0cmlidXRlQ2hhbmdlZCcpKHRoaXMpO1xuXHRcdFx0YmVmb3JlKGNyZWF0ZVByb3BlcnRpZXNDaGFuZ2VkQWR2aWNlKCksICdwcm9wZXJ0aWVzQ2hhbmdlZCcpKHRoaXMpO1xuXHRcdFx0dGhpcy5jcmVhdGVQcm9wZXJ0aWVzKCk7XG5cdFx0fVxuXG5cdFx0c3RhdGljIGF0dHJpYnV0ZVRvUHJvcGVydHlOYW1lKGF0dHJpYnV0ZSkge1xuXHRcdFx0bGV0IHByb3BlcnR5ID0gYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWVzW2F0dHJpYnV0ZV07XG5cdFx0XHRpZiAoIXByb3BlcnR5KSB7XG5cdFx0XHRcdC8vIENvbnZlcnQgYW5kIG1lbW9pemUuXG5cdFx0XHRcdGNvbnN0IGh5cGVuUmVnRXggPSAvLShbYS16XSkvZztcblx0XHRcdFx0cHJvcGVydHkgPSBhdHRyaWJ1dGUucmVwbGFjZShoeXBlblJlZ0V4LCBtYXRjaCA9PiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpKTtcblx0XHRcdFx0YXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWVzW2F0dHJpYnV0ZV0gPSBwcm9wZXJ0eTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwcm9wZXJ0eTtcblx0XHR9XG5cblx0XHRzdGF0aWMgcHJvcGVydHlOYW1lVG9BdHRyaWJ1dGUocHJvcGVydHkpIHtcblx0XHRcdGxldCBhdHRyaWJ1dGUgPSBwcm9wZXJ0eU5hbWVzVG9BdHRyaWJ1dGVzW3Byb3BlcnR5XTtcblx0XHRcdGlmICghYXR0cmlidXRlKSB7XG5cdFx0XHRcdC8vIENvbnZlcnQgYW5kIG1lbW9pemUuXG5cdFx0XHRcdGNvbnN0IHVwcGVyY2FzZVJlZ0V4ID0gLyhbQS1aXSkvZztcblx0XHRcdFx0YXR0cmlidXRlID0gcHJvcGVydHkucmVwbGFjZSh1cHBlcmNhc2VSZWdFeCwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHByb3BlcnR5TmFtZXNUb0F0dHJpYnV0ZXNbcHJvcGVydHldID0gYXR0cmlidXRlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblx0XHR9XG5cblx0XHRzdGF0aWMgZ2V0IGNsYXNzUHJvcGVydGllcygpIHtcblx0XHRcdGlmICghcHJvcGVydGllc0NvbmZpZykge1xuXHRcdFx0XHRjb25zdCBnZXRQcm9wZXJ0aWVzQ29uZmlnID0gKCkgPT4gcHJvcGVydGllc0NvbmZpZyB8fCB7fTtcblx0XHRcdFx0bGV0IGNoZWNrT2JqID0gbnVsbDtcblx0XHRcdFx0bGV0IGxvb3AgPSB0cnVlO1xuXG5cdFx0XHRcdHdoaWxlIChsb29wKSB7XG5cdFx0XHRcdFx0Y2hlY2tPYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2hlY2tPYmogPT09IG51bGwgPyB0aGlzIDogY2hlY2tPYmopO1xuXHRcdFx0XHRcdGlmICghY2hlY2tPYmogfHwgIWNoZWNrT2JqLmNvbnN0cnVjdG9yIHx8XG5cdFx0XHRcdFx0XHRjaGVja09iai5jb25zdHJ1Y3RvciA9PT0gSFRNTEVsZW1lbnQgfHxcblx0XHRcdFx0XHRcdGNoZWNrT2JqLmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbiB8fFxuXHRcdFx0XHRcdFx0Y2hlY2tPYmouY29uc3RydWN0b3IgPT09IE9iamVjdCB8fFxuXHRcdFx0XHRcdFx0Y2hlY2tPYmouY29uc3RydWN0b3IgPT09IGNoZWNrT2JqLmNvbnN0cnVjdG9yLmNvbnN0cnVjdG9yKSB7XG5cdFx0XHRcdFx0XHRsb29wID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjaGVja09iaiwgJ3Byb3BlcnRpZXMnKSkge1xuXHRcdFx0XHRcdFx0Ly8gJEZsb3dGaXhNZVxuXHRcdFx0XHRcdFx0cHJvcGVydGllc0NvbmZpZyA9IGFzc2lnbihnZXRQcm9wZXJ0aWVzQ29uZmlnKCksIG5vcm1hbGl6ZVByb3BlcnRpZXMoY2hlY2tPYmoucHJvcGVydGllcykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5wcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0Ly8gJEZsb3dGaXhNZVxuXHRcdFx0XHRcdHByb3BlcnRpZXNDb25maWcgPSBhc3NpZ24oZ2V0UHJvcGVydGllc0NvbmZpZygpLCBub3JtYWxpemVQcm9wZXJ0aWVzKHRoaXMucHJvcGVydGllcykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHJvcGVydGllc0NvbmZpZztcblx0XHR9XG5cblx0XHRzdGF0aWMgY3JlYXRlUHJvcGVydGllcygpIHtcblx0XHRcdGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG5cdFx0XHRjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5jbGFzc1Byb3BlcnRpZXM7XG5cdFx0XHRrZXlzKHByb3BlcnRpZXMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG5cdFx0XHRcdGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgcHJvcGVydHkpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gc2V0dXAgcHJvcGVydHkgJyR7cHJvcGVydHl9JywgcHJvcGVydHkgYWxyZWFkeSBleGlzdHNgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBwcm9wZXJ0eVZhbHVlID0gcHJvcGVydGllc1twcm9wZXJ0eV0udmFsdWU7XG5cdFx0XHRcdGlmIChwcm9wZXJ0eVZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRkYXRhUHJvdG9WYWx1ZXNbcHJvcGVydHldID0gcHJvcGVydHlWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwcm90by5fY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcHJvcGVydGllc1twcm9wZXJ0eV0ucmVhZE9ubHkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3RydWN0KCkge1xuXHRcdFx0c3VwZXIuY29uc3RydWN0KCk7XG5cdFx0XHRwcml2YXRlcyh0aGlzKS5kYXRhID0ge307XG5cdFx0XHRwcml2YXRlcyh0aGlzKS5zZXJpYWxpemluZyA9IGZhbHNlO1xuXHRcdFx0cHJpdmF0ZXModGhpcykuaW5pdGlhbGl6ZVByb3BlcnRpZXMgPSB7fTtcblx0XHRcdHByaXZhdGVzKHRoaXMpLmRhdGFQZW5kaW5nID0gbnVsbDtcblx0XHRcdHByaXZhdGVzKHRoaXMpLmRhdGFPbGQgPSBudWxsO1xuXHRcdFx0cHJpdmF0ZXModGhpcykuZGF0YUludmFsaWQgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMoKTtcblx0XHRcdHRoaXMuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG5cdFx0fVxuXG5cdFx0cHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXHRcdH1cblxuXHRcdF9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuXHRcdFx0aWYgKCFkYXRhSGFzQWNjZXNzb3JbcHJvcGVydHldKSB7XG5cdFx0XHRcdGRhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0gPSB0cnVlO1xuXHRcdFx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGdldCgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLl9nZXRQcm9wZXJ0eShwcm9wZXJ0eSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzZXQ6IHJlYWRPbmx5ID8gKCkgPT4ge30gOiBmdW5jdGlvbiAobmV3VmFsdWUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3NldFByb3BlcnR5KHByb3BlcnR5LCBuZXdWYWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRfZ2V0UHJvcGVydHkocHJvcGVydHkpIHtcblx0XHRcdHJldHVybiBwcml2YXRlcyh0aGlzKS5kYXRhW3Byb3BlcnR5XTtcblx0XHR9XG5cblx0XHRfc2V0UHJvcGVydHkocHJvcGVydHksIG5ld1ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5faXNWYWxpZFByb3BlcnR5VmFsdWUocHJvcGVydHksIG5ld1ZhbHVlKSkge1xuXHRcdFx0XHRpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCBuZXdWYWx1ZSkpIHtcblx0XHRcdFx0XHR0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgaW52YWxpZCB2YWx1ZSAke25ld1ZhbHVlfSBmb3IgcHJvcGVydHkgJHtwcm9wZXJ0eX0gb2YgXG5cdFx0XHRcdFx0dHlwZSAke3RoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XS50eXBlLm5hbWV9YCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMoKSB7XG5cdFx0XHRPYmplY3Qua2V5cyhkYXRhUHJvdG9WYWx1ZXMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gdHlwZW9mIGRhdGFQcm90b1ZhbHVlc1twcm9wZXJ0eV0gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHRcdGRhdGFQcm90b1ZhbHVlc1twcm9wZXJ0eV0uY2FsbCh0aGlzKSA6IGRhdGFQcm90b1ZhbHVlc1twcm9wZXJ0eV07XG5cdFx0XHRcdHRoaXMuX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG5cdFx0XHRPYmplY3Qua2V5cyhkYXRhSGFzQWNjZXNzb3IpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG5cdFx0XHRcdGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBwcm9wZXJ0eSkpIHtcblx0XHRcdFx0XHRwcml2YXRlcyh0aGlzKS5pbml0aWFsaXplUHJvcGVydGllc1twcm9wZXJ0eV0gPSB0aGlzW3Byb3BlcnR5XTtcblx0XHRcdFx0XHRkZWxldGUgdGhpc1twcm9wZXJ0eV07XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdF9hdHRyaWJ1dGVUb1Byb3BlcnR5KGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0XHRcdGlmICghcHJpdmF0ZXModGhpcykuc2VyaWFsaXppbmcpIHtcblx0XHRcdFx0Y29uc3QgcHJvcGVydHkgPSB0aGlzLmNvbnN0cnVjdG9yLmF0dHJpYnV0ZVRvUHJvcGVydHlOYW1lKGF0dHJpYnV0ZSk7XG5cdFx0XHRcdHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdF9pc1ZhbGlkUHJvcGVydHlWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcblx0XHRcdGNvbnN0IHByb3BlcnR5VHlwZSA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XS50eXBlO1xuXHRcdFx0bGV0IGlzVmFsaWQgPSBmYWxzZTtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlzVmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHByb3BlcnR5VHlwZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzVmFsaWQgPSBgJHt0eXBlb2YgdmFsdWV9YCA9PT0gcHJvcGVydHlUeXBlLm5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpc1ZhbGlkO1xuXHRcdH1cblxuXHRcdF9wcm9wZXJ0eVRvQXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSkge1xuXHRcdFx0cHJpdmF0ZXModGhpcykuc2VyaWFsaXppbmcgPSB0cnVlO1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5wcm9wZXJ0eU5hbWVUb0F0dHJpYnV0ZShwcm9wZXJ0eSk7XG5cdFx0XHR2YWx1ZSA9IHRoaXMuX3NlcmlhbGl6ZVZhbHVlKHByb3BlcnR5LCB2YWx1ZSk7XG5cdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSkge1xuXHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHByaXZhdGVzKHRoaXMpLnNlcmlhbGl6aW5nID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0X2Rlc2VyaWFsaXplVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG5cdFx0XHRjb25zdCB7aXNOdW1iZXIsIGlzQXJyYXksIGlzQm9vbGVhbiwgaXNEYXRlLCBpc1N0cmluZywgaXNPYmplY3R9ID0gdGhpcy5jb25zdHJ1Y3Rvci5jbGFzc1Byb3BlcnRpZXNbcHJvcGVydHldO1xuXHRcdFx0aWYgKGlzQm9vbGVhbikge1xuXHRcdFx0XHR2YWx1ZSA9ICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKTtcblx0XHRcdH0gZWxzZSBpZiAoaXNOdW1iZXIpIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMCA6IE51bWJlcih2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlzU3RyaW5nKSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogU3RyaW5nKHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAoaXNPYmplY3QgfHwgaXNBcnJheSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBpc0FycmF5ID8gbnVsbCA6IHt9IDogSlNPTi5wYXJzZSh2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlzRGF0ZSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IG5ldyBEYXRlKHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRfc2VyaWFsaXplVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG5cdFx0XHRjb25zdCBwcm9wZXJ0eUNvbmZpZyA9IHRoaXMuY29uc3RydWN0b3IuY2xhc3NQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcblx0XHRcdGNvbnN0IHtpc0Jvb2xlYW4sIGlzT2JqZWN0LCBpc0FycmF5fSA9IHByb3BlcnR5Q29uZmlnO1xuXG5cdFx0XHRpZiAoaXNCb29sZWFuKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA/ICcnIDogdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGlzT2JqZWN0IHx8IGlzQXJyYXkpIHtcblx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0dmFsdWUgPSB2YWx1ZSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0X3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcblx0XHRcdGxldCBvbGQgPSBwcml2YXRlcyh0aGlzKS5kYXRhW3Byb3BlcnR5XTtcblx0XHRcdGxldCBjaGFuZ2VkID0gdGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpO1xuXHRcdFx0aWYgKGNoYW5nZWQpIHtcblx0XHRcdFx0aWYgKCFwcml2YXRlcyh0aGlzKS5kYXRhUGVuZGluZykge1xuXHRcdFx0XHRcdHByaXZhdGVzKHRoaXMpLmRhdGFQZW5kaW5nID0ge307XG5cdFx0XHRcdFx0cHJpdmF0ZXModGhpcykuZGF0YU9sZCA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG5cdFx0XHRcdGlmIChwcml2YXRlcyh0aGlzKS5kYXRhT2xkICYmICEocHJvcGVydHkgaW4gcHJpdmF0ZXModGhpcykuZGF0YU9sZCkpIHtcblx0XHRcdFx0XHRwcml2YXRlcyh0aGlzKS5kYXRhT2xkW3Byb3BlcnR5XSA9IG9sZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwcml2YXRlcyh0aGlzKS5kYXRhW3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRcdFx0XHRwcml2YXRlcyh0aGlzKS5kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH1cblxuXHRcdF9pbnZhbGlkYXRlUHJvcGVydGllcygpIHtcblx0XHRcdGlmICghcHJpdmF0ZXModGhpcykuZGF0YUludmFsaWQpIHtcblx0XHRcdFx0cHJpdmF0ZXModGhpcykuZGF0YUludmFsaWQgPSB0cnVlO1xuXHRcdFx0XHRtaWNyb1Rhc2sucnVuKCgpID0+IHtcblx0XHRcdFx0XHRpZiAocHJpdmF0ZXModGhpcykuZGF0YUludmFsaWQpIHtcblx0XHRcdFx0XHRcdHByaXZhdGVzKHRoaXMpLmRhdGFJbnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdF9mbHVzaFByb3BlcnRpZXMoKSB7XG5cdFx0XHRjb25zdCBwcm9wcyA9IHByaXZhdGVzKHRoaXMpLmRhdGE7XG5cdFx0XHRjb25zdCBjaGFuZ2VkUHJvcHMgPSBwcml2YXRlcyh0aGlzKS5kYXRhUGVuZGluZztcblx0XHRcdGNvbnN0IG9sZCA9IHByaXZhdGVzKHRoaXMpLmRhdGFPbGQ7XG5cblx0XHRcdGlmICh0aGlzLl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKHByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZCkpIHtcblx0XHRcdFx0cHJpdmF0ZXModGhpcykuZGF0YVBlbmRpbmcgPSBudWxsO1xuXHRcdFx0XHRwcml2YXRlcyh0aGlzKS5kYXRhT2xkID0gbnVsbDtcblx0XHRcdFx0dGhpcy5wcm9wZXJ0aWVzQ2hhbmdlZChwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdF9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKGN1cnJlbnRQcm9wcywgY2hhbmdlZFByb3BzLCBvbGRQcm9wcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdFx0XHRyZXR1cm4gQm9vbGVhbihjaGFuZ2VkUHJvcHMpO1xuXHRcdH1cblxuXHRcdF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0Ly8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrXG5cdFx0XHRcdChvbGQgIT09IHZhbHVlICYmXG5cdFx0XHRcdFx0Ly8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0XHQob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufTtcbiIsIi8qICAqL1xuY29uc3Qge2tleXN9ID0gT2JqZWN0O1xuXG5leHBvcnQgZGVmYXVsdCAobykgPT4ga2V5cyhvKS5yZWR1Y2UoXG5cdChtLCBrKSA9PiBtLnNldChrLCBvW2tdKSwgbmV3IE1hcCgpKTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGJlaGF2aW91ciwgLi4ubWV0aG9kTmFtZXMpID0+IHtcblx0cmV0dXJuIGZ1bmN0aW9uIChrbGFzcykge1xuXHRcdGNvbnN0IHByb3RvID0ga2xhc3MucHJvdG90eXBlO1xuXHRcdGNvbnN0IGxlbiA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcblx0XHRjb25zdCB7ZGVmaW5lUHJvcGVydHl9ID0gT2JqZWN0O1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGNvbnN0IG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lc1tpXTtcblx0XHRcdGNvbnN0IG1ldGhvZCA9IHByb3RvW21ldGhvZE5hbWVdO1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sIG1ldGhvZE5hbWUsIHtcblx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRiZWhhdmlvdXIuY2FsbCh0aGlzLCBlcnIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4ga2xhc3M7XG5cdH07XG59O1xuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAocGFzc1Rocm91Z2gpID0+IHtcblx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHJlc29sdmUocGFzc1Rocm91Z2gpKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUocGFzc1Rocm91Z2gpO1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKHRhZ05hbWUsIGF0dHJpYnV0ZXMpID0+IHtcblx0bGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuXHRmb3IgKGxldCBhdHRyIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoYXR0cmlidXRlcywgYXR0cikpIHtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJpYnV0ZXNbYXR0cl0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZWxlbWVudDtcbn07XG4iLCIvKiAgKi9cbmV4cG9ydCBkZWZhdWx0IChlbGVtZW50KSA9PiB7XG5cdGxldCBzaWJsaW5ncyA9IFtdO1xuXHRpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmIGVsZW1lbnQucGFyZW50Tm9kZS5maXJzdENoaWxkKSB7XG5cdFx0bGV0IHNpYmxpbmcgPSBlbGVtZW50LnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoc2libGluZy5ub2RlVHlwZSA9PT0gMSAmJiBzaWJsaW5nICE9PSBlbGVtZW50KSB7XG5cdFx0XHRcdHNpYmxpbmdzLnB1c2goc2libGluZyk7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAoc2libGluZy5uZXh0U2libGluZyAmJiBzaWJsaW5nLm5leHRTaWJsaW5nICE9PSBudWxsICYmIChzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZykpO1xuXHR9XG5cblx0cmV0dXJuIHNpYmxpbmdzO1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGVsZW1lbnQpID0+IHtcblx0aWYgKGVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuXHRcdGVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0fVxufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGNoaWxkLCBwYXJlbnQpID0+IHtcblx0LyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cblx0d2hpbGUgKGNoaWxkLnBhcmVudE5vZGUgJiYgKGNoaWxkID0gY2hpbGQucGFyZW50Tm9kZSkgJiYgY2hpbGQgIT09IHBhcmVudCkge1xuXG5cdH1cblx0LyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cblx0cmV0dXJuIEJvb2xlYW4oY2hpbGQpO1xufTtcblxuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAodGVtcGxhdGUpID0+IHtcblx0aWYgKCdjb250ZW50JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XG5cdH1cblxuXHRsZXQgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdGxldCBjaGlsZHJlbiA9IHRlbXBsYXRlLmNoaWxkTm9kZXM7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZHJlbltpXS5jbG9uZU5vZGUodHJ1ZSkpO1xuXHR9XG5cdHJldHVybiBmcmFnbWVudDtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCBsaXN0ZW5FdmVudCwge30gZnJvbSAnLi9saXN0ZW4tZXZlbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSA9IGZhbHNlKSA9PiB7XG5cdGxldCBoYW5kbGUgPSBsaXN0ZW5FdmVudCh0YXJnZXQsIHR5cGUsICguLi5hcmdzKSA9PiB7XG5cdFx0aGFuZGxlLnJlbW92ZSgpO1xuXHRcdGxpc3RlbmVyKC4uLmFyZ3MpO1xuXHR9LCBjYXB0dXJlKTtcblx0cmV0dXJuIGhhbmRsZTtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCBsaXN0ZW5FdmVudCwge30gZnJvbSAnLi9saXN0ZW4tZXZlbnQuanMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0ICh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlID0gZmFsc2UpID0+IHtcblx0bGV0IHBhdXNlZCA9IGZhbHNlO1xuXHRsZXQgaGFuZGxlID0gbGlzdGVuRXZlbnQodGFyZ2V0LCB0eXBlLCAoLi4uYXJncykgPT4ge1xuXHRcdGlmICghcGF1c2VkKSB7XG5cdFx0XHRsaXN0ZW5lciguLi5hcmdzKTtcblx0XHR9XG5cdH0sIGNhcHR1cmUpO1xuXG5cdHJldHVybiB7XG5cdFx0cmVtb3ZlKCkge1xuXHRcdFx0aGFuZGxlLnJlbW92ZSgpO1xuXHRcdH0sXG5cdFx0cGF1c2UoKSB7XG5cdFx0XHRwYXVzZWQgPSB0cnVlO1xuXHRcdH0sXG5cdFx0cmVzdW1lKCkge1xuXHRcdFx0cGF1c2VkID0gZmFsc2U7XG5cdFx0fVxuXHR9O1xufTtcbiIsIi8qICAqL1xuZXhwb3J0IGRlZmF1bHQgKGV2dCkgPT4ge1xuXHRpZiAoZXZ0LnN0b3BQcm9wYWdhdGlvbikge1xuXHRcdGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxuXHRldnQucHJldmVudERlZmF1bHQoKTtcbn07XG4iLCIvKiAgKi9cbmltcG9ydCBjcmVhdGVTdG9yYWdlIGZyb20gJy4uL2NyZWF0ZS1zdG9yYWdlLmpzJztcbmltcG9ydCBhZnRlciBmcm9tICcuLi9hZHZpY2UvYWZ0ZXIuanMnO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgKGJhc2VDbGFzcykgPT4ge1xuXHRjb25zdCB7YXNzaWdufSA9IE9iamVjdDtcblx0Y29uc3QgcHJpdmF0ZXMgPSBjcmVhdGVTdG9yYWdlKCk7XG5cblx0cmV0dXJuIGNsYXNzIFN0YXRlIGV4dGVuZHMgYmFzZUNsYXNzIHtcblx0XHRzdGF0aWMgZmluYWxpemVDbGFzcygpIHtcblx0XHRcdHN1cGVyLmZpbmFsaXplQ2xhc3MoKTtcblx0XHRcdGFmdGVyKGNyZWF0ZUJlZm9yZVJlbmRlckFkdmljZSgpLCAnX29uUmVuZGVyJykodGhpcyk7XG5cdFx0XHRhZnRlcihjcmVhdGVBZnRlclJlbmRlckFkdmljZSgpLCAnX3Bvc3RSZW5kZXInKSh0aGlzKTtcblx0XHR9XG5cblx0XHRjb25zdHJ1Y3QoKSB7XG5cdFx0XHRzdXBlci5jb25zdHJ1Y3QoKTtcblx0XHRcdHRoaXMuc2V0U3RhdGUodGhpcy5kZWZhdWx0U3RhdGUpO1xuXHRcdH1cblxuXHRcdGdldCBkZWZhdWx0U3RhdGUoKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0Z2V0IHN0YXRlKCkge1xuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgcHJpdmF0ZXModGhpcykuc3RhdGUpO1xuXHRcdH1cblxuXHRcdHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0U3RhdGUpIHtcblx0XHRcdGZvciAobGV0IGtleSBpbiBuZXh0U3RhdGUpIHtcblx0XHRcdFx0aWYgKG5leHRTdGF0ZVtrZXldICE9PSBwcml2YXRlcyh0aGlzKS5zdGF0ZVtrZXldKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRzZXRTdGF0ZShjaGFuZ2VzKSB7XG5cdFx0XHRjb25zdCBuZXh0U3RhdGUgPSBhc3NpZ24oe30sIHByaXZhdGVzKHRoaXMpLnN0YXRlLCBjaGFuZ2VzKTtcblx0XHRcdGNvbnN0IHByZXZpb3VzU3RhdGUgPSBwcml2YXRlcyh0aGlzKS5zdGF0ZTtcblx0XHRcdGNvbnN0IGNoYW5nZWQgPSBwcmV2aW91c1N0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFN0YXRlKTtcblxuXHRcdFx0aWYgKGNoYW5nZWQpIHtcblx0XHRcdFx0cHJpdmF0ZXModGhpcykuc3RhdGUgPSBuZXh0U3RhdGU7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbXBvbmVudFdpbGxSZW5kZXIobmV3U3RhdGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cdFx0fVxuXG5cdFx0Y29tcG9uZW50RGlkUmVuZGVyKHByZXZpb3VzU3RhdGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cdFx0fVxuXG5cdFx0Y29tcG9uZW50V2lsbFVwZGF0ZShuZXdTdGF0ZSwgcHJldmlvdXNTdGF0ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblx0XHR9XG5cblx0XHRjb21wb25lbnREaWRVcGRhdGUocHJldmlvdXNTdGF0ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gY3JlYXRlQmVmb3JlUmVuZGVyQWR2aWNlKCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoZmlyc3RSZW5kZXIpIHtcblx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0aWYgKGZpcnN0UmVuZGVyKSB7XG5cdFx0XHRcdGNvbnRleHQuY29tcG9uZW50V2lsbFJlbmRlcih0aGlzLnN0YXRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnRleHQuY29tcG9uZW50V2lsbFVwZGF0ZSh0aGlzLnN0YXRlLCBhc3NpZ24oe30sIHByaXZhdGVzKGNvbnRleHQpLnJlbmRlcmVkU3RhdGUpKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlQWZ0ZXJSZW5kZXJBZHZpY2UoKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChmaXJzdFJlbmRlcikge1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRjb25zdCBwcmV2aW91c1N0YXRlID0gcHJpdmF0ZXMoY29udGV4dCkucmVuZGVyZWRTdGF0ZTtcblx0XHRcdHByaXZhdGVzKGNvbnRleHQpLnJlbmRlcmVkU3RhdGUgPSBwcml2YXRlcyhjb250ZXh0KS5zdGF0ZTtcblx0XHRcdGlmIChmaXJzdFJlbmRlcikge1xuXHRcdFx0XHRjb250ZXh0LmNvbXBvbmVudERpZFJlbmRlcihwcmV2aW91c1N0YXRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlKHByZXZpb3VzU3RhdGUpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG4iLCIvKiAgKi9cbmltcG9ydCBiZWZvcmUgZnJvbSAnLi4vYWR2aWNlL2JlZm9yZS5qcyc7XG5pbXBvcnQgZWxlbWVudENoaWxkcmVuIGZyb20gJy4uL2RvbS9lbGVtZW50LWNoaWxkcmVuLmpzJztcblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgKGJhc2VDbGFzcykgPT4ge1xuXHRyZXR1cm4gY2xhc3MgU2xvdHMgZXh0ZW5kcyBiYXNlQ2xhc3Mge1xuXG5cdFx0c3RhdGljIGZpbmFsaXplQ2xhc3MoKSB7XG5cdFx0XHRzdXBlci5maW5hbGl6ZUNsYXNzKCk7XG5cdFx0XHRiZWZvcmUoY3JlYXRlQmVmb3JlUmVuZGVyQWR2aWNlKCksICdfb25SZW5kZXInKSh0aGlzKTtcblx0XHR9XG5cblx0XHRjb25zdHJ1Y3QoKSB7XG5cdFx0XHRzdXBlci5jb25zdHJ1Y3QoKTtcblx0XHRcdHRoaXMuc2xvdHMgPSB7ZGVmYXVsdDogW119O1xuXHRcdH1cblxuXHRcdHNsb3RzQXNzaWduZWQoKSB7XG5cblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gY3JlYXRlQmVmb3JlUmVuZGVyQWR2aWNlKCkge1xuXHRcdGNvbnN0IGh5cGVuUmVnRXggPSAvLShbYS16XSkvZztcblxuXHRcdHJldHVybiBmdW5jdGlvbiAoZmlyc3RSZW5kZXIpIHtcblx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0aWYgKGZpcnN0UmVuZGVyKSB7XG5cdFx0XHRcdGNvbnN0IGNoaWxkcmVuID0gZWxlbWVudENoaWxkcmVuKGNvbnRleHQpO1xuXHRcdFx0XHRjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGNoaWxkLmdldEF0dHJpYnV0ZSA/IGNoaWxkLmdldEF0dHJpYnV0ZSgnc2xvdCcpIDogbnVsbDtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGF0dHJpYnV0ZSA9PT0gJ3N0cmluZycgJiYgYXR0cmlidXRlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdGNvbnN0IHNsb3QgPSBhdHRyaWJ1dGUucmVwbGFjZShoeXBlblJlZ0V4LCBtYXRjaCA9PiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpKTtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2xvdHNbc2xvdF0gPSBjaGlsZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zbG90cy5kZWZhdWx0LnB1c2goY2hpbGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnRleHQuc2xvdHNBc3NpZ25lZCgpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG4iLCIvKiAgKi9cbmltcG9ydCBjbGFzc0J1aWxkZXIgZnJvbSAnLi4vY2xhc3MtYnVpbGRlci5qcyc7XG5pbXBvcnQgY3VzdG9tRWxlbWVudCwge30gZnJvbSAnLi9jdXN0b20tZWxlbWVudC1taXhpbi5qcyc7XG5pbXBvcnQgcHJvcGVydGllcywge30gZnJvbSAnLi9wcm9wZXJ0aWVzLW1peGluLmpzJztcbmltcG9ydCBldmVudHMsIHt9IGZyb20gJy4vZXZlbnRzLW1peGluLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgKGJhc2VDbGFzcyA9IGN1c3RvbUVsZW1lbnQoKSkgPT4ge1xuXHRyZXR1cm4gY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgY2xhc3NCdWlsZGVyKGJhc2VDbGFzcykud2l0aChldmVudHMsIHByb3BlcnRpZXMpIHtcblx0XHRwcm9wZXJ0aWVzQ2hhbmdlZChjdXJyZW50UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdFx0aWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAob2JqLCBrZXksIGRlZmF1bHRWYWx1ZSA9IHVuZGVmaW5lZCkgPT4ge1xuXHRpZiAoa2V5LmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcblx0XHRyZXR1cm4gb2JqW2tleV0gPyBvYmpba2V5XSA6IGRlZmF1bHRWYWx1ZTtcblx0fVxuXHRjb25zdCBwYXJ0cyA9IGtleS5zcGxpdCgnLicpO1xuXHRjb25zdCBsZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cdGxldCBvYmplY3QgPSBvYmo7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdG9iamVjdCA9IG9iamVjdFtwYXJ0c1tpXV07XG5cdFx0aWYgKHR5cGVvZiBvYmplY3QgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRvYmplY3QgPSBkZWZhdWx0VmFsdWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvYmplY3Q7XG59O1xuIiwiLyogICovXG5leHBvcnQgZGVmYXVsdCAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG5cdGlmIChrZXkuaW5kZXhPZignLicpID09PSAtMSkge1xuXHRcdG9ialtrZXldID0gdmFsdWU7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG5cdGNvbnN0IGRlcHRoID0gcGFydHMubGVuZ3RoIC0gMTtcblx0bGV0IG9iamVjdCA9IG9iajtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGRlcHRoOyBpKyspIHtcblx0XHRpZiAodHlwZW9mIG9iamVjdFtwYXJ0c1tpXV0gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRvYmplY3RbcGFydHNbaV1dID0ge307XG5cdFx0fVxuXHRcdG9iamVjdCA9IG9iamVjdFtwYXJ0c1tpXV07XG5cdH1cblx0b2JqZWN0W3BhcnRzW2RlcHRoXV0gPSB2YWx1ZTtcbn07XG4iXSwibmFtZXMiOlsicHJldlRpbWVJZCIsInByZXZVbmlxdWVJZCIsInByZWZpeCIsIm5ld1VuaXF1ZUlkIiwiRGF0ZSIsIm5vdyIsInVuaXF1ZUlkIiwiU3RyaW5nIiwid3JhcHBlZE1peGluS2V5IiwiYXBwbGllZE1peGluS2V5Iiwid3JhcHBlciIsInNldFByb3RvdHlwZU9mIiwiT2JqZWN0IiwibWl4aW4iLCJ3cmFwIiwic3VwZXJDbGFzcyIsImFwcGxpY2F0aW9uIiwicHJvdG90eXBlIiwidW53cmFwIiwiYXBwbHkiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvIiwiY2FsbCIsImdldFByb3RvdHlwZU9mIiwibyIsImlzQXBwbGljYXRpb25PZiIsImhhcyIsImNhY2hlZEFwcGxpY2F0aW9uS2V5IiwiZGVkdXBlIiwiY2FjaGVkQXBwbGljYXRpb24iLCJNYXAiLCJnZXQiLCJzZXQiLCJjYWNoZSIsImRlY2xhcmUiLCJmcmVlemUiLCJrbGFzcyIsIm1peGlucyIsIm1hcCIsImNyZWF0ZU1peGluIiwicmVkdWNlIiwiayIsIm0iLCJjcmVhdG9yIiwiY3JlYXRlIiwiYmluZCIsInN0b3JlIiwiV2Vha01hcCIsIm9iaiIsInZhbHVlIiwiYmVoYXZpb3VyIiwibWV0aG9kTmFtZXMiLCJsZW4iLCJsZW5ndGgiLCJkZWZpbmVQcm9wZXJ0eSIsImkiLCJtZXRob2ROYW1lIiwibWV0aG9kIiwiYXJncyIsInRoaXMiLCJ1bnNoaWZ0IiwicmV0dXJuVmFsdWUiLCJlbGVtZW50Iiwibm9kZVR5cGUiLCJjaGlsZE5vZGVzIiwiY2hpbGRyZW4iLCJtaWNyb1Rhc2tDdXJySGFuZGxlIiwibWljcm9UYXNrTGFzdEhhbmRsZSIsIm1pY3JvVGFza0NhbGxiYWNrcyIsIm1pY3JvVGFza05vZGVDb250ZW50IiwibWljcm9UYXNrTm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJNdXRhdGlvbk9ic2VydmVyIiwiY2IiLCJlcnIiLCJzcGxpY2UiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIm1pY3JvVGFzayIsImNhbGxiYWNrIiwidGV4dENvbnRlbnQiLCJwdXNoIiwiaGFuZGxlIiwiaWR4IiwiRXJyb3IiLCJ0YXJnZXQiLCJ0eXBlIiwibGlzdGVuZXIiLCJjYXB0dXJlIiwiaW5kZXhPZiIsImV2ZW50cyIsInNwbGl0IiwiaGFuZGxlcyIsImFkZExpc3RlbmVyIiwicmVtb3ZlIiwicG9wIiwicGFyc2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdsb2JhbCIsImRlZmF1bHRWaWV3IiwiSFRNTEVsZW1lbnQiLCJfSFRNTEVsZW1lbnQiLCJiYXNlQ2xhc3MiLCJjdXN0b21FbGVtZW50c1YxQ2FsbGJhY2tzIiwicHJpdmF0ZXMiLCJjcmVhdGVTdG9yYWdlIiwiX2Jhc2VDbGFzcyIsImNvbnN0cnVjdCIsImZpbmFsaXplQ2xhc3MiLCJkZWZpbmUiLCJ0YWdOYW1lIiwicmVnaXN0cnkiLCJjdXN0b21FbGVtZW50cyIsImZvckVhY2giLCJjYWxsYmFja01ldGhvZE5hbWUiLCJuZXdDYWxsYmFja05hbWUiLCJzdWJzdHJpbmciLCJvcmlnaW5hbE1ldGhvZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiY29ubmVjdGVkIiwiaW5pdGlhbGl6ZWQiLCJyZW5kZXIiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImNvbnRleHQiLCJydW4iLCJyZW5kZXJDYWxsYmFjayIsInJlbmRlcmluZyIsImZpcnN0UmVuZGVyIiwidW5kZWZpbmVkIiwiX29uUmVuZGVyIiwiX3Bvc3RSZW5kZXIiLCJhdHRyaWJ1dGVDaGFuZ2VkIiwiYXR0cmlidXRlTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJkaXNjb25uZWN0ZWQiLCJhZG9wdGVkIiwiYXNzaWduIiwiZXZlbnREZWZhdWx0UGFyYW1zIiwib2ZmIiwiaGFuZGxlRXZlbnQiLCJldmVudCIsIm9uIiwib3duIiwibGlzdGVuRXZlbnQiLCJkaXNwYXRjaCIsImRhdGEiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJfdGhpczIiLCJrZXlzIiwiYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lc1RvQXR0cmlidXRlcyIsInByb3BlcnRpZXNDb25maWciLCJkYXRhSGFzQWNjZXNzb3IiLCJkYXRhUHJvdG9WYWx1ZXMiLCJub3JtYWxpemVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImNvbmZpZyIsIm91dHB1dCIsIm5hbWUiLCJwcm9wZXJ0eSIsImhhc09ic2VydmVyIiwiaXNPYnNlcnZlclN0cmluZyIsIm9ic2VydmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsIk51bWJlciIsImlzQm9vbGVhbiIsIkJvb2xlYW4iLCJpc09iamVjdCIsImlzQXJyYXkiLCJBcnJheSIsImlzRGF0ZSIsIm5vdGlmeSIsInJlYWRPbmx5IiwicmVmbGVjdFRvQXR0cmlidXRlIiwiaW5pdGlhbGl6ZVByb3BlcnRpZXMiLCJfZmx1c2hQcm9wZXJ0aWVzIiwiYXR0cmlidXRlIiwiX2F0dHJpYnV0ZVRvUHJvcGVydHkiLCJjdXJyZW50UHJvcHMiLCJjaGFuZ2VkUHJvcHMiLCJvbGRQcm9wcyIsImNvbnN0cnVjdG9yIiwiY2xhc3NQcm9wZXJ0aWVzIiwiX3Byb3BlcnR5VG9BdHRyaWJ1dGUiLCJjcmVhdGVQcm9wZXJ0aWVzIiwiYXR0cmlidXRlVG9Qcm9wZXJ0eU5hbWUiLCJyZXBsYWNlIiwibWF0Y2giLCJ0b1VwcGVyQ2FzZSIsInByb3BlcnR5TmFtZVRvQXR0cmlidXRlIiwidG9Mb3dlckNhc2UiLCJwcm9wZXJ0eVZhbHVlIiwiX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IiLCJzZXJpYWxpemluZyIsImRhdGFQZW5kaW5nIiwiZGF0YU9sZCIsImRhdGFJbnZhbGlkIiwiX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMiLCJfaW5pdGlhbGl6ZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzQ2hhbmdlZCIsIl9nZXRQcm9wZXJ0eSIsIl9zZXRQcm9wZXJ0eSIsIl9pc1ZhbGlkUHJvcGVydHlWYWx1ZSIsIl9zZXRQZW5kaW5nUHJvcGVydHkiLCJfaW52YWxpZGF0ZVByb3BlcnRpZXMiLCJsb2ciLCJfdGhpczMiLCJfdGhpczQiLCJfZGVzZXJpYWxpemVWYWx1ZSIsInByb3BlcnR5VHlwZSIsIl9zZXJpYWxpemVWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIkpTT04iLCJwcm9wZXJ0eUNvbmZpZyIsInN0cmluZ2lmeSIsInRvU3RyaW5nIiwib2xkIiwiY2hhbmdlZCIsIl9zaG91bGRQcm9wZXJ0eUNoYW5nZSIsIl90aGlzNSIsInByb3BzIiwiX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UiLCJfdGhpczYiLCJnZXRQcm9wZXJ0aWVzQ29uZmlnIiwiY2hlY2tPYmoiLCJsb29wIiwiRnVuY3Rpb24iLCJwYXNzVGhyb3VnaCIsInJlYWR5U3RhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImF0dHJpYnV0ZXMiLCJjcmVhdGVFbGVtZW50IiwiYXR0ciIsInNpYmxpbmdzIiwicGFyZW50Tm9kZSIsImZpcnN0Q2hpbGQiLCJzaWJsaW5nIiwibmV4dFNpYmxpbmciLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJjaGlsZCIsInBhcmVudCIsInRlbXBsYXRlIiwiaW1wb3J0Tm9kZSIsImNvbnRlbnQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsImNsb25lTm9kZSIsInBhdXNlZCIsImV2dCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY29tcG9uZW50V2lsbFJlbmRlciIsInN0YXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsInJlbmRlcmVkU3RhdGUiLCJwcmV2aW91c1N0YXRlIiwiY29tcG9uZW50RGlkUmVuZGVyIiwiY29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJkZWZhdWx0U3RhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0U3RhdGUiLCJrZXkiLCJjaGFuZ2VzIiwibmV3U3RhdGUiLCJoeXBlblJlZ0V4IiwiZWxlbWVudENoaWxkcmVuIiwic2xvdCIsInNsb3RzIiwiZGVmYXVsdCIsInNsb3RzQXNzaWduZWQiLCJjdXN0b21FbGVtZW50IiwiY2xhc3NCdWlsZGVyIiwid2l0aCIsImRlZmF1bHRWYWx1ZSIsInBhcnRzIiwib2JqZWN0IiwiZGVwdGgiXSwibWFwcGluZ3MiOiJxTUFFQSxJQUFJQSxFQUFhLEVBQ2JDLEVBQWUsYUFFSEMsT0FDWEMsRUFBY0MsS0FBS0MsTUFDbkJGLElBQWdCSCxJQUNqQkMsS0FFV0UsSUFDRSxPQUdaRyxLQUFjQyxPQUFPSixHQUFlSSxPQUFPTixVQUMzQ0MsTUFDV0EsTUFBVUksR0FFbEJBLEdDZEtFLEVBQWtCRixFQUFTLGlCQUczQkcsRUFBa0JILEVBQVMsNEJDS3hCSSxVQUFZQSxFQUFRRixJQUFvQkUsR0NUakRDLEVBQWtCQyxPQUFsQkQsMEJBa0JTRSxFQUFPSCxZQUNQQSxFQUFTRyxHQUNuQkEsRUFBTUwsT0FDSkEsR0FBbUJLLEdBRW5CSCxjQ2JRRyxVQUNmQyxFQUFLRCxFQUFPLFNBQUNFLG1CQ0lFQSxFQUFZRixPQUN2QkcsRUFBY0gsRUFBTUUsVUFDVkMsRUFBWUMsVUFDcEJSLEdBQW1CUyxFQUFPTCxHQUN6QkcsRURScUJHLENBQU1KLEVBQVlGLE1FVnhDTyxFQUFrQlIsT0FBbEJRLDBCQWVTQyxFQUFPUixVQUNmTyxFQUFlRSxLQUFLRCxFQUFPWixJQUFvQlksRUFBTVosS0FBcUJTLEVBQU9MLElDakJsRlUsRUFBa0JYLE9BQWxCVywwQkNTU1YsVUFDUkMsRUFBS0QsRUFBTyxTQUFDRSxtQkRFTFMsRUFBR1gsUUFDTCxPQUFOVyxHQUFZLElBQ2RDLEVBQWdCRCxFQUFHWCxVQUNmLElBRUpVLEVBQWVDLFVBRWIsRUNSTEUsQ0FBSVgsRUFBV0UsVUFBV0osR0FBVUUsRUFBYUYsRUFBTUUsTUNWcERZLEVBQXVCckIsRUFBUyxpQ0NDdEJPLFVBQVVlLFdEWVZmLFVBQ1JDLEVB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
